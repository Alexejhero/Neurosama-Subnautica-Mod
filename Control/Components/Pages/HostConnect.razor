@page "/host"

@using Control.Services

@inject NavigationManager nav
@inject GameConnectionService gameConn
@inject UserService user
@inject AuthenticationStateProvider authProvider
@inject IJSRuntime js

@rendermode InteractiveServer
@attribute [StreamRendering]

<script>
    function error(err) {
        throw err;
        document.getElementById("error").textContent = "Invalid request, connection will not work. You can close this tab.";
    }
    function connect() {
        storeNonce();
        const nonce = sessionStorage.getItem("nonce");
        if (!nonce) {
            error("malformed fragment");
            return;
        }
    }
    function storeNonce() {
        // can't use named groups because blazor interprets the less-than as a script tag orz
        const regex = /nonce=([^&]+)&port=(\d+)/;
        const fragment = document.location.hash;
        if (!fragment) return;

        document.location.hash = "";
        const match = regex.exec(fragment);
        if (!match) return;

        sessionStorage.setItem("nonce", match[1]);
        sessionStorage.setItem("port", match[2]);
    };
    async function returnToGame(username, token) {
        const port = sessionStorage.getItem("port");
        const nonce = sessionStorage.getItem("nonce");
        if (!port || !nonce) {
            error("no port or nonce");
            return;
        }
        const replyEndpoint = await DotNet.invokeMethodAsync("Control", "GetReplyEndpoint");
        const url = `http://localhost:${port}${replyEndpoint}?nonce=${nonce}&username=${username}&token=${encodeURIComponent(token)}`;
        const res = await fetch(url, { method: "POST" });
        if (res.ok) {
            document.getElementById("message").textContent = "Connected! You can close this tab.";
            sessionStorage.removeItem("port");
            sessionStorage.removeItem("nonce");
        } else {
            debugger;
            console.log(res);
            document.getElementById("error").textContent = "Game did not respond. Close this tab and try again.";
        }
    }
</script>
<div id="message">@Message</div>

<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            <span>Logged in as @(user.GetNameForDisplay())</span>
        </Authorized>
        <NotAuthorized>
            <button class="btn btn-twitch" @onclick="GoLogin">
                <TwitchIcon />
                <span>Log in</span>
            </button>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

<div id="error" style="color: red">@Error</div>

@code {
    private const string Reply = ConnectionConstants.GameReplyEndpoint;
    [JSInvokable]
    public static string GetReplyEndpoint() => Reply;

    private AuthenticationState? Auth { get; set; }
    private string Username => Auth?.User.Identity?.Name ?? "null";
    private string? Token { get; set; }

    private string? Message;
    private string? Error;

    private void GoLogin()
    {
        var loginUrl = "/Account/Login?ReturnUrl=" + nav.ToBaseRelativePath(nav.Uri);
        nav.NavigateTo(loginUrl);
    }

    protected override async Task OnInitializedAsync()
    {
        Auth = await authProvider.GetAuthenticationStateAsync();
        Token = await gameConn.RequestTokenAsync(Username);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await js.InvokeVoidAsync("connect");
            if (Auth?.User.Identity?.IsAuthenticated == true)
            {
                await js.InvokeVoidAsync("returnToGame", Username, Token);
            }
        }
    }
}
