<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ECCLibrary</name>
    </assembly>
    <members>
        <member name="T:ECCLibrary.CookedCreatureHandler">
            <summary>
            Manages the creation of cooked and cured creatures.
            </summary>
        </member>
        <member name="M:ECCLibrary.CookedCreatureHandler.RegisterEdibleVariant(Nautilus.Assets.PrefabInfo,UnityEngine.GameObject,ECCLibrary.Data.EdibleData,Nautilus.Crafting.RecipeData,System.String[],TechCategory,ECCLibrary.Data.VFXFabricatingData)">
            <summary>
            Advanced method to create a cooked/cured creature.
            </summary>
        </member>
        <member name="M:ECCLibrary.CookedCreatureHandler.RegisterAllCreatureFood(ECCLibrary.CreatureAsset,System.String,System.String,UnityEngine.Sprite,System.String,System.String,UnityEngine.Sprite,ECCLibrary.Data.EdibleData,ECCLibrary.Data.VFXFabricatingData)">
            <summary>
            The fastest way to create a cooked AND cured variant of the given creature. Automatically assigns the Analysis Tech so it is unlocked with the creature.
            </summary>
            <param name="creature">The original uncooked creature. MUST have been registered already.</param>
            <param name="cookedName">Name of the cooked fish item.</param>
            <param name="cookedDescription">Description of the cooked fish item.</param>
            <param name="cookedSprite">Icon of the cooked fish item.</param>
            <param name="curedName">Name of the cured fish item.</param>
            <param name="curedDescription">Description of the cured fish item.</param>
            <param name="curedSprite">Icon of the cured fish item.</param>
            <param name="cookedData">Food values of the cooked, which will automatically determine the cured values.</param>
            <param name="vfxFabricatingSettings">Fabricator settings. If not assigned, automatic values will be determined. Do NOT rely on those being perfect.</param>
        </member>
        <member name="T:ECCLibrary.CookedCreatureHandler.CookedAndCuredPrefabs">
            <summary>
            Holds both the cooked and cured version of the creature.
            </summary>
        </member>
        <member name="M:ECCLibrary.CookedCreatureHandler.CookedAndCuredPrefabs.#ctor(Nautilus.Assets.PrefabInfo,Nautilus.Assets.PrefabInfo)">
            <summary>
            Holds both the cooked and cured version of the creature.
            </summary>
        </member>
        <member name="M:ECCLibrary.CookedCreatureHandler.RegisterCookedFish(ECCLibrary.CreatureAsset,System.String,System.String,ECCLibrary.Data.EdibleData,ECCLibrary.Data.VFXFabricatingData)">
            <summary>
            Simple method to create a cooked variant of the given creature.
            </summary>
            <param name="creature">The original uncooked creature. MUST have been registered already.</param>
            <param name="name">Name of the cooked fish item.</param>
            <param name="description">Description of the cooked fish item.</param>
            <param name="cookedData">Food values.</param>
            <param name="vfxFabricatingSettings">Fabricator settings. If not assigned, automatic values will be determined. Do NOT rely on those being perfect.</param>
        </member>
        <member name="M:ECCLibrary.CookedCreatureHandler.RegisterCuredFish(ECCLibrary.CreatureAsset,System.String,System.String,System.Single,ECCLibrary.Data.VFXFabricatingData)">
            <summary>
            Simple method to create a cured variant of the given creature.
            </summary>
            <param name="creature">The original uncooked creature. MUST have been registered already.</param>
            <param name="name">Name of the cured fish item.</param>
            <param name="description">Description of the cured fish item.</param>
            <param name="foodValue">Food value of the food.</param>
            <param name="vfxFabricatingSettings">Fabricator settings. If not assigned, automatic values will be determined. Do NOT rely on those being perfect.</param>
        </member>
        <member name="T:ECCLibrary.CreatureAsset">
            <summary>
            Override this class to define a new creature. Call the <see cref="M:ECCLibrary.CreatureAsset.Register"/> method on an instance to add it to the game.
            </summary>
        </member>
        <member name="P:ECCLibrary.CreatureAsset.PrefabInfo">
            <summary>
            Information for registering the prefab.
            </summary>
        </member>
        <member name="P:ECCLibrary.CreatureAsset.CustomPrefab">
            <summary>
            A reference to the custom prefab instance.
            </summary>
        </member>
        <member name="M:ECCLibrary.CreatureAsset.#ctor(Nautilus.Assets.PrefabInfo)">
            <summary>
            Instantiates a Creature Asset with the given PrefabInfo. Call the Register method to add the creature to the game.
            </summary>
            <param name="prefabInfo">
            <para>Information required for spawning. Must be unique.</para>
            <para>An instance of this struct can be easily created by calling <see cref="M:Nautilus.Assets.PrefabInfo.WithTechType(System.String,System.String,System.String,System.String,System.Boolean,System.Reflection.Assembly)"/>.</para></param>
        </member>
        <member name="P:ECCLibrary.CreatureAsset.ClassID">
            <summary>
            The ClassID of this creature, sourced from the PrefabInfo property.
            </summary>
        </member>
        <member name="P:ECCLibrary.CreatureAsset.TechType">
            <summary>
            The TechType of this creature, sourced from the PrefabInfo property.
            </summary>
        </member>
        <member name="P:ECCLibrary.CreatureAsset.EntityInfo">
            <summary>
            The EntityInfo for this creature, only assigned <i>after</i> <see cref="M:ECCLibrary.CreatureAsset.Register"/> is called.
            </summary>
        </member>
        <member name="M:ECCLibrary.CreatureAsset.Register">
            <summary>
            Registers this creature into the game.
            </summary>
        </member>
        <member name="M:ECCLibrary.CreatureAsset.PostRegister">
            <summary>
            An empty method that can be overriden to insert code that runs directly after the prefab is registered (runs at patch time).
            </summary>
        </member>
        <member name="M:ECCLibrary.CreatureAsset.CreateTemplate">
            <summary>
            The majority of the data for each creature should be assigned through this call.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECCLibrary.CreatureAsset.ModifyPrefab(UnityEngine.GameObject,ECCLibrary.Data.CreatureComponents)">
            <summary>
            Changes to the prefab can be applied here.
            </summary>
            <param name="prefab"></param>
            <param name="components"></param>
            <returns></returns>
        </member>
        <member name="M:ECCLibrary.CreatureAsset.ApplyMaterials(UnityEngine.GameObject)">
            <summary>
            By default calls <see cref="M:Nautilus.Utility.MaterialUtils.ApplySNShaders(UnityEngine.GameObject,System.Single,System.Single,System.Single,Nautilus.Utility.MaterialModifiers.MaterialModifier[])"/> to convert the materials of the entire prefab. Can be overriden to have more control over the process.
            </summary>
            <param name="prefab"></param>
        </member>
        <member name="T:ECCLibrary.SealedCreatureAsset">
            <summary>
            An alternative to <see cref="T:ECCLibrary.CreatureAsset"/> that does not use inheritance. Supply a template and any needed prefab code.
            </summary>
        </member>
        <member name="P:ECCLibrary.SealedCreatureAsset.OnModifyPrefab">
            <summary>
            An optional call that allows for modification of the prefab after creation.
            </summary>
        </member>
        <member name="P:ECCLibrary.SealedCreatureAsset.OnApplyMaterials">
            <summary>
            An optional call that, if overriden, no longer applies the MarmosetUBER shader automatically and allows for full control of the materials. Called AFTER <paramref name="modifyPrefab"/>!
            </summary>
        </member>
        <member name="M:ECCLibrary.SealedCreatureAsset.#ctor(Nautilus.Assets.PrefabInfo,ECCLibrary.Data.CreatureTemplate,System.Func{UnityEngine.GameObject,ECCLibrary.Data.CreatureComponents,System.Collections.IEnumerator},System.Action{UnityEngine.GameObject})">
            <summary>
            Creates a basic Creature Asset that does not use inheritance. Supply a template and any needed prefab code. Call the Register method to add the creature to the game.
            </summary>
            <param name="prefabInfo">The unique PrefabInfo of this creature instance.</param>
            <param name="template">The template that contains all of the creature's data.</param>
            <param name="modifyPrefab">An optional call that allows for modification of the prefab after creation.</param>
            <param name="applyMaterials">An optional call that, if overriden, no longer applies the MarmosetUBER shader automatically and allows for full control of the materials. Called AFTER <paramref name="modifyPrefab"/>!</param>
        </member>
        <member name="M:ECCLibrary.SealedCreatureAsset.CreateTemplate">
            <summary>
            Handled by the class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECCLibrary.SealedCreatureAsset.ModifyPrefab(UnityEngine.GameObject,ECCLibrary.Data.CreatureComponents)">
            <summary>
            Handled by the class.
            </summary>
            <param name="prefab"></param>
            <param name="components"></param>
            <returns></returns>
        </member>
        <member name="M:ECCLibrary.SealedCreatureAsset.ApplyMaterials(UnityEngine.GameObject)">
            <summary>
            Handled by the class.
            </summary>
            <param name="prefab"></param>
        </member>
        <member name="T:ECCLibrary.Data.AttackCyclopsData">
            <summary>
            Contains data pertaining to creating the <see cref="T:AttackCyclops"/> CreatureAction.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AttackCyclopsData.evaluatePriority">
            <summary>
            The priority for this <see cref="T:CreatureAction"/>, expected to be in the range [0, 1].
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AttackCyclopsData.swimVelocity">
            <summary>
            Swim speed when swimming toward a Cyclops.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AttackCyclopsData.maxDistToLeash">
            <summary>
            If the Cyclops is this many meters or more away from the creature's spawn point (leash position), it will be ignored. Generally has a value of 100f or more.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AttackCyclopsData.aggressPerSecond">
            <summary>
            The amount of aggression gained per second while aware of a Cyclops. Note that this aggression is linked to '<see cref="F:AttackCyclops.aggressiveToNoise"/>', NOT '<see cref="F:Creature.Aggression"/>'.
            <br/>Generally 0.2f for smaller creatures and 0.4f for a leviathan.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AttackCyclopsData.attackPause">
            <summary>
            Minimum amount of time between each "attack". Generally 6 seconds for smaller creatures and 3 seconds for a leviathan.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AttackCyclopsData.aggressionFalloff">
            <summary>
            How fast the aggression to noise decreases. Typically 0.08f for smaller creatures and 0.01f for leviathans.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AttackCyclopsData.attackAggressionThreshold">
            <summary>
            Minimum aggression to attack. All vanilla creatures use a value of 0.75f.
            </summary>
        </member>
        <member name="M:ECCLibrary.Data.AttackCyclopsData.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="evaluatePriority">The priority for this <see cref="T:CreatureAction"/>, expected to be in the range [0, 1].</param>
            <param name="swimVelocity">Swim speed when swimming toward a Cyclops.</param>
            <param name="maxDistToLeash">If the Cyclops is this many meters or more away from the creature's spawn point (leash position), it will be ignored. Generally has a value of 100f or more.</param>
            <param name="aggressPerSecond">The amount of aggression gained per second while aware of a Cyclops. Note that this aggression is linked to '<see cref="F:AttackCyclops.aggressiveToNoise"/>', NOT '<see cref="F:Creature.Aggression"/>'.
            <br/>Generally 0.2f for smaller creatures and 0.4f for a leviathan.</param>
            <param name="attackPause">Minimum amount of time between each "attack". Generally 6 seconds for smaller creatures and 3 seconds for a leviathan.</param>
            <param name="aggressionFalloff">How fast the aggression to noise decreases. Typically 0.08f for smaller creatures and 0.01f for leviathans.</param>
            <param name="attackAggressionThreshold">Minimum aggression to attack. All vanilla creatures use a value of 0.75f.</param>
        </member>
        <member name="T:ECCLibrary.Data.AttackLastTargetData">
            <summary>
            Contains data pertaining to creating the <see cref="T:AttackLastTarget"/> CreatureAction.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AttackLastTargetData.evaluatePriority">
            <summary>
            The priority for this <see cref="T:CreatureAction"/>, expected to be in the range [0, 1].
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AttackLastTargetData.swimVelocity">
            <summary>
            How fast the creature swims while attacking.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AttackLastTargetData.aggressionThreshold">
            <summary>
            Minimum amount of aggression needed to start an attack, generally 0.5f - 0.75f.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AttackLastTargetData.maxAttackDuration">
            <summary>
            Maximum length of the attack. Generally ranges from 7 to 10 seconds.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AttackLastTargetData.pauseInterval">
            <summary>
            Minimum number of seconds between attacks. Generally ranges from 10 to 20 seconds.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AttackLastTargetData.minAttackDuration">
            <summary>
            Minimum length of the attack. Almost always 3 seconds.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AttackLastTargetData.rememberTargetTime">
            <summary>
            How long the <see cref="P:LastTarget.target"/> can be recognized for after it was last set. For most creatures, this is only 5 seconds. Does not influence how long the attack will be.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AttackLastTargetData.resetAggressionOnTime">
            <summary>
            Almost always true, meaning the creature is no longer aggressive after the time is up.
            </summary>
        </member>
        <member name="M:ECCLibrary.Data.AttackLastTargetData.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            
            </summary>
            <param name="evaluatePriority">The priority for this <see cref="T:CreatureAction"/>, expected to be in the range [0, 1]. Typically higher than object avoidance priorities!</param>
            <param name="swimVelocity">How fast the creature swims while attacking.</param>
            <param name="aggressionThreshold">Minimum amount of aggression needed to start an attack, generally 0.5f - 0.75f.</param>
            <param name="maxAttackDuration">Maximum length of the attack. Generally ranges from 7 to 10 seconds.</param>
            <param name="pauseInterval">Minimum number of seconds between attacks. Generally ranges from 10 to 20 seconds.</param>
            <param name="minAttackDuration">Minimum length of the attack. Almost always 3 seconds.</param>
            <param name="rememberTargetTime">How long the <see cref="P:LastTarget.target"/> can be recognized for after it was last set. For most creatures, this is only 5 seconds. Does not influence how long the attack will be.</param>
            <param name="resetAggressionOnTime">Almost always true, meaning the creature is no longer aggressive after the time is up.</param>
        </member>
        <member name="T:ECCLibrary.Data.AvoidObstaclesData">
            <summary>
            Contains data pertaining to creating the <see cref="T:AvoidObstacles"/> CreatureAction. This component is used by most creatures (everything besides leviathans) to avoid objects and/or terrain.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AvoidObstaclesData.evaluatePriority">
            <summary>
            The priority for this <see cref="T:CreatureAction"/>, expected to be in the range [0, 1].
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AvoidObstaclesData.avoidTerrainOnly">
            <summary>
            If true, the creature will only avoid terrain. Otherwise, all solid objects will be avoided. Typically true for larger creatures.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AvoidObstaclesData.swimVelocity">
            <summary>
            How fast this creature swims away from obstacles (m/s). Should generally match the swim speed.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AvoidObstaclesData.avoidanceDistance">
            <summary>
            How much empty space there must be in any direction around the creature for it to choose that path as "clear". Typically 5f for small fish, up to 10f for larger fish. Large enough values may disable this behaviour entirely.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AvoidObstaclesData.scanDistance">
            <summary>
            The action will only perform if there is an obstacle within this many meters in front of the creature (or around the creature if scanRadius > 0). Typically similar to the avoidance distance.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AvoidObstaclesData.avoidanceDuration">
            <summary>
            How long this creature will continue to swim away from the terrain. Almost always equal to 2f.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AvoidObstaclesData.scanInterval">
            <summary>
            How long between each "scan". Typically 1f but lower values may be needed for faster creatures.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AvoidObstaclesData.scanRadius">
            <summary>
            If equal to 0f (as done by most creatures), the creature will look for obstacles directly in front of it. Otherwise it will perform a SphereCast with this starting radius.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AvoidObstaclesData.avoidanceIterations">
            <summary>
            The maximum number of times a random direction is evaluated to check for a clear path. If all "clear checks" fail, the action will be canceled and the creature will ignore the obstacle. Almost always 10.
            </summary>
        </member>
        <member name="M:ECCLibrary.Data.AvoidObstaclesData.#ctor(System.Single,System.Single,System.Boolean,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Contains data pertaining to creating the <see cref="T:AvoidObstacles"/> CreatureAction. This component is used by most creatures (everything besides leviathans) to avoid objects and/or terrain.
            </summary>
            <param name="evaluatePriority">The priority for this <see cref="T:CreatureAction"/>, expected to be in the range [0, 1]. Typically lower than attack priorities!</param>
            <param name="avoidTerrainOnly">If true, the creature will only avoid terrain. Otherwise, all solid objects will be avoided. Typically true for larger creatures.</param>
            <param name="swimVelocity">How fast this creature swims away from obstacles (m/s). Should generally match the swim speed.</param>
            <param name="avoidanceDistance">How much empty space there must be in any direction around the creature for it to choose that path as "clear". Typically 5f for small fish, up to 10f for larger fish. Large enough values may disable this behaviour entirely.</param>
            <param name="scanDistance">The action will only perform if there is an obstacle within this many meters in front of the creature (or around the creature if scanRadius > 0). Typically similar to the avoidance distance.</param>
            <param name="avoidanceDuration">How long this creature will continue to swim away from the terrain. Almost always equal to 2f.</param>
            <param name="scanInterval">How long between each "scan". Typically 1f but lower values may be needed for faster creatures.</param>
            <param name="scanRadius">If equal to 0f (as done by most creatures), the creature will look for obstacles directly in front of it. Otherwise it will perform a SphereCast with this starting radius.</param>
            <param name="avoidanceIterations">The maximum number of times a random direction is evaluated to check for a clear path. If all "clear checks" fail, the action will be canceled and the creature will ignore the obstacle. Almost always 10.</param>
        </member>
        <member name="T:ECCLibrary.Data.AvoidTerrainData">
            <summary>
            Contains data pertaining to creating the <see cref="T:AvoidTerrain"/> CreatureAction. This is a more advanced and expensive collision avoidance system used by leviathans.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AvoidTerrainData.evaluatePriority">
            <summary>
            The priority for this <see cref="T:CreatureAction"/>, expected to be in the range [0, 1].
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AvoidTerrainData.swimVelocity">
            <summary>
            How fast this creature swims when intentionally avoiding terrain.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AvoidTerrainData.avoidanceDistance">
            <summary>
            How many meters long an "empty space" is required to be, in any given direction. Typically about 30 meters.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AvoidTerrainData.scanDistance">
            <summary>
            Similar to avoidanceDistance, defines how many meters long an "empty space" is required to be, in any given direction. Typically uses the same value as avoidanceDistance and is used for the cheaper "initial check" that determines whether or not the actual avoidance takes place.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AvoidTerrainData.avoidanceForward">
            <summary>
            Must be in the range [0, 1]. The higher this value, the more it tends to only focus on points in front of it. Generally 0.5f, but the Reaper Leviathan uses a value of 1f.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AvoidTerrainData.avoidanceIterations">
            <summary>
            The quality of object avoidance. Almost always seen as 10 (the default value).
            </summary>
        </member>
        <member name="M:ECCLibrary.Data.AvoidTerrainData.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Contains data pertaining to creating the <see cref="T:AvoidTerrain"/> CreatureAction. This is a more advanced and expensive collision avoidance system used by leviathans.
            </summary>
            <param name="evaluatePriority">The priority for this <see cref="T:CreatureAction"/>, expected to be in the range [0, 1].</param>
            <param name="swimVelocity">How fast this creature swims when intentionally avoiding terrain.</param>
            <param name="avoidanceDistance">How many meters long an "empty space" is required to be, in any given direction. Typically about 30 meters.</param>
            <param name="scanDistance">Similar to avoidanceDistance, defines how many meters long an "empty space" is required to be, in any given direction. Typically uses the same value as avoidanceDistance and is used for the cheaper "initial check" that determines whether or not the actual avoidance takes place.</param>
            <param name="avoidanceForward">Must be in the range [0, 1]. The higher this value, the more it tends to only focus on points in front of it. Generally 0.5f, but the Reaper Leviathan uses a value of 1f.</param>
            <param name="avoidanceIterations">The quality of object avoidance. Almost always seen as 10 (the default value).</param>
        </member>
        <member name="T:ECCLibrary.Data.FleeOnDamageData">
            <summary>
            Contains data pertaining to creating the <see cref="T:FleeOnDamage"/> CreatureAction.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.FleeOnDamageData.evaluatePriority">
            <summary>
            The priority for this <see cref="T:CreatureAction"/>, expected to be in the range [0, 1].
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.FleeOnDamageData.damageThreshold">
            <summary>
            How much damage must be taken before the creature will begin to flee.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.FleeOnDamageData.fleeDuration">
            <summary>
            How long the creature flees for.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.FleeOnDamageData.minFleeDistance">
            <summary>
            At least how far in meters the creature will flee when attacked.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.FleeOnDamageData.swimVelocity">
            <summary>
            How fast the creature will flee in m/s.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.FleeOnDamageData.swimInterval">
            <summary>
            How many seconds are between each "swim".
            </summary>
        </member>
        <member name="M:ECCLibrary.Data.FleeOnDamageData.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Contains data pertaining to creating the <see cref="T:FleeOnDamage"/> CreatureAction.
            </summary>
            <param name="evaluatePriority">The priority for this <see cref="T:CreatureAction"/>, expected to be in the range [0, 1].</param>
            <param name="damageThreshold">How much damage must be taken before the creature will begin to flee.</param>
            <param name="fleeDuration">How long the creature flees for.</param>
            <param name="minFleeDistance">At least how far in meters the creature will flee when attacked.</param>
            <param name="swimVelocity">How fast the creature will flee in m/s.</param>
            <param name="swimInterval">How many seconds are between each "swim".</param>
        </member>
        <member name="T:ECCLibrary.Data.FleeWhenScaredData">
            <summary>
            Contains data pertaining to creating the <see cref="T:FleeWhenScared"/> CreatureAction.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.FleeWhenScaredData.evaluatePriority">
            <summary>
            The priority for this <see cref="T:CreatureAction"/>, expected to be in the range [0, 1].
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.FleeWhenScaredData.swimVelocity">
            <summary>
            Default swim speed when swimming.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.FleeWhenScaredData.swimInterval">
            <summary>
            Interval between swimming.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.FleeWhenScaredData.avoidanceIterations">
            <summary>
            The quality of the terrain avoidance.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.FleeWhenScaredData.swimTiredness">
            <summary>
            How tired this creature gets while fleeing, each second.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.FleeWhenScaredData.tiredVelocity">
            <summary>
            The velocity when tired.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.FleeWhenScaredData.swimExhaustion">
            <summary>
            How exhausted the creature gets while fleeing, each second.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.FleeWhenScaredData.exhaustedVelocity">
            <summary>
            The velocity when exhausted (after fleeing too long).
            </summary>
        </member>
        <member name="M:ECCLibrary.Data.FleeWhenScaredData.#ctor(System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Contains data pertaining to creating the <see cref="T:FleeWhenScared"/> CreatureAction.
            </summary>
            <param name="evaluatePriority">The priority for this <see cref="T:CreatureAction"/>, expected to be in the range [0, 1].</param>
            <param name="swimVelocity">Default swim speed when swimming.</param>
            <param name="swimInterval">Interval between swimming.</param>
            <param name="avoidanceIterations">The quality of the terrain avoidance.</param>
            <param name="swimTiredness">How tired this creature gets while fleeing, each second.</param>
            <param name="tiredVelocity">The velocity when tired.</param>
            <param name="swimExhaustion">How exhausted the creature gets while fleeing, each second.</param>
            <param name="exhaustedVelocity">The velocity when exhausted (after fleeing too long).</param>
        </member>
        <member name="T:ECCLibrary.Data.StayAtLeashData">
            <summary>
            Contains data pertaining to creating the <see cref="T:StayAtLeashPosition"/> CreatureAction. This component keeps creatures from wandering too far.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.StayAtLeashData.evaluatePriority">
            <summary>
            The priority for this <see cref="T:CreatureAction"/>, expected to be in the range [0, 1].
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.StayAtLeashData.leashDistance">
            <summary>
            How far the creature has to be from its spawn point to begin swimming back to it. For small and medium creatures usually has a value of 15-30 meters. Typically very high (upwards of 150m) for leviathans.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.StayAtLeashData.swimVelocity">
            <summary>
            How fast the creature swims back to its spawn point. Generally matches SwimRandom swim velocity, more or less.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.StayAtLeashData.swimInterval">
            <summary>
            The minimum amount of time between each "swim". Vanilla creatures always use a value of 1 second (there is very little reason to change this).
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.StayAtLeashData.minSwimDuration">
            <summary>
            How long the creature will continue to swim back to its spawn point during each "swim" (unless overriden by another action). Generally 3 seconds but sometimes (rarely) higher.
            </summary>
        </member>
        <member name="M:ECCLibrary.Data.StayAtLeashData.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Contains data pertaining to creating the <see cref="T:StayAtLeashPosition"/> CreatureAction.
            </summary>
            <param name="evaluatePriority">The priority for this <see cref="T:CreatureAction"/>, expected to be in the range [0, 1].</param>
            <param name="leashDistance">How far the creature has to be from its spawn point to begin swimming back to it. For small and medium creatures usually has a value of 15-30 meters. Typically very high (upwards of 150m) for leviathans.</param>
            <param name="swimVelocity">How fast the creature swims back to its spawn point. Generally matches SwimRandom swim velocity, more or less.</param>
            <param name="swimInterval">The minimum amount of time between each "swim". Vanilla creatures always use a value of 1 second (there is very little reason to change this).</param>
            <param name="minSwimDuration">How long the creature will continue to swim back to its spawn point during each "swim" (unless overriden by another action). Generally 3 seconds but sometimes (rarely) higher.</param>
        </member>
        <member name="T:ECCLibrary.Data.SwimInSchoolData">
            <summary>
            <para>Contains data pertaining to adding the <see cref="T:SwimInSchool"/> CreatureAction.</para>
            <para>Each schooling creature chooses a single "leader" larger than itself (and of the same TechType) to follow. Therefore, the <see cref="P:ECCLibrary.Data.CreatureTemplate.SizeDistribution"/> property should be defined for this action to function properly.</para>
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.SwimInSchoolData.evaluatePriority">
            <summary>
            The priority for this <see cref="T:CreatureAction"/>, expected to be in the range [0, 1].
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.SwimInSchoolData.swimVelocity">
            <summary>
            Swim speed for this action (m/s). Should match speed defined in the <see cref="T:ECCLibrary.Data.SwimRandomData"/>. Typically 2-3 m/s for small fish, 4-8 m/s for medium fish and sharks, and 15-20 m/s for aggressive leviathans.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.SwimInSchoolData.schoolSize">
            <summary>
            Maximum distance this fish will swim away from its "leader". Default value is 2 meters.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.SwimInSchoolData.swimInterval">
            <summary>
            Number of seconds between each time the creature repositions itself. Default value is 1 second.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.SwimInSchoolData.breakDistance">
            <summary>
            If the creature leaves this radius (in meters) of its leader, it will stop following. Default value is 20 meters.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.SwimInSchoolData.percentFindLeaderRespond">
            <summary>
            <para>Value with expected range of [0.0, 1.0]. Default value is 0.5f.</para>
            <para>Every 2 seconds, a schooling creature checks if it should begin schooling. This value determines the chance of forming a school. A value of 0f means it will never school, while 1f means it always will attempt.</para>
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.SwimInSchoolData.chanceLoseLeader">
            <summary>
            <para>Value with expected range of [0.0, 1.0]. Default value is 0.1f.</para>
            <para>Every 2 seconds, a schooling creature checks if it should stop schooling. This value determines the chance of breaking off. A value of 0f means it will never break off, while 1f disables the behaviour.</para>
            </summary>
        </member>
        <member name="M:ECCLibrary.Data.SwimInSchoolData.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            <para>Contains data pertaining to adding the <see cref="T:SwimInSchool"/> CreatureAction.</para>
            <para>Each schooling creature chooses a single "leader" larger than itself (and of the same TechType) to follow. Therefore, the <see cref="P:ECCLibrary.Data.CreatureTemplate.SizeDistribution"/> property should be defined for this action to function properly.</para>
            </summary>
            <param name="evaluatePriority">The priority for this <see cref="T:CreatureAction"/>, expected to be in the range [0, 1].</param>
            <param name="swimVelocity">Swim speed for this action (m/s). Should match speed defined in the <see cref="T:ECCLibrary.Data.SwimRandomData"/>. Typically 2-3 m/s for small fish, 4-8 m/s for medium fish and sharks, and 15-20 m/s for aggressive leviathans.</param>
            <param name="schoolSize">Maximum distance this fish will swim away from its "leader". Default value is 2 meters.</param>
            <param name="swimInterval">Number of seconds between each time the creature repositions itself. Default value is 1 second.</param>
            <param name="breakDistance">If the creature leaves this radius (in meters) of its leader, it will stop following. Default value is 20 meters.</param>
            <param name="percentFindLeaderRespond">
            <para>Value with expected range of [0.0, 1.0]. Default value is 0.5f.</para>
            <para>Every 2 seconds, a schooling creature checks if it should begin schooling. This value determines the chance of forming a school. A value of 0f means it will never school, while 1f means it always will attempt.</para>
            </param>
            <param name="chanceLoseLeader">
            /// <para>Value with expected range of [0.0, 1.0]. Default value is 0.1f.</para>
            <para>Every 2 seconds, a schooling creature checks if it should stop schooling. This value determines the chance of breaking off. A value of 0f means it will never break off, while 1f disables the behaviour.</para>
            </param>
        </member>
        <member name="T:ECCLibrary.Data.SwimRandomData">
            <summary>
            Contains data pertaining to creating the <see cref="T:SwimRandom"/> CreatureAction.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.SwimRandomData.evaluatePriority">
            <summary>
            The priority for this <see cref="T:CreatureAction"/>, expected to be in the range [0, 1].
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.SwimRandomData.swimRadius">
            <summary>
            The distance this creature can wander in any direction every time the action is played. X and Z values should always be identical and are usually 10 - 30 meters. Typically the vertical (Y) range is only 20% - 25% of the horizontal range.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.SwimRandomData.swimVelocity">
            <summary>
            Swim speed for this action (m/s). Typically 2-3 m/s for small fish, 4-8 m/s for medium fish and sharks, and 15-20 m/s for aggressive leviathans.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.SwimRandomData.swimInterval">
            <summary>
            The time in seconds between each change in direction. Typically 5 seconds, but more sporadic creatures may have values as low as 2 seconds.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.SwimRandomData.onSphere">
            <summary>
            In the vanilla game this value is typically set to 'true' for leviathans. If enabled, the creature will always swim towards a point at the maximum distance allowed by <see cref="F:ECCLibrary.Data.SwimRandomData.swimRadius"/>. Otherwise, the distance will be random.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.SwimRandomData.swimForward">
            <summary>
            The higher this value, the more this creature tends to continue swimming in the same direction. Default value is 0.5f. Typically higher (1.0f-1.2f) for larger creatures.
            </summary>
        </member>
        <member name="M:ECCLibrary.Data.SwimRandomData.#ctor(System.Single,System.Single,UnityEngine.Vector3,System.Single,System.Single,System.Boolean)">
            <summary>
            Contains data pertaining to creating the <see cref="T:SwimRandom"/> CreatureAction.
            </summary>
            <param name="evaluatePriority">The priority for this <see cref="T:CreatureAction"/>, expected to be in the range [0, 1].</param>
            <param name="swimRadius">The distance this creature can wander in any direction every time the action is played. X and Z values should always be identical and are usually 10 - 30 meters. Typically the vertical (Y) range is only 20% - 25% of the horizontal range.</param>
            <param name="swimVelocity">Swim speed for this action (m/s). Typically 2-3 m/s for small fish, 4-8 m/s for medium fish and sharks, and 15-20 m/s for aggressive leviathans.</param>
            <param name="swimInterval">The time in seconds between each change in direction. Typically 5 seconds, but more sporadic creatures may have values as low as 2 seconds.</param>
            <param name="onSphere">In the vanilla game this value is typically set to 'true' for leviathans. If enabled, the creature will always swim towards a point at the maximum distance allowed by <see cref="F:ECCLibrary.Data.SwimRandomData.swimRadius"/>. Otherwise, the distance will be random.</param>
            <param name="swimForward">The higher this value, the more this creature tends to continue swimming in the same direction. Default value is 0.5f. Typically higher (1.0f-1.2f) for larger creatures.</param>
        </member>
        <member name="T:ECCLibrary.Data.CreatureComponents">
            <summary>
            Stores references to the basic components of a creature. Each field should not be expected to be assigned.
            </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureComponents.PrefabIdentifier">
            <summary> </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureComponents.TechTag">
            <summary> </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureComponents.LargeWorldEntity">
            <summary> </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureComponents.EntityTag">
            <summary> </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureComponents.SkyApplier">
            <summary> </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureComponents.Animator">
            <summary> </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureComponents.EcoTarget">
            <summary> </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureComponents.Eatable">
            <summary> </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureComponents.VfxSurface">
            <summary> </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureComponents.BehaviourLOD">
            <summary> </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureComponents.Rigidbody">
            <summary> </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureComponents.WorldForces">
            <summary> </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureComponents.Creature">
            <summary> </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureComponents.LiveMixin">
            <summary> </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureComponents.AttackLastTarget">
            <summary> </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureComponents.AttackCyclops">
            <summary> </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureComponents.LastTarget">
            <summary> </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureComponents.SwimBehaviour">
            <summary> </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureComponents.Locomotion">
            <summary> </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureComponents.SplineFollowing">
            <summary> </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureComponents.SwimRandom">
            <summary> </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureComponents.InfectedMixin">
            <summary> </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureComponents.Pickupable">
            <summary> </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureComponents.AnimateByVelocity">
            <summary> </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureComponents.CreatureDeath">
            <summary> </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureComponents.CreatureFlinch">
            <summary> </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureComponents.DeadAnimationOnEnable">
            <summary> </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureComponents.CreatureFear">
            <summary> </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureComponents.FleeWhenScared">
            <summary> </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureComponents.FleeOnDamage">
            <summary> </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureComponents.Scareable">
            <summary> </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureComponents.SoundOnDamage">
            <summary> </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureComponents.StayAtLeashPosition">
            <summary> </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureComponents.AggressiveToPilotingVehicle">
            <summary> </summary>
        </member>
        <member name="T:ECCLibrary.Data.AnimateByVelocityData">
            <summary>
            Contains data pertaining to the <see cref="T:AnimateByVelocity"/> component. This component sets animation parameters based on the creature's direction &#38; velocity.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AnimateByVelocityData.animationMoveMaxSpeed">
            <summary>
            At this speed, the Animator's "speed" parameter will be at its maximum of 1f. This should roughly match the creature's maximum velocity.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AnimateByVelocityData.animationMaxPitch">
            <summary>
            Pitch can be described by looking up and down. The parameter for pitch 'pitch' and is always on a scale from -1 to 1. When the creature has rotated by a pitch of <see cref="F:ECCLibrary.Data.AnimateByVelocityData.animationMaxPitch"/> in one way, it will equal 1. If it rotated the opposite direction the same amount, it would equal -1.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AnimateByVelocityData.animationMaxTilt">
            <summary>
            In this case, tilt is rotating left and right. This parameter has the same rules, basically, as <see cref="F:ECCLibrary.Data.AnimateByVelocityData.animationMaxPitch"/>.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AnimateByVelocityData.useStrafeAnimation">
            <summary>
            Strafe animation consists of Up, Down, Left, Right, Forward, and Backwards animations, always relative to the creature's current rotation. The parameters used by this are 'speed_x'. 'speed_y', and 'speed_z', on a scale from -1 to 1. False by default.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AnimateByVelocityData.dampTime">
            <summary>
            A longer damp time means it takes longer for these strafe, pitch, and tilt animations to take effect, but a more smooth transition.
            </summary>
        </member>
        <member name="M:ECCLibrary.Data.AnimateByVelocityData.#ctor(System.Single,System.Single,System.Single,System.Boolean,System.Single)">
            <summary>
            Contains data pertaining to the <see cref="T:AnimateByVelocity"/> component. This component sets animation parameters based on the creature's direction &#38; velocity.
            </summary>
            <param name="animationMoveMaxSpeed">At this speed, the Animator's "speed" parameter will be at its maximum of 1f. This should roughly match the creature's maximum velocity.</param>
            <param name="animationMaxPitch">Pitch can be described by looking up and down. The parameter for pitch 'pitch' and is always on a scale from -1 to 1. When the creature has rotated by a pitch of <see cref="F:ECCLibrary.Data.AnimateByVelocityData.animationMaxPitch"/> in one way, it will equal 1. If it rotated the opposite direction the same amount, it would equal -1.</param>
            <param name="animationMaxTilt">In this case, tilt is rotating left and right. This parameter has the same rules, basically, as <see cref="F:ECCLibrary.Data.AnimateByVelocityData.animationMaxPitch"/>.</param>
            <param name="useStrafeAnimation">Strafe animation consists of Up, Down, Left, Right, Forward, and Backwards animations, always relative to the creature's current rotation. The parameters used by this are 'speed_x'. 'speed_y', and 'speed_z', on a scale from -1 to 1. False by default.</param>
            <param name="dampTime">A longer damp time means it takes longer for these strafe, pitch, and tilt animations to take effect, but a more smooth transition.</param>
        </member>
        <member name="T:ECCLibrary.Data.BehaviourLODData">
            <summary>
            Contains data pertaining to certain creature functions becoming more optimized (lower quality) at a distance. Default values are (10, 50, 500).
            </summary>
        </member>
        <member name="P:ECCLibrary.Data.BehaviourLODData.VeryClose">
            <summary>
            Beyond this distance some animations may be removed.
            </summary>
        </member>
        <member name="P:ECCLibrary.Data.BehaviourLODData.Close">
            <summary>
            Beyond this distance some functionalities may be less precise.
            </summary>
        </member>
        <member name="P:ECCLibrary.Data.BehaviourLODData.Far">
            <summary>
            Beyond this distance trail animations will no longer exist.
            </summary>
        </member>
        <member name="M:ECCLibrary.Data.BehaviourLODData.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Contains data pertaining to certain creature functions becoming more optimized (lower quality) at a distance.
            </summary>
            <param name="veryClose">Beyond this distance some animations may be removed. 10f by default.</param>
            <param name="close">Beyond this distance some functionalities may be less precise, and any TrailManagers that have <see cref="F:TrailManager.allowDisableOnScreen"/> enabled (on by default) will stop functioning. 50f by default.</param>
            <param name="far">Beyond this distance all TrailManagers will cease to function. 500f by default.</param>
        </member>
        <member name="T:ECCLibrary.Data.CreatureTraitsData">
            <summary>
            Contains basic data pertaining to the <see cref="T:CreatureTrait"/>s of a creature.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.CreatureTraitsData.HungerIncreaseRate">
            <summary>
            The rate at which the creature gets hungrier. Predators often require higher levels of hunger to attack.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.CreatureTraitsData.AggressionDecreaseRate">
            <summary>
            The rate at which this creature becomes passive while actively hunting.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.CreatureTraitsData.ScaredDecreaseRate">
            <summary>
            The rate at which this creature becomes less scared. Used in very specific circumstances, most notably when taking damage.
            </summary>
        </member>
        <member name="M:ECCLibrary.Data.CreatureTraitsData.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Contains basic data pertaining to the <see cref="T:CreatureTrait"/>s of a creature.
            </summary>
            <param name="hungerIncreaseRate">The rate at which the creature gets hungrier. Predators often require higher levels of hunger to attack.</param>
            <param name="aggressionDecreaseRate">The rate at which this creature becomes passive while actively hunting.</param>
            <param name="scaredDecreaseRate">The rate at which this creature becomes less scared. Used in very specific circumstances, most notably when taking damage.</param>
        </member>
        <member name="T:ECCLibrary.Data.LocomotionData">
            <summary>
            Contains data pertaining to creating the <see cref="T:Locomotion"/> component.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.LocomotionData.maxAcceleration">
            <summary>
            How fast this creature accelerates while swimming in m/s/s. A value of 10f is used for most creatures, but 12f is used for the Reaper Leviathan &#38; Sea Dragon.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.LocomotionData.forwardRotationSpeed">
            <summary>
            Rotation speed when turning left/right. Generally has a value of 0.6f. Sometimes (but not always) has smaller values with larger creatures.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.LocomotionData.upRotationSpeed">
            <summary>
            Rotation speed when turning up/down. Generally has a value of 3f, with few exceptions.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.LocomotionData.driftFactor">
            <summary>
            How much this creature tends to "drift", in the range [0f, 1.0f]. Most common value is 0.5f. Generally values (0.3f~) are used for smaller creatures and varies for leviathans.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.LocomotionData.freezeHorizontalRotation">
            <summary>
            If true, this creature will not be able to look upwards/downwards (rotation about X axis will always be 0).
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.LocomotionData.canMoveAboveWater">
            <summary>
            If enabled, the creature can move (swim and/or walk) above water.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.LocomotionData.canWalkOnSurface">
            <summary>
            Typically enabled for most land creatures.
            </summary>
        </member>
        <member name="M:ECCLibrary.Data.LocomotionData.#ctor(System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Contains data pertaining to creating the <see cref="T:Locomotion"/> component.
            </summary>
            <param name="maxAcceleration">How fast this creature accelerates while swimming in m/s/s. A value of 10f is used for most creatures, but 12f is used for the Reaper Leviathan &#38; Sea Dragon.</param>
            <param name="forwardRotationSpeed">Rotation speed when turning left/right. Generally has a value of 0.6f. Sometimes (but not always) has smaller values with larger creatures.</param>
            <param name="upRotationSpeed">Rotation speed when turning up/down. Generally has a value of 3f, with few exceptions.</param>
            <param name="driftFactor">How much this creature tends to "drift", in the range [0f, 1.0f]. Most common value is 0.5f. Generally lower values (0.3f~) are used for smaller creatures and varies for leviathans</param>
            <param name="freezeHorizontalRotation">If true, this creature will not be able to look upwards/downwards (rotation about X axis will always be 0).</param>
            <param name="canMoveAboveWater">If enabled, the creature can move (swim and/or walk) above water.</param>
            <param name="canWalkOnSurface">Typically enabled for most land creatures.</param>
        </member>
        <member name="T:ECCLibrary.Data.RespawnData">
            <summary>
            Contains data pertaining to the <see cref="T:CreatureDeath"/> component.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.RespawnData.respawn">
            <summary>
            Whether the creature respawns or not.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.RespawnData.respawnOnlyIfKilledByCreature">
            <summary>
            If the creature can respawn at all, then this stops it from respawning when killed by the player. Should be FALSE for prey, and TRUE for predators!
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.RespawnData.respawnInterval">
            <summary>
            How long it takes for this creature to respawn.
            </summary>
        </member>
        <member name="M:ECCLibrary.Data.RespawnData.#ctor(System.Boolean,System.Boolean,System.Single)">
            <summary>
            Contains data pertaining to the <see cref="T:CreatureDeath"/> component.
            </summary>
            <param name="respawn">Whether the creature respawns or not.</param>
            <param name="respawnOnlyIfKilledByCreature">If the creature can respawn at all, then this stops it from respawning when killed by the player. Should be FALSE for prey, and TRUE for predators!</param>
            <param name="respawnInterval">How long it takes for this creature to respawn.</param>
        </member>
        <member name="T:ECCLibrary.Data.SwimBehaviourData">
            <summary>
            Contains data pertaining to creating the <see cref="T:SwimBehaviour"/> component.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.SwimBehaviourData.turnSpeed">
            <summary>
            A less useful "turn speed" property, which vaguely determines the speed at which a creature can turn fully around. If in doubt, leave at its default of value of 1f.
            </summary>
        </member>
        <member name="M:ECCLibrary.Data.SwimBehaviourData.#ctor(System.Single)">
            <summary>
            Contains data pertaining to creating the <see cref="T:SwimBehaviour"/> component.
            </summary>
            <param name="turnSpeed">A less useful "turn speed" property, which vaguely determines the speed at which a creature can turn fully around. If in doubt, leave at its default of value of 1f.</param>
        </member>
        <member name="T:ECCLibrary.Data.CreatureTemplate">
            <summary>
            Contains all of the data related to registering a creature into the game.
            </summary>
        </member>
        <member name="M:ECCLibrary.Data.CreatureTemplate.#ctor(UnityEngine.GameObject,BehaviourType,EcoTargetType,System.Single)">
            <summary>
            Contains all of the data related to registering a creature into the game.
            </summary>
            <param name="model">The model that is cloned to create the creature GameObject.</param>
            <param name="behaviourType">Goes hand in hand with the EcoTargetType. Please note the Player is a SHARK! Determines very few creature behaviours/interactions.</param>
            <param name="ecoTargetType">Goes hand in hand with the BehaviourType. Determines many interactions with creatures, specifically how this creature is "located" or "targeted" by other creatures</param>
            <param name="maxHealth">Maximum health of this creature.</param>
        </member>
        <member name="P:ECCLibrary.Data.CreatureTemplate.Model">
            <summary>
            The model that is cloned to create the creature GameObject.
            </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureTemplate.PhysicMaterial">
            <summary>
            Physic material used for all colliders. If unassigned, will default to <see cref="P:ECCLibrary.ECCUtility.FrictionlessPhysicMaterial"/>.
            </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureTemplate.LocomotionData">
            <summary>
            Contains data pertaining to creating the <see cref="T:Locomotion"/> component.
            </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureTemplate.SwimBehaviourData">
            <summary>
            Contains data pertaining to creating the <see cref="T:SwimBehaviour"/> component.
            </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureTemplate.AnimateByVelocityData">
            <summary>
            Contains data pertaining to the <see cref="T:AnimateByVelocity"/> component. This component sets animation parameters based on the creature's direction &#38; velocity.
            <br/> Means the 'speed' parameter can be used in the creature's Animator.
            <br/> NOT assigned by default!
            </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureTemplate.SwimRandomData">
            <summary>
            Contains data pertaining to the <see cref="T:SwimRandom"/> action. Assigned a generic value by default, but can be changed or set to null.
            </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureTemplate.StayAtLeashData">
            <summary>
            Contains data pertaining to the <see cref="T:StayAtLeashPosition"/> action. This component keeps creatures from wandering too far. Not assigned by default.
            </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureTemplate.FleeWhenScaredData">
            <summary>
            Contains data pertaining to the <see cref="T:FleeWhenScared"/> action. Not assigned by default.
            </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureTemplate.FleeOnDamageData">
            <summary>
            Contains data pertaining to the <see cref="T:FleeOnDamage"/> action. Assigned by default with default values and a priority of 0.8f.
            </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureTemplate.ScareableData">
            <summary>
            Contains data pertaining to the <see cref="T:Scareable"/> component. This component is what enables small fish to swim away from the player and potential predators. Not assigned by default.
            </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureTemplate.PickupableFishData">
            <summary>
            Contains data pertaining to picking up and/or holding fish in your hands. Not assigned by default.
            </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureTemplate.AvoidObstaclesData">
            <summary>
            Contains data pertaining to creating the <see cref="T:AvoidObstacles"/> CreatureAction. This component is used by most creatures (everything besides leviathans) to avoid objects and/or terrain. Not assigned by default.
            </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureTemplate.AvoidTerrainData">
            <summary>
            Contains data pertaining to creating the <see cref="T:AvoidTerrain"/> CreatureAction. This is a more advanced and expensive collision avoidance system used by leviathans.
            </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureTemplate.RespawnData">
            <summary>
            Contains data pertaining to the <see cref="T:CreatureDeath"/> component. Assigned by default to enable respawning. MUST be assigned!
            </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureTemplate.AggressiveToPilotingVehicleData">
            <summary>
            Contains data pertaining to the <see cref="T:AggressiveToPilotingVehicle"/> component, which encourages creatures to target any small vehicle that the player may be piloting
            (this includes ANY vehicle that inherits from the <see cref="T:Vehicle"/> component i.e. the Seamoth or Prawn Suit). Not many creatures use this component, but ones that do
            will be VERY aggressive (Boneshark levels of aggression!).
            </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureTemplate.CreatureComponentType">
            <summary>
            The Type of the main component that must inherit from <see cref="T:Creature"/>.
            </summary>
        </member>
        <member name="M:ECCLibrary.Data.CreatureTemplate.SetCreatureComponentType``1">
            <summary>
            Sets the Type of the main component. Must inherit from <see cref="T:Creature"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:ECCLibrary.Data.CreatureTemplate.AggressiveWhenSeeTargetList">
            <summary>
            A list of all data pertaining to the <see cref="T:AggressiveWhenSeeTarget"/> component, which enables the creature to become aggressive towards specific fauna/the player.
            </summary>
        </member>
        <member name="M:ECCLibrary.Data.CreatureTemplate.AddAggressiveWhenSeeTargetData(ECCLibrary.Data.AggressiveWhenSeeTargetData)">
            <summary>
            Adds a single type of aggression to this creature. This method can be called MULTIPLE TIMES to add multiple types of aggression! Not functional without the <see cref="T:AttackLastTarget"/> component.
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:ECCLibrary.Data.CreatureTemplate.AttackLastTargetData">
            <summary>
            Contains data pertaining to creating the <see cref="T:AttackLastTarget"/> CreatureAction. Not assigned by default.
            </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureTemplate.AttackCyclopsData">
            <summary>
            Contains data pertaining to creating the <see cref="T:AttackCyclops"/> CreatureAction. Not assigned by default.
            </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureTemplate.SwimInSchoolData">
            <summary>
            <para>Contains data pertaining to adding the <see cref="T:SwimInSchool"/> CreatureAction.</para>
            <para>Each schooling creature chooses a single "leader" larger than itself (and of the same TechType) to follow. Therefore, the <see cref="P:ECCLibrary.Data.CreatureTemplate.SizeDistribution"/> property should be defined for this action to function properly.</para>
            <para>Not assigned by default.</para>
            </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureTemplate.Mass">
            <summary>
            Mass in kg. Ranges from about 1.8f to 4050f. Default is 15kg.
            </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureTemplate.BehaviourLODData">
            <summary>
            Determines the distance for which certain calculations (such as Trail Managers) perform (or don't). It is recommended to increase these values for large creatures.
            </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureTemplate.EyeFOV">
            <summary>
            The FOV is used for detecting things such as prey. SHOULD BE NEGATIVE! This value has an expected range of [-1, 0]. Is 0f by default. A value of -1 means a given object is ALWAYS in view.
            </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureTemplate.AcidImmune">
            <summary>
            Whether the creature is immune to brine or not. False by default. Typically useful for Lost River creatures.
            </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureTemplate.BioReactorCharge">
            <summary>
            Total power output of this creature. All ECC creatures can be put in the bioreactor as long as this value is greater than 0. Default value is 200.
            </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureTemplate.SurfaceType">
            <summary>
            The Surface Type applied to the main collider. Default is <see cref="F:VFXSurfaceTypes.organic"/>.
            </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureTemplate.TraitsData">
            <summary>
            Settings that determine basic attributes of the creature.
            </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureTemplate.EdibleData">
            <summary>
            Contains data pertaining to the <see cref="T:Eatable"/> [sic] component. Not assigned by default.
            </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureTemplate.CanBeInfected">
            <summary>
            Whether this creature can randomly spawn with Kharaa symptoms. True by default.
            </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureTemplate.ScannerRoomScannable">
            <summary>
            If set to true, the Scanner Room can scan for this creature. False by default.
            </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureTemplate.SizeDistribution">
            <summary>
            Possible sizes for this creature. Randomly picks a value in the range of 0 to 1. This value can not go above 1. Flat curve at 1 by default.
            </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureTemplate.CellLevel">
            <summary>
            Roughly determines how far this creature can be loaded in.
            </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureTemplate.BehaviourType">
            <summary>
            Goes hand in hand with the EcoTargetType. Please note the Player is a SHARK! Determines very few creature behaviours/interactions.
            </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureTemplate.EcoTargetType">
            <summary>
            Goes hand in hand with the BehaviourType. Determines many interactions with creatures, specifically how this creature is "located" or "targeted" by other creatures.
            </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureTemplate.LiveMixinData">
            <summary>
            Controls health and damage-taking aspects of this creature.
            </summary>
        </member>
        <member name="P:ECCLibrary.Data.CreatureTemplate.WaterParkCreatureData">
            <summary>
            Settings for growth in Alien Containment. Not assigned by default.
            </summary>
        </member>
        <member name="M:ECCLibrary.Data.CreatureTemplate.SetWaterParkCreatureData(ECCLibrary.Data.WaterParkCreatureDataStruct)">
            <summary>
            Properly assigns values to the <see cref="P:ECCLibrary.Data.CreatureTemplate.WaterParkCreatureData"/> property, and creates a new instance of the ScriptableObject if null.
            </summary>
            <param name="dataStruct"></param>
        </member>
        <member name="P:ECCLibrary.Data.CreatureTemplate.ItemSoundsType">
            <summary>
            Pickup sounds of the item.
            </summary>
        </member>
        <member name="T:ECCLibrary.Data.CustomGameObjectReference">
            <summary>
            Alternative to <see cref="T:UnityEngine.AddressableAssets.AssetReferenceGameObject"/> that is always marked as valid for custom prefabs.
            </summary>
        </member>
        <member name="M:ECCLibrary.Data.CustomGameObjectReference.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:UnityEngine.AddressableAssets.AssetReferenceGameObject"/>, but for a vanilla or custom prefab.
            </summary>
            <param name="guid">Can be an addressable key or ClassID.</param>
        </member>
        <member name="M:ECCLibrary.Data.CustomGameObjectReference.RuntimeKeyIsValid">
            <returns>True, as long as the RuntimeKey exists.</returns>
        </member>
        <member name="T:ECCLibrary.Data.ItemSoundsType">
            <summary>
            Enum with values that correspond to item pickup sounds.
            </summary>
        </member>
        <member name="T:ECCLibrary.Data.AggressiveToPilotingVehicleData">
            <summary>
            Contains data pertaining to the <see cref="T:AggressiveToPilotingVehicle"/> component, which encourages creatures to target any small vehicle that the player may be piloting
            (this includes ANY vehicle that inherits from the <see cref="T:Vehicle"/> component i.e. the Seamoth or Prawn Suit). Not many creatures use this component, but ones that do
            will be VERY aggressive (Boneshark levels of aggression!).
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AggressiveToPilotingVehicleData.range">
            <summary>
            The maximum range in meters from which the vehicle is noticed and targeted. Any piloted vehicle in this range WILL be targeted.
            Values around 40m are typical, but anything is valid.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AggressiveToPilotingVehicleData.aggressionPerSecond">
            <summary>
            The aggression that is added to this creature every second that the vehicle is in range. Default value is 0.5, which is quite high.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AggressiveToPilotingVehicleData.updateAggressionInterval">
            <summary>
            The amount of time between each distance check in seconds. This value is typically one second and there is VERY little reason to change this.
            </summary>
        </member>
        <member name="M:ECCLibrary.Data.AggressiveToPilotingVehicleData.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Contains data pertaining to the <see cref="T:AggressiveToPilotingVehicle"/> component, which encourages creatures to target any small vehicle that the player may be piloting
            (this includes ANY vehicle that inherits from the <see cref="T:Vehicle"/> component i.e. the Seamoth or Prawn Suit). Not many creatures use this component, but ones that do
            will be VERY aggressive (Boneshark levels of aggression!).
            </summary>
            <param name="range">The maximum range in meters from which the vehicle is noticed and targeted. Any piloted vehicle in this range WILL be targeted.
            Values around 40m are typical, but anything is valid.</param>
            <param name="aggressionPerSecond">The aggression that is added to this creature every second that the vehicle is in range. Default value is 0.5, which is quite high.</param>
            <param name="updateAggressionInterval">The amount of time between each distance check in seconds. This value is typically one second and there is VERY little reason to change this.</param>
        </member>
        <member name="T:ECCLibrary.Data.AggressiveWhenSeeTargetData">
            <summary>
            Contains data pertaining to the <see cref="T:AggressiveWhenSeeTarget"/> component, which enables the creature to become aggressive towards specific fauna/the player.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AggressiveWhenSeeTargetData.targetType">
            <summary>
            The targeted EcoTargetType of this specific component. Every creature can have multiple <see cref="T:AggressiveWhenSeeTarget"/> components. Remember, the Player is <see cref="F:EcoTargetType.Shark"/>!
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AggressiveWhenSeeTargetData.aggressionPerSecond">
            <summary>
            The amount of the aggression trait added each second while targeting a creature. Generally 1f-2f.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AggressiveWhenSeeTargetData.maxRangeScalar">
            <summary>
            Creatures beyond this distance from the creature will not be targeted. Ranges from 15f for smaller predators to 150f for the Ghost Leviathan, however larger values are allowed.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AggressiveWhenSeeTargetData.maxSearchRings">
            <summary>
            An arbitrary distance scale that influences how far creatures can be targeted from. Typically 1, but should be larger (3+) if the maxRangeScalar is higher.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AggressiveWhenSeeTargetData.ignoreSameKind">
            <summary>
            If false, this creature will attack other creatures with the same TechType.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AggressiveWhenSeeTargetData.targetShouldBeInfected">
            <summary>
            Only applicable for creatures similar to the Warper.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AggressiveWhenSeeTargetData.minimumVelocity">
            <summary>
            The minimum velocity required to see a target. Generally 0f and therefore unset, but the Crashfish for example has this value at 0.2f.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.AggressiveWhenSeeTargetData.hungerThreshold">
            <summary>
            Minimum amount of hunger needed to become aggressive to a target. Generally 0f, and rarely exceeds 0.1f unless the creature actually can eat it. In that case use a value around 0.8f.
            </summary>
        </member>
        <member name="M:ECCLibrary.Data.AggressiveWhenSeeTargetData.#ctor(EcoTargetType,System.Single,System.Single,System.Int32,System.Boolean,System.Boolean,System.Single,System.Single)">
            <summary>
            Contains data pertaining to the <see cref="T:AggressiveWhenSeeTarget"/> component, which enables the creature to become aggressive towards specific fauna/the player.
            </summary>
            <param name="targetType">The targeted EcoTargetType of this specific component. Every creature can have multiple <see cref="T:AggressiveWhenSeeTarget"/> components. Remember, the Player is <see cref="F:EcoTargetType.Shark"/>!</param>
            <param name="aggressionPerSecond">The amount of the aggression trait added each second while targeting a creature. Generally 1f-2f.</param>
            <param name="maxRangeScalar">Creatures beyond this distance from the creature will not be targeted. Ranges from 15f for smaller predators to 150f for the Ghost Leviathan, however larger values are allowed.</param>
            <param name="maxSearchRings">An arbitrary distance scale that influences how far creatures can be targeted from. Typically 1, but should be larger (3+) if the maxRangeScalar is higher.</param>
            <param name="ignoreSameKind">If false, this creature will attack other creatures with the same TechType.</param>
            <param name="targetShouldBeInfected">Only applicable for creatures similar to the Warper.</param>
            <param name="hungerThreshold">Minimum amount of hunger needed to become aggressive to a target. Generally 0f, and rarely exceeds 0.1f unless the creature actually can eat it. In that case use a value around 0.8f.</param>
            <param name="minimumVelocity">The minimum velocity required to see a target. Generally 0f and therefore unset, but the Crashfish for example has this value at 0.2f.</param>
        </member>
        <member name="T:ECCLibrary.Data.EdibleData">
            <summary>
            Contains data pertaining to the <see cref="T:Eatable"/> [sic] component.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.EdibleData.foodAmount">
            <summary>
            The max amount of Food this item will give when eaten.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.EdibleData.waterAmount">
            <summary>
            The max amount of Water this item will give when eaten.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.EdibleData.decomposes">
            <summary>
            Whether this item decomposes over time.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.EdibleData.decomposeSpeed">
            <summary>
            How fast this item decomposes, relative to other items. Default value is 1f.
            </summary>
        </member>
        <member name="M:ECCLibrary.Data.EdibleData.#ctor(System.Single,System.Single,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="foodAmount">The max amount of Food this item will give when eaten.</param>
            <param name="waterAmount">The max amount of Water this item will give when eaten.</param>
            <param name="decomposes">Whether this item decomposes over time.</param>
        </member>
        <member name="M:ECCLibrary.Data.EdibleData.#ctor(System.Single,System.Single,System.Boolean,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="foodAmount">The max amount of Food this item will give when eaten.</param>
            <param name="waterAmount">The max amount of Water this item will give when eaten.</param>
            <param name="decomposes">Whether this item decomposes over time.</param>
            <param name="decomposeSpeed">How fast this item decomposes, relative to other items. Default value is 1f.</param>
        </member>
        <member name="T:ECCLibrary.Data.PickupableFishData">
            <summary>
            Contains data pertaining to picking up and/or holding fish in your hands.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.PickupableFishData.CanBeHeld">
            <summary>
            Can this fish be held in the hotbar?
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.PickupableFishData.ReferenceHoldingAnimation">
            <summary>
            If can be held: The TechType that is used to find the holding animation.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.PickupableFishData.WorldModelName">
            <summary>
            If can be held: The name of the model used for the World View, which must be a child of the object.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.PickupableFishData.ViewModelName">
            <summary>
            If can be held: The name of the model used for the First Person View, which must be a child of the object.
            </summary>
        </member>
        <member name="M:ECCLibrary.Data.PickupableFishData.#ctor">
            <summary>
            This constructor overload creates a <see cref="T:ECCLibrary.Data.PickupableFishData"/> instance for creatures that can be picked up but NOT held.
            </summary>
        </member>
        <member name="M:ECCLibrary.Data.PickupableFishData.#ctor(TechType,System.String,System.String)">
            <summary>
            This constructor overload creates a <see cref="T:ECCLibrary.Data.PickupableFishData"/> instance for creatures that can be picked up AND held.
            </summary>
            <param name="referenceHoldingAnimation">If can be held: The TechType that is used to find the holding animation.</param>
            <param name="worldModelName">If can be held: The name of the model used for the World View, which must be a child of the object.</param>
            <param name="viewModelName">If can be held: The name of the model used for the First Person View, which must be a child of the object.</param>
        </member>
        <member name="T:ECCLibrary.Data.ScareableData">
            <summary>
            Contains data pertaining to the <see cref="T:Scareable"/> component. This component is what enables small fish to swim away from the player and potential predators.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.ScareableData.targetType">
            <summary>
            The target type that scares this creature.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.ScareableData.scarePerSecond">
            <summary>
            How fast this creature gets scared per second (maximum "fear" is 1f).
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.ScareableData.maxRangeScalar">
            <summary>
            How far this creature can get scared.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.ScareableData.minMass">
            <summary>
            A creature must have this much mass or more to evoke fear.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.ScareableData.updateTargetInterval">
            <summary>
            Every <see cref="F:ECCLibrary.Data.ScareableData.updateTargetInterval"/> seconds, this creature will scan the area looking for things to be scared of.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.ScareableData.updateRange">
            <summary>
            The creature will only be afraid if within this many meters of the player object.
            </summary>
        </member>
        <member name="M:ECCLibrary.Data.ScareableData.#ctor(EcoTargetType,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Contains data pertaining to the <see cref="T:Scareable"/> component. This component is what enables small fish to swim away from the player and potential predators.
            </summary>
            <param name="targetType">The target type that scares this creature.</param>
            <param name="scarePerSecond">How fast this creature gets scared per second (maximum "fear" is 1f).</param>
            <param name="maxRangeScalar">How far this creature can get scared.</param>
            <param name="minMass">A creature must have this much mass or more to evoke fear.</param>
            <param name="updateTargetInterval">Every <see cref="F:ECCLibrary.Data.ScareableData.updateTargetInterval"/> seconds, this creature will scan the area looking for things to be scared of.</param>
            <param name="updateRange">The creature will only be afraid if within this many meters of the player object.</param>
        </member>
        <member name="T:ECCLibrary.Data.VFXFabricatingData">
            <summary>
            Data that controls the creation of the VFXFabricating component on a prefab, in order to have a model in the Fabricator.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.VFXFabricatingData.pathToModel">
            <summary>
            Leave as null or empty to point to the prefab root. Otherwise this is the path to the crafting model Transform, relative to the prefab's root Transform.
            For example, the Repair Tool's would be `welder_scaled/welder`.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.VFXFabricatingData.minY">
            <summary>
            <para>The relative y position of where the ghost effect begins, in global coordinates relative to the model's center, taking the posOffset into account.</para>
            <para>Typically a negative value because the bottom of an object is below its center.
            You may need to adjust this at runtime with Subnautica Runtime Editor to get desired results.</para>
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.VFXFabricatingData.maxY">
            <summary>
            <para>The relative y position of where the ghost effect ends, in global coordinates relative to the model's center, taking the posOffset into account.</para>
            <para>Typically a positive value because the top of an object is above its center.
            You may need to adjust this at runtime with Subnautica Runtime Editor to get desired results.</para>
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.VFXFabricatingData.posOffset">
            <summary>
            The offset of the model when being crafted (in METERS). This is generally around zero, but the y value may be ajusted up or down a few millimeters to fix clipping/floating issues.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.VFXFabricatingData.eulerOffset">
            <summary>
            Rotational offset.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.VFXFabricatingData.scaleFactor">
            <summary>
            The relative scale of the model. Generally is 1x for most items.
            </summary>
        </member>
        <member name="M:ECCLibrary.Data.VFXFabricatingData.#ctor(System.String,System.Single,System.Single,UnityEngine.Vector3,System.Single,UnityEngine.Vector3)">
            <summary>
            Data that controls the creation of the VFXFabricating component on a prefab, in order to have a model in the Fabricator.
            </summary>
            <param name="pathToModel">Leave as null or empty to point to the prefab root. Otherwise this is the path to the crafting model Transform, relative to the prefab's root Transform.
            For example, the Repair Tool's would be `welder_scaled/welder`.</param>
            <param name="minY"><para>The relative y position of where the ghost effect begins, in global coordinates relative to the model's center, taking the posOffset into account.</para>
            <para>Typically a negative value because the bottom of an object is below its center.
            You may need to adjust this at runtime with Subnautica Runtime Editor to get desired results.</para></param>
            <param name="maxY"><para>The relative y position of where the ghost effect ends, in global coordinates relative to the model's center, taking the posOffset into account.</para>
            <para>Typically a positive value because the top of an object is above its center.
            You may need to adjust this at runtime with Subnautica Runtime Editor to get desired results.</para></param>
            <param name="posOffset">The offset of the model when being crafted (in METERS). This is generally around zero, but the y value may be ajusted up or down a few millimeters to fix clipping/floating issues.</param>
            <param name="scaleFactor">The relative scale of the model. Generally is 1x for most items.</param>
            <param name="eulerOffset">Rotational offset.</param>
        </member>
        <member name="T:ECCLibrary.Data.WaterParkCreatureDataStruct">
            <summary>
            Contains data pertaining to the <see cref="T:WaterParkCreatureData"/> ScriptableObject. If assigned, allows a creature to be released in Alien Containment.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.WaterParkCreatureDataStruct.initialSize">
            <summary>
            The size of this creature at birth. Typically a fraction fo the max size.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.WaterParkCreatureDataStruct.maxSize">
            <summary>
            The maximum size of this creature when fully grown.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.WaterParkCreatureDataStruct.outsideSize">
            <summary>
            The size of this creature when released outside. Typically 1f for small creatures and lower for larger creatures.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.WaterParkCreatureDataStruct.daysToGrow">
            <summary>
            How many in-game days it takes for this creature to reach its maximum size. Typically takes on a value of 1 to 1.5.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.WaterParkCreatureDataStruct.isPickupableOutside">
            <summary>
            Should be true for creatures that are typically pickupable, and should be FALSE for anything else.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.WaterParkCreatureDataStruct.canBreed">
            <summary>
            If false, this creature cannot breed regardless of age. True for most creatures besides pets.
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.WaterParkCreatureDataStruct.eggOrChildPrefab">
            <summary>
            The prefab for either the egg or the child version of the creature (which can be the adult object).
            </summary>
        </member>
        <member name="F:ECCLibrary.Data.WaterParkCreatureDataStruct.adultPrefab">
            <summary>
            The prefab for the adult creature GameObject.
            </summary>
        </member>
        <member name="M:ECCLibrary.Data.WaterParkCreatureDataStruct.#ctor(System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,ECCLibrary.Data.CustomGameObjectReference,ECCLibrary.Data.CustomGameObjectReference)">
            <summary>
            Contains data pertaining to the <see cref="T:WaterParkCreatureData"/> ScriptableObject. If assigned, allows a creature to be released in Alien Containment.
            </summary>
            <param name="initialSize">The size of this creature at birth. Typically a fraction fo the max size.</param>
            <param name="maxSize">The maximum size of this creature when fully grown.</param>
            <param name="outsideSize">The size of this creature when released outside. Typically 1f for small creatures and lower for larger creatures.</param>
            <param name="daysToGrow">How many in-game days it takes for this creature to reach its maximum size. Typically takes on a value of 1 to 1.5.</param>
            <param name="isPickupableOutside">Should be true for creatures that are typically pickupable, and should be FALSE for anything else.</param>
            <param name="canBreed">If false, this creature cannot breed regardless of age. True for most creatures besides pets.</param>
            <param name="eggOrChildPrefab">The prefab for either the egg or the child version of the creature (which can be the adult object).</param>
            <param name="adultPrefab">The prefab for the adult creature GameObject, for creatures with a juvenile form.</param>
        </member>
        <member name="M:ECCLibrary.Data.WaterParkCreatureDataStruct.#ctor(System.Single,System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            Contains data pertaining to the <see cref="T:WaterParkCreatureData"/> ScriptableObject. If assigned, allows a creature to be released in Alien Containment.
            </summary>
            <param name="initialSize">The size of this creature at birth. Typically a fraction fo the max size.</param>
            <param name="maxSize">The maximum size of this creature when fully grown.</param>
            <param name="outsideSize">The size of this creature when released outside. Typically 1f for small creatures and lower for larger creatures.</param>
            <param name="daysToGrow">How many in-game days it takes for this creature to reach its maximum size. Typically takes on a value of 1 to 1.5.</param>
            <param name="isPickupableOutside">Should be true for creatures that are typically pickupable, and should be FALSE for anything else.</param>
            <param name="canBreed">If false, this creature cannot breed regardless of age. True for most creatures besides pets.</param>
            <param name="eggOrChildPrefabClassId">ClassID / TechType of the prefab for either the egg or the child version of the creature (which can be the adult object).</param>
            <param name="adultPrefabClassId">ClassID of the prefab for the adult creature GameObject, for creatures with a juvenile form.</param>
        </member>
        <member name="T:ECCLibrary.Data.CreatureSpawnData">
            <summary>
            Class containing data related to creature spawning, simplifying usage of the <see cref="T:Nautilus.Handlers.LootDistributionHandler"/>.
            </summary>
        </member>
        <member name="T:ECCLibrary.Mono.HeldFish">
            <summary>
            Component that inherits from DropTool for use in custom held fish. Allows reusing vanilla fish holding animations from the player.
            </summary>
        </member>
        <member name="F:ECCLibrary.Mono.HeldFish.animationName">
            <summary>
            Name of the animation parameter.
            </summary>
        </member>
        <member name="P:ECCLibrary.Mono.HeldFish.animToolName">
            <summary>
            Overrides the original property.
            </summary>
        </member>
        <member name="M:ECCLibrary.Mono.HeldFish.SetAnimationTechTypeReference(TechType)">
            <summary>
            Sets the <see cref="F:ECCLibrary.Mono.HeldFish.animationName"/> field to match the holding animation of the fish defined by <paramref name="techType"/>.
            </summary>
            <param name="techType"></param>
        </member>
        <member name="T:ECCLibrary.Mono.SetOnTouchCallbackDelayed">
            <summary>
            Sets the <see cref="F:OnTouch.onTouch"/> callback in the Start method.
            </summary>
        </member>
        <member name="F:ECCLibrary.Mono.SetOnTouchCallbackDelayed.onTouch">
            <summary>
            Component to affect.
            </summary>
        </member>
        <member name="F:ECCLibrary.Mono.SetOnTouchCallbackDelayed.callbackGameObject">
            <summary>
            GameObject holding the callback component.
            </summary>
        </member>
        <member name="F:ECCLibrary.Mono.SetOnTouchCallbackDelayed.callbackTypeName">
            <summary>
            Callback method type name.
            </summary>
        </member>
        <member name="F:ECCLibrary.Mono.SetOnTouchCallbackDelayed.callbackMethodName">
            <summary>
            Callback method name.
            </summary>
        </member>
        <member name="T:ECCLibrary.ECCConfig">
            <summary>
            Main and only config file for ECCLibrary.
            </summary>
        </member>
        <member name="T:ECCLibrary.CreatureDataUtils">
            <summary>
            Utility methods related to assigning patch-time data.
            </summary>
        </member>
        <member name="M:ECCLibrary.CreatureDataUtils.CreateLiveMixinData(System.Single,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates an instance of the <see cref="T:LiveMixinData"/> ScriptableObject.
            </summary>
            <param name="maxHealth"></param>
            <param name="weldable"></param>
            <param name="knifeable"></param>
            <param name="destroyOnDeath"></param>
            <returns></returns>
        </member>
        <member name="M:ECCLibrary.CreatureDataUtils.SetAcidImmune(TechType)">
            <summary>
            Makes a given TechType immune to acid, such as brine.
            </summary>
            <param name="techType"></param>
        </member>
        <member name="M:ECCLibrary.CreatureDataUtils.SetBehaviorType(TechType,BehaviourType)">
            <summary>
            Set the BehaviourType of a TechType. Used for certain creature interactions.
            </summary>
            <param name="techType"></param>
            <param name="behaviourType"></param>
        </member>
        <member name="M:ECCLibrary.CreatureDataUtils.SetItemSounds(TechType,ECCLibrary.Data.ItemSoundsType)">
            <summary>
            Patch the inventory sounds of a TechType.
            </summary>
            <param name="techType"></param>
            <param name="soundType"></param>
        </member>
        <member name="M:ECCLibrary.CreatureDataUtils.SetBioreactorCharge(TechType,System.Single)">
            <summary>
            Sets the Bioreactor charge of <paramref name="techType"/> to <paramref name="charge"/>.
            </summary>
            <param name="techType"></param>
            <param name="charge"></param>
        </member>
        <member name="M:ECCLibrary.CreatureDataUtils.AddCreaturePDAEncyclopediaEntry(ECCLibrary.CreatureAsset,System.String,System.String,System.String,System.Single,UnityEngine.Texture2D,UnityEngine.Sprite)">
            <summary>
            Registers a single PDA encylopedia entry into the game for a given creature asset.
            </summary>
            <param name="creature">Relevant CreatureAsset.</param>
            <param name="path"><para>Path to this entry in the databank.</para>
            <para>To find examples of this string, open "...Subnautica\Subnautica_Data\StreamingAssets\SNUnmanagedData\LanguageFiles\English.json" and search for "EncyPath".</para>
            <para>Examples:</para>
            <list type="bullet">
            <item>Lifeforms/Fauna/Herbivores</item>
            <item>Lifeforms/Fauna/Carnivores</item>
            <item>Lifeforms/Fauna/Rays</item>
            <item>Lifeforms/Fauna/Sharks</item>
            <item>Lifeforms/Fauna/Leviathans</item>
            <item>Lifeforms/Fauna/Other</item>
            <item>Lifeforms/Fauna/SmallHerbivores</item>
            <item>Lifeforms/Fauna/LargeHerbivores</item>
            </list>
            </param>
            <param name="title">Displayed title of the PDA entry in English. If set to null, you can implement your own language system.</param>
            <param name="desc">Displayed description of the PDA entry in English. If set to null, you can implement your own language system.</param>
            <param name="scanTime">Duration of scanning in seconds.</param>
            <param name="image">Databank entry image. Can be null.</param>
            <param name="popupImage">Small popup image. Can be null.</param>
        </member>
        <member name="T:ECCLibrary.CreaturePrefabUtils">
            <summary>
            Utility methods related to constructing a creature prefab GameObject.
            </summary>
            <summary>
            Utilities related to creating a creature prefab object.
            </summary>
        </member>
        <member name="M:ECCLibrary.CreaturePrefabUtils.MakeObjectScannerRoomScannable(UnityEngine.GameObject,System.Boolean)">
            <summary>
            Makes a given GameObject scannable with the scanner room, using the <see cref="T:ResourceTracker"/> component.
            </summary>
            <param name="gameObject"></param>
            <param name="updatePositionPeriodically">Whether to automatically update the position of this ResourceTracker or not (should always be true for creatures).</param>
        </member>
        <member name="M:ECCLibrary.CreaturePrefabUtils.AddDamageModifier(UnityEngine.GameObject,DamageType,System.Single)">
            <summary>
            Multiplies damage of the given <paramref name="type"/> by <paramref name="multiplier"/>.
            </summary>
        </member>
        <member name="M:ECCLibrary.CreaturePrefabUtils.AddVFXFabricating(UnityEngine.GameObject,ECCLibrary.Data.VFXFabricatingData)">
            <summary>
            Adds the <see cref="T:VFXFabricating"/> component onto a prefab to enable its model in the Fabricator. Automatically determines settings if <paramref name="data"/> is null.
            </summary>
        </member>
        <member name="M:ECCLibrary.CreaturePrefabUtils.AddEatable(UnityEngine.GameObject,ECCLibrary.Data.EdibleData)">
            <summary>
            Adds the <see cref="T:Eatable"/> [sic] component to the given GameObject.
            </summary>
        </member>
        <member name="M:ECCLibrary.CreaturePrefabUtils.AddAggressiveWhenSeeTarget(UnityEngine.GameObject,ECCLibrary.Data.AggressiveWhenSeeTargetData,LastTarget,Creature)">
            <summary>
            Adds the <see cref="T:AggressiveWhenSeeTarget"/> component onto the object with the given <paramref name="data"/>.
            </summary>
        </member>
        <member name="M:ECCLibrary.CreaturePrefabUtils.CreateTrailManagerWithAllChildren(UnityEngine.GameObject,ECCLibrary.Data.CreatureComponents,System.Single,System.Single,System.Single)">
            <summary>
            Creates a <see cref="T:TrailManager"/>, which controls the procedural animations of tail-like objects.
            </summary>
            <param name="trailParent">The root of the spine and object that the <see cref="T:TrailManager"/> is added to. The first child of this object and all children of the first child are used for the trail.</param>
            <param name="components">The CreatureComponents of this creature.</param>
            <param name="segmentSnapSpeed">How fast each segment snaps back into the default position. A higher value gives a more rigid appearance.</param>
            <param name="maxSegmentOffset">How far each segment can be from the original position.</param>
            <param name="multiplier">The total strength of the movement. A value too low or too high will break the trail completely.</param>
        </member>
        <member name="M:ECCLibrary.CreaturePrefabUtils.CreateTrailManagerWithAllChildren(UnityEngine.GameObject,BehaviourLOD,UnityEngine.Transform,System.Single,System.Single,System.Single)">
            <summary>
            Creates a <see cref="T:TrailManager"/>, which controls the procedural animations of tail-like objects.
            </summary>
            <param name="trailParent">The root of the spine and object that the <see cref="T:TrailManager"/> is added to. The first child of this object and all children of the first child are used for the trail.</param>
            <param name="behaviourLOD">The BehaviourLOD of this creature.</param>
            <param name="creatureRoot">The creature's uppermost Transform.</param>
            <param name="segmentSnapSpeed">How fast each segment snaps back into the default position. A higher value gives a more rigid appearance.</param>
            <param name="maxSegmentOffset">How far each segment can be from the original position.</param>
            <param name="multiplier">The total strength of the movement. A value too low or too high will break the trail completely.</param>
        </member>
        <member name="M:ECCLibrary.CreaturePrefabUtils.CreateTrailManagerManually(UnityEngine.GameObject,ECCLibrary.Data.CreatureComponents,UnityEngine.Transform[],System.Single,System.Single)">
            <summary>
            Creates a <see cref="T:TrailManager"/>, which controls the procedural animations of tail-like objects.
            </summary>
            <param name="trailRoot">The root of the spine and object that the <see cref="T:TrailManager"/> is added to.</param>
            <param name="components">The CreatureComponents of this creature.</param>
            <param name="trails">Any objects that are simulated. Should NOT include the <paramref name="trailRoot"/>'s transform.</param>
            <param name="segmentSnapSpeed">How fast each segment snaps back into the default position. A higher value gives a more rigid appearance.</param>
            <param name="maxSegmentOffset">How far each segment can be from the original position.</param>
        </member>
        <member name="M:ECCLibrary.CreaturePrefabUtils.CreateTrailManagerManually(UnityEngine.GameObject,BehaviourLOD,UnityEngine.Transform,UnityEngine.Transform[],System.Single,System.Single)">
            <summary>
            Creates a <see cref="T:TrailManager"/>, which controls the procedural animations of tail-like objects.
            </summary>
            <param name="trailRoot">The root of the spine and object that the <see cref="T:TrailManager"/> is added to.</param>
            <param name="behaviourLOD">The BehaviourLOD of this creature.</param>
            <param name="creatureRoot">The creature's uppermost Transform.</param>
            <param name="trails">Any objects that are simulated. Should NOT include the <paramref name="trailRoot"/>'s transform.</param>
            <param name="segmentSnapSpeed">How fast each segment snaps back into the default position. A higher value gives a more rigid appearance.</param>
            <param name="maxSegmentOffset">How far each segment can be from the original position.</param>
        </member>
        <member name="M:ECCLibrary.CreaturePrefabUtils.AddOnTouchTrigger(UnityEngine.GameObject,UnityEngine.GameObject,System.String,System.String)">
            <summary>
            Adds an instance of the <see cref="T:OnTouch"/> component onto <paramref name="triggerObject"/> that calls the method as defined by the parameters.
            </summary>
            <param name="triggerObject">The object that holds the touch trigger, for example a creature's mouth collider. Must have Collider with <see cref="P:UnityEngine.Collider.isTrigger"/> set to TRUE.</param>
            <param name="callbackObject">The GameObject that holds the callback component and method.</param>
            <param name="callbackComponentTypeName">The name of the type that holds the action performed when the object is collided with.</param>
            <param name="callbackMethodName">The name of the method that is performed when the object is collided with.</param>
            <returns></returns>
        </member>
        <member name="M:ECCLibrary.CreaturePrefabUtils.AddMeleeAttack``1(UnityEngine.GameObject,ECCLibrary.Data.CreatureComponents,UnityEngine.GameObject,System.Boolean,System.Single,System.Single,System.Boolean)">
            <summary>
            Assigns the essential fields of any sort of MeleeAttack component. For anything else, you're on your own.
            </summary>
            <typeparam name="T">Type which must be the same as or inherit from MeleeAttack.</typeparam>
            <param name="creature">The creature prefab root.</param>
            <param name="components">Components reference object.</param>
            <param name="mouth">The object that has the bite trigger.</param>
            <param name="automaticallyAddOnTouchCallback">If true, the <see cref="T:OnTouch"/> component will be added and properly assigned.</param>
            <param name="damage">Bite damage.</param>
            <param name="interval">Seconds between each bite.</param>
            <param name="canBiteVehicle">If false, this creature is unable to attack the Seamoth and PRAWN Suit.</param>
            <returns></returns>
        </member>
        <member name="T:ECCLibrary.CreatureTemplateUtils">
            <summary>
            Utility methods related to using the <see cref="T:ECCLibrary.Data.CreatureTemplate"/> class more efficiently. An alternative to setting all properties manually.
            </summary>
        </member>
        <member name="M:ECCLibrary.CreatureTemplateUtils.SetCreatureDataEssentials(ECCLibrary.Data.CreatureTemplate,LargeWorldEntity.CellLevel,System.Single,System.Single,ECCLibrary.Data.BehaviourLODData,System.Single)">
            <summary>
            <para>Sets the most commonly used properties relating to creature data.</para>
            <para>Assigns the following properties so that you don't have to:</para>
            <list type="bullet">
            <item><see cref="P:ECCLibrary.Data.CreatureTemplate.CellLevel"/></item>
            <item><see cref="P:ECCLibrary.Data.CreatureTemplate.Mass"/></item>
            <item><see cref="P:ECCLibrary.Data.CreatureTemplate.EyeFOV"/></item>
            <item><see cref="P:ECCLibrary.Data.CreatureTemplate.BehaviourLODData"/></item>
            <item><see cref="P:ECCLibrary.Data.CreatureTemplate.BioReactorCharge"/></item>
            </list>
            </summary>
            <param name="template">The creature template to modify.</param>
            <param name="cellLevel">Roughly determines how far this creature can be loaded in.</param>
            <param name="mass">Mass in kg. Ranges from about 1.8f to 4050f. Default is 15kg.</param>
            <param name="eyeFov">The FOV is used for detecting things such as prey.
            SHOULD BE NEGATIVE! This value has an expected range of [-1, 0]. Is 0f by default. A value of -1 means a given object is ALWAYS in view.</param>
            <param name="behaviourLod">Determines the distance for which certain calculations (such as Trail Managers) perform (or don't). It is recommended to increase these values for large creatures.</param>
            <param name="bioReactorCharge">Total power output of this creature. All ECC creatures can be put in the bioreactor as long as this value is greater than 0.</param>
        </member>
        <member name="M:ECCLibrary.CreatureTemplateUtils.SetCreatureMotionEssentials(ECCLibrary.Data.CreatureTemplate,ECCLibrary.Data.SwimRandomData,ECCLibrary.Data.StayAtLeashData)">
            <summary>
            <para>Sets the most commonly used properties relating to creature motion.</para>
            <para>Assigns the following properties so that you don't have to:</para>
            <list type="bullet">
            <item><see cref="P:ECCLibrary.Data.CreatureTemplate.SwimRandomData"/></item>
            <item><see cref="P:ECCLibrary.Data.CreatureTemplate.StayAtLeashData"/></item>
            </list>
            </summary>
            <param name="template">The creature template to modify.</param>
            <param name="swimRandom">Contains data pertaining to the <see cref="T:SwimRandom"/> action.</param>
            <param name="stayAtLeash">Contains data pertaining to the <see cref="T:StayAtLeashPosition"/> action. This component keeps creatures from wandering too far.</param>
        </member>
        <member name="M:ECCLibrary.CreatureTemplateUtils.SetPreyEssentials(ECCLibrary.Data.CreatureTemplate,System.Single,ECCLibrary.Data.PickupableFishData,ECCLibrary.Data.EdibleData)">
            <summary>
            <para>Sets properties related to generic prey creatures. Adds basic fear elements and allows it to be picked up and eaten.</para>
            <para>Assigns the following properties so that you don't have to:</para>
            <list type="bullet">
            <item><see cref="P:ECCLibrary.Data.CreatureTemplate.ScareableData"/></item>
            <item><see cref="P:ECCLibrary.Data.CreatureTemplate.FleeWhenScaredData"/></item>
            <item><see cref="P:ECCLibrary.Data.CreatureTemplate.PickupableFishData"/></item>
            <item><see cref="P:ECCLibrary.Data.CreatureTemplate.EdibleData"/></item>
            </list>
            </summary>
            <param name="template">The creature template to modify.</param>
            <param name="fleeVelocity">The velocity in m/s at which the creature swims away from the player and other perceived threats.</param>
            <param name="pickupable">Contains data pertaining to picking up and/or holding fish in your hands.</param>
            <param name="edible">Contains data pertaining to the <see cref="T:Eatable"/> [sic] component.</param>
        </member>
        <member name="T:ECCLibrary.ECCSoundAssets">
            <summary>
            Holds generic sound assets that are used for creatures in the game.
            </summary>
        </member>
        <member name="P:ECCLibrary.ECCSoundAssets.FishSplat">
            <summary>
            Fish damage sound.
            </summary>
        </member>
        <member name="P:ECCLibrary.ECCSoundAssets.UnlockDatabankEntry">
            <summary>
            Sound for unlocking normal databank entries.
            </summary>
        </member>
        <member name="T:ECCLibrary.ECCUtility">
            <summary>
            Contains various utilities of no particular category.
            </summary>
        </member>
        <member name="M:ECCLibrary.ECCUtility.LoadAssetBundleFromAssetsFolder(System.Reflection.Assembly,System.String)">
            <summary>
            Helps in the loading of AssetBundles from an "Assets" folder in your mod folder root. An example of an AssetBundle path: `...Subnautica\QMods\DeExtinction\Assets\deextinctionassets`.
            </summary>
            <param name="modAssembly">The assembly to grab the mod from. See <see cref="M:System.Reflection.Assembly.GetExecutingAssembly"/>.</param>
            <param name="assetsFileName">The name of the AssetBundle file in your assets folder, that will be loaded. For De-Extinction, it is `deextinctionassets`.</param>
            <returns>A loaded AssetBundle.</returns>
        </member>
        <member name="M:ECCLibrary.ECCUtility.CompareStrings(System.String,System.String,ECCLibrary.ECCStringComparison)">
            <summary>
            Compares two strings using the simplified ECCStringComparison.
            </summary>
            <param name="original"></param>
            <param name="compareTo"></param>
            <param name="comparisonMode"></param>
            <returns></returns>
        </member>
        <member name="P:ECCLibrary.ECCUtility.FrictionlessPhysicMaterial">
            <summary>
            Returns an instance of the PhysicMaterial class that should be used for creatures. The dynamicFriction and staticFriction fields are set to 0 and the combine mode is set to multiply. Please do not modify fields on this class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECCLibrary.ECCUtility.CreateSpriteFromAtlasSprite(Atlas.Sprite)">
            <summary>
            Converts a <see cref="T:Atlas.Sprite"/> to a <see cref="T:UnityEngine.Sprite"/>.
            </summary>
            <param name="sprite"></param>
        </member>
        <member name="M:ECCLibrary.ECCUtility.GetFmodAsset(System.String,System.String)">
            <summary>
            Creates an FMODAsset with the given parameters.
            </summary>
            <param name="path"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:ECCLibrary.GameObjectExtensions">
            <summary>
            Various ECC-related extensions for GameObjects.
            </summary>
        </member>
        <member name="M:ECCLibrary.GameObjectExtensions.SearchChild(UnityEngine.GameObject,System.String,ECCLibrary.ECCStringComparison)">
            <summary>
            Find a GameObject in this object's hiearchy, by name.
            </summary>
            <param name="gameObject"></param>
            <param name="byName"></param>
            <param name="stringComparison"></param>
            <returns></returns>
        </member>
        <member name="T:ECCLibrary.TransformExtensions">
            <summary>
            Various ECC-related extensions for Transforms.
            </summary>
        </member>
        <member name="M:ECCLibrary.TransformExtensions.SearchChild(UnityEngine.Transform,System.String,ECCLibrary.ECCStringComparison)">
            <summary>
            Find a GameObject in this object's hiearchy, by name.
            </summary>
            <param name="transform"></param>
            <param name="byName"></param>
            <param name="stringComparison"></param>
            <returns></returns>
        </member>
        <member name="M:ECCLibrary.TransformExtensions.ZeroTransform(UnityEngine.Transform,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Locally resets all or some components of this Transform.
            </summary>
            <param name="transform">This.</param>
            <param name="pos">Zero position?</param>
            <param name="rot">Zero rotation?</param>
            <param name="scl">Zero scale?</param>
        </member>
        <member name="T:ECCLibrary.ECCStringComparison">
            <summary>
            Enum which is solely used for ECCHelper methods.
            </summary>
        </member>
        <member name="F:ECCLibrary.ECCStringComparison.Equals">
            <summary>
            'A' == 'a'
            </summary>
        </member>
        <member name="F:ECCLibrary.ECCStringComparison.EqualsCaseSensitive">
            <summary>
            'A' != 'a'
            </summary>
        </member>
        <member name="F:ECCLibrary.ECCStringComparison.StartsWith">
            <summary>
            Whether this string starts with the other given string. Not case sensitive.
            </summary>
        </member>
        <member name="F:ECCLibrary.ECCStringComparison.StartsWithCaseSensitive">
            <summary>
            Whether this string starts with the other given string. Case sensitive.
            </summary>
        </member>
        <member name="F:ECCLibrary.ECCStringComparison.Contains">
            <summary>
            Whether a given string is located anywhere inside of a larger string. Not case sensitive.
            </summary>
        </member>
        <member name="F:ECCLibrary.ECCStringComparison.ContainsCaseSensitive">
            <summary>
            Whether a given string is located anywhere inside of a larger string. Case sensitive.
            </summary>
        </member>
        <member name="T:ECCLibrary.TrailManagerBuilder">
            <summary>
            Helps in the creation of a <see cref="T:TrailManager"/>. Call the <see cref="M:ECCLibrary.TrailManagerBuilder.Apply"/> method to apply the changes.
            </summary>
        </member>
        <member name="M:ECCLibrary.TrailManagerBuilder.#ctor(ECCLibrary.Data.CreatureComponents,UnityEngine.Transform,System.Single,System.Single)">
            <summary>
            Helps in the creation of a <see cref="T:TrailManager"/>. Call the <see cref="M:ECCLibrary.TrailManagerBuilder.Apply"/> method to apply the changes.
            </summary>
            <param name="components">The object that holds all creature components.</param>
            <param name="rootSegment"> The object that the TrailManager is added to. Is generally a part of the rig. This bone does NOT get animated, and should NOT be included in the list of trail bones.</param>
            <param name="segmentSnapSpeed">Controls rigidity. The higher this value, the faster the TrailManager can revert to its default (stiff) state. The lower this value, the more "floaty" it appears.</param>
            <param name="maxSegmentOffset">If -1 (default), there is no limit on how far each segment can go. Otherwise, this value forces each bone to remain within a certain distance of its starting point.</param>
        </member>
        <member name="M:ECCLibrary.TrailManagerBuilder.#ctor(UnityEngine.Transform,BehaviourLOD,UnityEngine.Transform,System.Single,System.Single)">
            <summary>
            Helps in the creation of a <see cref="T:TrailManager"/>. Call the <see cref="M:ECCLibrary.TrailManagerBuilder.Apply"/> method to apply the changes.
            </summary>
            <param name="creatureRoot">The root of the creature. Typically the object that holds the Creature component and all CreatureActions.</param>
            <param name="behaviourLOD">The BehaviourLOD of this creature.</param>
            <param name="rootSegment"> The object that the TrailManager is added to. Is generally a part of the rig. This bone does NOT get animated, and should NOT be included in the list of trail bones.</param>
            <param name="segmentSnapSpeed">Controls rigidity. The higher this value, the faster the TrailManager can revert to its default (stiff) state. The lower this value, the more "floaty" it appears.</param>
            <param name="maxSegmentOffset">If -1 (default), there is no limit on how far each segment can go. Otherwise, this value forces each bone to remain within a certain distance of its starting point.</param>
        </member>
        <member name="P:ECCLibrary.TrailManagerBuilder.CreatureRoot">
            <summary>
            The root of the creature. Typically the object that holds the Creature component and all CreatureActions.
            </summary>
        </member>
        <member name="P:ECCLibrary.TrailManagerBuilder.RootSegment">
            <summary>
            The object that the TrailManager is added to. Is generally a part of the rig. This bone does NOT get animated, and should NOT be included in the list of trail bones.
            </summary>
        </member>
        <member name="P:ECCLibrary.TrailManagerBuilder.Trails">
            <summary>
            The array that contains all of the transforms of the affected bones.
            </summary>
        </member>
        <member name="P:ECCLibrary.TrailManagerBuilder.BehaviourLOD">
            <summary>
            The BehaviourLOD of this creature.
            </summary>
        </member>
        <member name="P:ECCLibrary.TrailManagerBuilder.SegmentSnapSpeed">
            <summary>
            Controls rigidity. The higher this value, the faster the TrailManager can revert to its default (stiff) state. The lower this value, the more "floaty" it appears.
            </summary>
        </member>
        <member name="P:ECCLibrary.TrailManagerBuilder.MaxSegmentOffset">
            <summary>
            If -1 (default), there is no limit on how far each segment can go. Otherwise, this value forces each bone to remain within a certain distance of its starting point.
            </summary>
        </member>
        <member name="P:ECCLibrary.TrailManagerBuilder.PitchMultiplier">
            <summary>
            Multiplier for the intensity of each bone's trail effect. The lowest time value (t=0) affects the first bone while the highest time value (t=1) affects the last bone. Default value is <see cref="P:ECCLibrary.TrailManagerUtilities.FlatMultiplierAnimationCurve"/>.
            </summary>
        </member>
        <member name="P:ECCLibrary.TrailManagerBuilder.RollMultiplier">
            <summary>
            Multiplier for the intensity of each bone's trail effect. The lowest time value (t=0) affects the first bone while the highest time value (t=1) affects the last bone. Default value is <see cref="P:ECCLibrary.TrailManagerUtilities.FlatMultiplierAnimationCurve"/>.
            </summary>
        </member>
        <member name="P:ECCLibrary.TrailManagerBuilder.YawMultiplier">
            <summary>
            Multiplier for the intensity of each bone's trail effect. The lowest time value (t=0) affects the first bone while the highest time value (t=1) affects the last bone. Default value is <see cref="P:ECCLibrary.TrailManagerUtilities.FlatMultiplierAnimationCurve"/>.
            </summary>
        </member>
        <member name="P:ECCLibrary.TrailManagerBuilder.AllowDisableOnScreen">
            <summary>
            If true, this TrailManager could be disabled while outside the BehaviourLOD's "close threshold" (for performance reasons). True by default.
            </summary>
        </member>
        <member name="M:ECCLibrary.TrailManagerBuilder.SetAllMultiplierAnimationCurves(UnityEngine.AnimationCurve)">
            <summary>
            Sets the multiplier in every direction to <paramref name="curve"/>.
            </summary>
        </member>
        <member name="M:ECCLibrary.TrailManagerBuilder.SetTrailArrayToAllChildren">
            <summary>
            Forces the Trails array to contain every single child of the <see cref="P:ECCLibrary.TrailManagerBuilder.RootSegment"/>. Does not work well when the creature has fins or any sort of bone structure in the spine that isn't meant to be 100% animated.
            </summary>
        </member>
        <member name="M:ECCLibrary.TrailManagerBuilder.SetTrailArrayToChildrenWithKeywords(System.String)">
            <summary>
            Fills the Trails array with every child of the RootSegment (recursive) that contains <paramref name="keyword"/> in its name (case insensitive). Ordered from parent to child, top to bottom.
            </summary>
        </member>
        <member name="M:ECCLibrary.TrailManagerBuilder.SetTrailArrayToPhysBoneChildren">
            <summary>
            Fills the Trails array with every child (recursive) of the <see cref="P:ECCLibrary.TrailManagerBuilder.RootSegment"/> that contains 'phys' in its name (case insensitive). Ordered from parent to child, top to bottom.
            </summary>
        </member>
        <member name="M:ECCLibrary.TrailManagerBuilder.Apply">
            <summary>
            Finalizes creation of this TrailManager.
            </summary>
        </member>
        <member name="T:ECCLibrary.TrailManagerUtilities">
            <summary>
            Utilities related to the <see cref="T:TrailManager"/> class.
            </summary>
        </member>
        <member name="P:ECCLibrary.TrailManagerUtilities.FlatMultiplierAnimationCurve">
            <summary>
            Animation curve that is flat with a value of 1 all across.
            </summary>
        </member>
        <member name="M:ECCLibrary.TrailManagerUtilities.GetLinearAnimationCurve(System.Single,System.Single)">
            <summary>
            Returns an animation curve that represents a straight line from <paramref name="left"/> to <paramref name="right"/>.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:ECCLibrary.TrailManagerUtilities.SetAllMultiplierCurves(TrailManager,UnityEngine.AnimationCurve)">
            <summary>
            Sets the pitch, roll, and yaw multipliers of a given TrailManager to a single value.
            </summary>
            <param name="trailManager">The TrailManager to modify.</param>
            <param name="curve">The curve to assign to each field.</param>
            <returns>The same TrailManager (for fluent code).</returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute">
            <summary>
            Indicates the type of the async method builder that should be used by a language compiler to
            build the attributed async method or to build the attributed type when used as the return type
            of an async method.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.#ctor(System.Type)">
            <summary>Initializes the <see cref="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute"/>.</summary>
            <param name="builderType">The <see cref="T:System.Type"/> of the associated builder.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.BuilderType">
            <summary>Gets the <see cref="T:System.Type"/> of the associated builder.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            An attribute that allows parameters to receive the expression of other parameters.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/> class.
            </summary>
            <param name="parameterName">The condition parameter value.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
            Gets the parameter name the expression is retrieved from.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/> type.
            </summary>
            <param name="featureName">The name of the feature to indicate.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>
            Gets the names of the arguments that should be passed to the handler.
            </summary>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>
            Indicates the attributed type is to be used as an interpolated string handler.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
             <summary>
             Used to indicate to the compiler that a method should be called
             in its containing module's initializer.
             </summary>
             <remarks>
             When one or more valid methods
             with this attribute are found in a compilation, the compiler will
             emit a module initializer which calls each of the attributed methods.
            
             Certain requirements are imposed on any method targeted with this attribute:
             - The method must be `static`.
             - The method must be an ordinary member method, as opposed to a property accessor, constructor, local function, etc.
             - The method must be parameterless.
             - The method must return `void`.
             - The method must not be generic or be contained in a generic type.
             - The method's effective accessibility must be `internal` or `public`.
            
             The specification for module initializers in the .NET runtime can be found here:
             https://github.com/dotnet/runtime/blob/main/docs/design/specs/Ecma-335-Augments.md#module-initializer
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>
            Specifies that a type has required members or that a member is required.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c> flag should not be set in method headers.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class with the specified message.
            </summary>
            <param name="message">An optional message associated with this attribute instance.</param>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Message">
            <summary>
            Returns the optional message associated with this attribute instance.
            </summary>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Url">
            <summary>
            Returns the optional URL associated with this attribute instance.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>
            Specifies that null is allowed as an input even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>
            Specifies that null is disallowed as an input even if the corresponding type allows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>
            Applied to a method that will never return under any circumstance.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
            Specifies that the method will not return if the associated Boolean parameter is passed the specified value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified parameter value.
            </summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable
            by diagnostics if the argument to the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
            Gets the condition parameter value.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>
            Specifies that an output may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter may be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members have not-null values.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with a field or property member.
            </summary>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes the attribute with the list of field and property members.
            </summary>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property
            members have not-null values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes the attribute with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes the attribute with the specified return value condition and list of field and property members.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
            Specifies that an output will not be null even if the corresponding type allows it.
            Specifies that an input argument was not null when the call returns.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>
            Specifies that the output will be non-null if the named parameter is non-null.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with the associated parameter name.
            </summary>
            <param name="parameterName">The associated parameter name. The output will be non-null if the argument to the parameter specified is non-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>
            Gets the associated parameter name.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type,
            and callers do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Specifies the syntax used in a string.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>
            Used to indicate a byref escapes and is not scoped.
            </summary>
            <remarks>
            <para>
            There are several cases where the C# compiler treats a <see langword="ref"/> as implicitly
            <see langword="scoped"/> - where the compiler does not allow the <see langword="ref"/> to escape the method.
            </para>
            <para>
            For example:
            <list type="number">
                <item><see langword="this"/> for <see langword="struct"/> instance methods.</item>
                <item><see langword="ref"/> parameters that refer to <see langword="ref"/> <see langword="struct"/> types.</item>
                <item><see langword="out"/> parameters.</item>
            </list>
            </para>
            <para>
            This attribute is used in those instances where the <see langword="ref"/> should be allowed to escape.
            </para>
            <para>
            Applying this attribute, in any form, has impact on consumers of the applicable API. It is necessary for
            API authors to understand the lifetime implications of applying this attribute and how it may impact their users.
            </para>
            </remarks>
        </member>
        <member name="T:System.Index">
            <summary>Represent a type can be used to index a collection either from the start or the end.</summary>
            <remarks>
            Index is used by the C# compiler to support the new index syntax
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ;
            int lastElement = someArray[^1]; // lastElement = 5
            </code>
            </remarks>
        </member>
        <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
            <summary>Construct an Index using a value and indicating if the index is from the start or from the end.</summary>
            <param name="value">The index value. it has to be zero or positive number.</param>
            <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
            <remarks>
            If the Index constructed from the end, index value 1 means pointing at the last element and index value 0 means pointing at beyond last element.
            </remarks>
        </member>
        <member name="P:System.Index.Start">
            <summary>Create an Index pointing at first element.</summary>
        </member>
        <member name="P:System.Index.End">
            <summary>Create an Index pointing at beyond last element.</summary>
        </member>
        <member name="M:System.Index.FromStart(System.Int32)">
            <summary>Create an Index from the start at the position indicated by the value.</summary>
            <param name="value">The index value from the start.</param>
        </member>
        <member name="M:System.Index.FromEnd(System.Int32)">
            <summary>Create an Index from the end at the position indicated by the value.</summary>
            <param name="value">The index value from the end.</param>
        </member>
        <member name="P:System.Index.Value">
            <summary>Returns the index value.</summary>
        </member>
        <member name="P:System.Index.IsFromEnd">
            <summary>Indicates whether the index is from the start or the end.</summary>
        </member>
        <member name="M:System.Index.GetOffset(System.Int32)">
            <summary>Calculate the offset from the start using the giving collection length.</summary>
            <param name="length">The length of the collection that the Index will be used with. length has to be a positive value</param>
            <remarks>
            For performance reason, we don't validate the input length parameter and the returned offset value against negative values.
            we don't validate either the returned offset is greater than the input length.
            It is expected Index will be used with collections which always have non negative length/count. If the returned offset is negative and
            then used to index a collection will get out of range exception which will be same affect as the validation.
            </remarks>
        </member>
        <member name="M:System.Index.Equals(System.Object)">
            <summary>Indicates whether the current Index object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.Equals(System.Index)">
            <summary>Indicates whether the current Index object is equal to another Index object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
            <summary>Converts integer number to an Index.</summary>
        </member>
        <member name="M:System.Index.ToString">
            <summary>Converts the value of the current Index object to its equivalent string representation.</summary>
        </member>
        <member name="T:System.Range">
            <summary>Represent a range has start and end indexes.</summary>
            <remarks>
            Range is used by the C# compiler to support the range syntax.
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 };
            int[] subArray1 = someArray[0..2]; // { 1, 2 }
            int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 }
            </code>
            </remarks>
        </member>
        <member name="P:System.Range.Start">
            <summary>Represent the inclusive start index of the Range.</summary>
        </member>
        <member name="P:System.Range.End">
            <summary>Represent the exclusive end index of the Range.</summary>
        </member>
        <member name="M:System.Range.#ctor(System.Index,System.Index)">
            <summary>Construct a Range object using the start and end indexes.</summary>
            <param name="start">Represent the inclusive start index of the range.</param>
            <param name="end">Represent the exclusive end index of the range.</param>
        </member>
        <member name="M:System.Range.Equals(System.Object)">
            <summary>Indicates whether the current Range object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.Equals(System.Range)">
            <summary>Indicates whether the current Range object is equal to another Range object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Range.ToString">
            <summary>Converts the value of the current Range object to its equivalent string representation.</summary>
        </member>
        <member name="M:System.Range.StartAt(System.Index)">
            <summary>Create a Range object starting from start index to the end of the collection.</summary>
        </member>
        <member name="M:System.Range.EndAt(System.Index)">
            <summary>Create a Range object starting from first element in the collection to the end Index.</summary>
        </member>
        <member name="P:System.Range.All">
            <summary>Create a Range object starting from first element to the end.</summary>
        </member>
        <member name="M:System.Range.GetOffsetAndLength(System.Int32)">
            <summary>Calculate the start offset and length of range object using a collection length.</summary>
            <param name="length">The length of the collection that the range will be used with. length has to be a positive value.</param>
            <remarks>
            For performance reason, we don't validate the input length parameter against negative values.
            It is expected Range will be used with collections which always have non negative length/count.
            We validate the range is inside the length scope though.
            </remarks>
        </member>
    </members>
</doc>
