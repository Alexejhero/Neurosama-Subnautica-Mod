<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nautilus</name>
    </assembly>
    <members>
        <member name="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute">
            <summary>
            Indicates the type of the async method builder that should be used by a language compiler to
            build the attributed async method or to build the attributed type when used as the return type
            of an async method.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.#ctor(System.Type)">
            <summary>Initializes the <see cref="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute"/>.</summary>
            <param name="builderType">The <see cref="T:System.Type"/> of the associated builder.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.BuilderType">
            <summary>Gets the <see cref="T:System.Type"/> of the associated builder.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            An attribute that allows parameters to receive the expression of other parameters.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/> class.
            </summary>
            <param name="parameterName">The condition parameter value.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
            Gets the parameter name the expression is retrieved from.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/> type.
            </summary>
            <param name="featureName">The name of the feature to indicate.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>
            Gets the names of the arguments that should be passed to the handler.
            </summary>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>
            Indicates the attributed type is to be used as an interpolated string handler.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
             <summary>
             Used to indicate to the compiler that a method should be called
             in its containing module's initializer.
             </summary>
             <remarks>
             When one or more valid methods
             with this attribute are found in a compilation, the compiler will
             emit a module initializer which calls each of the attributed methods.
            
             Certain requirements are imposed on any method targeted with this attribute:
             - The method must be `static`.
             - The method must be an ordinary member method, as opposed to a property accessor, constructor, local function, etc.
             - The method must be parameterless.
             - The method must return `void`.
             - The method must not be generic or be contained in a generic type.
             - The method's effective accessibility must be `internal` or `public`.
            
             The specification for module initializers in the .NET runtime can be found here:
             https://github.com/dotnet/runtime/blob/main/docs/design/specs/Ecma-335-Augments.md#module-initializer
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>
            Specifies that a type has required members or that a member is required.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c> flag should not be set in method headers.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class with the specified message.
            </summary>
            <param name="message">An optional message associated with this attribute instance.</param>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Message">
            <summary>
            Returns the optional message associated with this attribute instance.
            </summary>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Url">
            <summary>
            Returns the optional URL associated with this attribute instance.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>
            Specifies that null is disallowed as an input even if the corresponding type allows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>
            Applied to a method that will never return under any circumstance.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter may be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members have not-null values.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with a field or property member.
            </summary>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes the attribute with the list of field and property members.
            </summary>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property
            members have not-null values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes the attribute with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes the attribute with the specified return value condition and list of field and property members.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>
            Specifies that the output will be non-null if the named parameter is non-null.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with the associated parameter name.
            </summary>
            <param name="parameterName">The associated parameter name. The output will be non-null if the argument to the parameter specified is non-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>
            Gets the associated parameter name.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type,
            and callers do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Specifies the syntax used in a string.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>
            Used to indicate a byref escapes and is not scoped.
            </summary>
            <remarks>
            <para>
            There are several cases where the C# compiler treats a <see langword="ref"/> as implicitly
            <see langword="scoped"/> - where the compiler does not allow the <see langword="ref"/> to escape the method.
            </para>
            <para>
            For example:
            <list type="number">
                <item><see langword="this"/> for <see langword="struct"/> instance methods.</item>
                <item><see langword="ref"/> parameters that refer to <see langword="ref"/> <see langword="struct"/> types.</item>
                <item><see langword="out"/> parameters.</item>
            </list>
            </para>
            <para>
            This attribute is used in those instances where the <see langword="ref"/> should be allowed to escape.
            </para>
            <para>
            Applying this attribute, in any form, has impact on consumers of the applicable API. It is necessary for
            API authors to understand the lifetime implications of applying this attribute and how it may impact their users.
            </para>
            </remarks>
        </member>
        <member name="T:System.Index">
            <summary>Represent a type can be used to index a collection either from the start or the end.</summary>
            <remarks>
            Index is used by the C# compiler to support the new index syntax
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ;
            int lastElement = someArray[^1]; // lastElement = 5
            </code>
            </remarks>
        </member>
        <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
            <summary>Construct an Index using a value and indicating if the index is from the start or from the end.</summary>
            <param name="value">The index value. it has to be zero or positive number.</param>
            <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
            <remarks>
            If the Index constructed from the end, index value 1 means pointing at the last element and index value 0 means pointing at beyond last element.
            </remarks>
        </member>
        <member name="P:System.Index.Start">
            <summary>Create an Index pointing at first element.</summary>
        </member>
        <member name="P:System.Index.End">
            <summary>Create an Index pointing at beyond last element.</summary>
        </member>
        <member name="M:System.Index.FromStart(System.Int32)">
            <summary>Create an Index from the start at the position indicated by the value.</summary>
            <param name="value">The index value from the start.</param>
        </member>
        <member name="M:System.Index.FromEnd(System.Int32)">
            <summary>Create an Index from the end at the position indicated by the value.</summary>
            <param name="value">The index value from the end.</param>
        </member>
        <member name="P:System.Index.Value">
            <summary>Returns the index value.</summary>
        </member>
        <member name="P:System.Index.IsFromEnd">
            <summary>Indicates whether the index is from the start or the end.</summary>
        </member>
        <member name="M:System.Index.GetOffset(System.Int32)">
            <summary>Calculate the offset from the start using the giving collection length.</summary>
            <param name="length">The length of the collection that the Index will be used with. length has to be a positive value</param>
            <remarks>
            For performance reason, we don't validate the input length parameter and the returned offset value against negative values.
            we don't validate either the returned offset is greater than the input length.
            It is expected Index will be used with collections which always have non negative length/count. If the returned offset is negative and
            then used to index a collection will get out of range exception which will be same affect as the validation.
            </remarks>
        </member>
        <member name="M:System.Index.Equals(System.Object)">
            <summary>Indicates whether the current Index object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.Equals(System.Index)">
            <summary>Indicates whether the current Index object is equal to another Index object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
            <summary>Converts integer number to an Index.</summary>
        </member>
        <member name="M:System.Index.ToString">
            <summary>Converts the value of the current Index object to its equivalent string representation.</summary>
        </member>
        <member name="T:System.Range">
            <summary>Represent a range has start and end indexes.</summary>
            <remarks>
            Range is used by the C# compiler to support the range syntax.
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 };
            int[] subArray1 = someArray[0..2]; // { 1, 2 }
            int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 }
            </code>
            </remarks>
        </member>
        <member name="P:System.Range.Start">
            <summary>Represent the inclusive start index of the Range.</summary>
        </member>
        <member name="P:System.Range.End">
            <summary>Represent the exclusive end index of the Range.</summary>
        </member>
        <member name="M:System.Range.#ctor(System.Index,System.Index)">
            <summary>Construct a Range object using the start and end indexes.</summary>
            <param name="start">Represent the inclusive start index of the range.</param>
            <param name="end">Represent the exclusive end index of the range.</param>
        </member>
        <member name="M:System.Range.Equals(System.Object)">
            <summary>Indicates whether the current Range object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.Equals(System.Range)">
            <summary>Indicates whether the current Range object is equal to another Range object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Range.ToString">
            <summary>Converts the value of the current Range object to its equivalent string representation.</summary>
        </member>
        <member name="M:System.Range.StartAt(System.Index)">
            <summary>Create a Range object starting from start index to the end of the collection.</summary>
        </member>
        <member name="M:System.Range.EndAt(System.Index)">
            <summary>Create a Range object starting from first element in the collection to the end Index.</summary>
        </member>
        <member name="P:System.Range.All">
            <summary>Create a Range object starting from first element to the end.</summary>
        </member>
        <member name="M:System.Range.GetOffsetAndLength(System.Int32)">
            <summary>Calculate the start offset and length of range object using a collection length.</summary>
            <param name="length">The length of the collection that the range will be used with. length has to be a positive value.</param>
            <remarks>
            For performance reason, we don't validate the input length parameter against negative values.
            It is expected Range will be used with collections which always have non negative length/count.
            We validate the range is inside the length scope though.
            </remarks>
        </member>
        <member name="T:Nautilus.Assets.CustomModelData">
            <summary>
            Custom Model data that Nautilus will use to apply custom looks to certain prefabs.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.CustomModelData.TargetPath">
            <summary>
            Name of the model to target with these changes.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.CustomModelData.CustomTexture">
            <summary>
            The custom skin for the item.<br/>
            This property is optional and will default to the standard texture for batteries or power cells.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.CustomModelData.CustomNormalMap">
            <summary>
            The custom bump texture for the item.<br/>
            This property is optional and will default to the standard bump texture for batteries or power cells.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.CustomModelData.CustomSpecMap">
            <summary>
            The custom Spec Texture for the item.<br/>
            This property is optional and will default to the standard spec texture for batteries or power cells.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.CustomModelData.CustomIllumMap">
            <summary>
            The custom lighting texture for the item.<br/>
            This property is optional and will default to the standard illum texture for batteries or power cells.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.CustomModelData.CustomIllumStrength">
            <summary>
            The custom lighting strength for the item.<br/>
            This property is will default to 1.0f if the <see cref="P:Nautilus.Assets.CustomModelData.CustomIllumMap"/> is set but will use the default value for batteries or power cells if no <see cref="P:Nautilus.Assets.CustomModelData.CustomIllumMap"/> is set.
            </summary>
        </member>
        <member name="T:Nautilus.Assets.CustomModelData.Targets">
            <summary>
            A class with some common target names
            </summary>
        </member>
        <member name="T:Nautilus.Assets.PrefabFactoryAsync">
            <summary>
            A delegate for prefab construction used by Nautilus to create game objects dynamically.
            </summary>
        </member>
        <member name="T:Nautilus.Assets.PrefabPostProcessorAsync">
            <summary>
            Delegate used for Nautilus's prefab post processing event to modify the processed prefab via a dynamic method.
            </summary>
        </member>
        <member name="T:Nautilus.Assets.ICustomPrefab">
            <summary>
            Specifies the contract for a custom prefab.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.ICustomPrefab.Info">
            <summary>
            The prefab info for this custom prefab.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.ICustomPrefab.Prefab">
            <summary>
            Function which constructs a game object for this prefab.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.ICustomPrefab.OnPrefabPostProcess">
            <summary>
            Function that will be executed after the Nautilus's basic processing for <see cref="P:Nautilus.Assets.ICustomPrefab.Prefab"/> has been completed.
            </summary>
        </member>
        <member name="M:Nautilus.Assets.ICustomPrefab.AddGadget``1(``0)">
            <summary>
            Adds a gadget to this custom prefab. A prefab can only hold one Gadget of any given type.
            </summary>
            <param name="gadget">The gadget to add</param>
            <typeparam name="TGadget">Type of the gadget.</typeparam>
            <returns>A reference to the added gadget.</returns>
            <exception cref="T:Nautilus.Assets.Gadgets.DuplicateGadgetException">When a Gadget of the given type already exists.</exception>
        </member>
        <member name="M:Nautilus.Assets.ICustomPrefab.GetGadget(System.Type)">
            <summary>
            Gets the gadget instance associated with the specified gadget type attached to this custom prefab.
            </summary>
            <param name="gadgetType">The type of the gadget to get.</param>
            <returns>The gadget instance if found, otherwise; <c>null</c>.</returns>
        </member>
        <member name="M:Nautilus.Assets.ICustomPrefab.GetGadget``1">
            <summary>
            Gets the gadget instance associated with the specified gadget type attached to this custom prefab.
            </summary>
            <typeparam name="TGadget">The type of the gadget to get.</typeparam>
            <returns>The gadget instance if found, otherwise; <c>null</c>.</returns>
        </member>
        <member name="M:Nautilus.Assets.ICustomPrefab.TryGetGadget``1(``0@)">
            <summary>
            Gets the gadget instance associated with the specified gadget type attached to this custom prefab.
            </summary>
            <param name="gadget">The instance of the gadget found associated with the type. If not found, this will be <c>null</c> instead.</param>
            <typeparam name="TGadget">The type of the gadget to get.</typeparam>
            <returns><see langword="true"/> if the gadget associated with type was found, otherwise; <see langword="false"/>.</returns>
        </member>
        <member name="M:Nautilus.Assets.ICustomPrefab.TryAddGadget``1(``0)">
            <summary>
            Attempts to add the given gadget if there is not already an existing gadget of the same type.
            </summary>
            <typeparam name="TGadget">The type of the gadget that may be added.</typeparam>
            <param name="gadget">The gadget that may be added, assuming the same type of gadget does not already exist on the prefab.</param>
            <returns>True if the gadget was added, false if an instance of the same gadget type already exists on the prefab.</returns>
        </member>
        <member name="M:Nautilus.Assets.ICustomPrefab.RemoveGadget(System.Type)">
            <summary>
            Removes the gadget with the specified type.
            </summary>
            <param name="gadget">The type of the gadget to remove.</param>
            <returns><see langword="true"/> if the gadget was successfully found and removed, otherwise; <see langword="false"/>.<br/>
            This method returns <see langword="false"/> if the gadget type was not found in this custom prefab.</returns>
        </member>
        <member name="M:Nautilus.Assets.ICustomPrefab.RemoveGadget``1">
            <summary>
            Removes the gadget with the specified type.
            </summary>
            <typeparam name="TGadget">The type of the gadget to remove.</typeparam>
            <returns><see langword="true"/> if the gadget was successfully found and removed, otherwise; <see langword="false"/>.<br/>
            This method returns <see langword="false"/> if the gadget type was not found in this custom prefab.</returns>
        </member>
        <member name="M:Nautilus.Assets.ICustomPrefab.AddOnRegister(System.Action)">
            <summary>
            Adds an action that will be called during the registration of the prefab.
            </summary>
            <param name="onRegisterCallback">The action that will be called.</param>
        </member>
        <member name="M:Nautilus.Assets.ICustomPrefab.AddOnUnregister(System.Action)">
            <summary>
            Adds an action that will be called when this prefab has performed an unregister operation.
            </summary>
            <param name="onUnregisterCallback">The action that will be called.</param>
        </member>
        <member name="T:Nautilus.Assets.CustomPrefab">
            <summary>
            Represents a class with everything needed to make a custom prefab work.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.CustomPrefab.Info">
            <inheritdoc/>
        </member>
        <member name="P:Nautilus.Assets.CustomPrefab.Prefab">
            <inheritdoc/>
        </member>
        <member name="P:Nautilus.Assets.CustomPrefab.OnPrefabPostProcess">
            <inheritdoc/>
        </member>
        <member name="M:Nautilus.Assets.CustomPrefab.#ctor">
            <summary>
            Constructs a custom prefab object.
            </summary>
        </member>
        <member name="M:Nautilus.Assets.CustomPrefab.#ctor(Nautilus.Assets.PrefabInfo)">
            <summary>
            Constructs a custom prefab object.
            </summary>
            <param name="info">The information this prefab will be registered as.</param>
        </member>
        <member name="M:Nautilus.Assets.CustomPrefab.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructs a custom prefab object with the <see cref="P:Nautilus.Assets.CustomPrefab.Info"/> assigned appropriately.
            </summary>
            <param name="classId">The class identifier used for the PrefabIdentifier component whenever applicable.</param>
            <param name="displayName">The display name for this item.</param>
            <param name="description">The description for this item.</param>
        </member>
        <member name="M:Nautilus.Assets.CustomPrefab.#ctor(System.String,System.String,System.String,Atlas.Sprite)">
            <summary>
            Constructs a custom prefab object with the <see cref="P:Nautilus.Assets.CustomPrefab.Info"/> assigned appropriately.
            </summary>
            <param name="classId">The class identifier used for the PrefabIdentifier component whenever applicable.</param>
            <param name="displayName">The display name for this item.</param>
            <param name="description">The description for this item.</param>
            <param name="icon">The icon for this item.</param>
        </member>
        <member name="M:Nautilus.Assets.CustomPrefab.#ctor(System.String,System.String,System.String,UnityEngine.Sprite)">
            <summary>
            Constructs a custom prefab object with the <see cref="P:Nautilus.Assets.CustomPrefab.Info"/> assigned appropriately.
            </summary>
            <param name="classId">The class identifier used for the PrefabIdentifier component whenever applicable.</param>
            <param name="displayName">The display name for this item.</param>
            <param name="description">The description for this item.</param>
            <param name="icon">The icon for this item.</param>
        </member>
        <member name="M:Nautilus.Assets.CustomPrefab.AddGadget``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Nautilus.Assets.CustomPrefab.GetGadget(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Nautilus.Assets.CustomPrefab.GetGadget``1">
            <inheritdoc/>
        </member>
        <member name="M:Nautilus.Assets.CustomPrefab.TryGetGadget``1(``0@)">
            <inheritdoc/>
        </member>
        <member name="M:Nautilus.Assets.CustomPrefab.TryAddGadget``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Nautilus.Assets.CustomPrefab.RemoveGadget(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Nautilus.Assets.CustomPrefab.RemoveGadget``1">
            <inheritdoc/>
        </member>
        <member name="M:Nautilus.Assets.CustomPrefab.AddOnRegister(System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:Nautilus.Assets.CustomPrefab.AddOnUnregister(System.Action)">
            <inheritdoc/>
        </member>
        <member name="M:Nautilus.Assets.CustomPrefab.SetGameObject(System.Func{IOut{UnityEngine.GameObject},System.Collections.IEnumerator})">
            <summary>
            Sets a function as the game object constructor of this custom prefab. This is an asynchronous version.
            </summary>
            <param name="prefabAsync">The function to set.</param>
        </member>
        <member name="M:Nautilus.Assets.CustomPrefab.SetGameObject(Nautilus.Assets.PrefabTemplates.PrefabTemplate)">
            <summary>
            Sets a prefab template as the game object constructor of this custom prefab.
            </summary>
            <param name="prefabTemplate">The prefab template object to set.</param>
        </member>
        <member name="M:Nautilus.Assets.CustomPrefab.SetGameObject(UnityEngine.GameObject)">
            <summary>
            Sets a game object as the prefab of this custom prefab.
            </summary>
            <remarks>Only use this overload on GameObjects that are loaded from asset bundles <b>without</b> instantiating them. For objects that could be destroyed on scene load, use <see cref="M:Nautilus.Assets.CustomPrefab.SetGameObject(System.Func{UnityEngine.GameObject})"/> instead.</remarks>
            <param name="prefab">The game object to set.</param>
        </member>
        <member name="M:Nautilus.Assets.CustomPrefab.SetGameObject(System.Func{UnityEngine.GameObject})">
            <summary>
            Sets a function as the game object constructor of this custom prefab. This is a synchronous version.
            </summary>
            <param name="prefab">The function to set.</param>
        </member>
        <member name="M:Nautilus.Assets.CustomPrefab.SetPrefabPostProcessor(System.Func{UnityEngine.GameObject,System.Collections.IEnumerator})">
            <summary>
            Sets a post processor for the <see cref="P:Nautilus.Assets.CustomPrefab.Prefab"/>. This is an asynchronous version.
            </summary>
            <param name="postProcessorAsync">The post processor to set.</param>
        </member>
        <member name="M:Nautilus.Assets.CustomPrefab.SetPrefabPostProcessor(System.Action{UnityEngine.GameObject})">
            <summary>
            Sets a post processor for the <see cref="P:Nautilus.Assets.CustomPrefab.Prefab"/>. This is a synchronous version.
            </summary>
            <param name="postProcessor">The post processor to set.</param>
        </member>
        <member name="M:Nautilus.Assets.CustomPrefab.Register">
            <summary>
            Registers this custom prefab into the game.
            </summary>
        </member>
        <member name="M:Nautilus.Assets.CustomPrefab.Unregister">
            <summary>
            Unregisters this custom prefab from the game.
            </summary>
            <remarks>The class ID reference will be completely erased, however, the TechType instance will remain in the game.</remarks>
        </member>
        <member name="T:Nautilus.Assets.Gadgets.CraftingGadget">
            <summary>
            Represents a crafting gadget
            </summary>
        </member>
        <member name="P:Nautilus.Assets.Gadgets.CraftingGadget.RecipeData">
            <summary>
            The crafting recipe to add.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.Gadgets.CraftingGadget.FabricatorType">
            <summary>
            Craft Tree this node will appear in.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.Gadgets.CraftingGadget.StepsToFabricatorTab">
            <summary>
            The steps to get to a tab you want this node to appear in.<br/>
            If null or empty, it will instead appear at the craft tree's root.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.Gadgets.CraftingGadget.CraftingTime">
            <summary>
            The amount of seconds it takes to craft this item.
            Values equal to or less than zero will be ignored.
            </summary>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.CraftingGadget.#ctor(Nautilus.Assets.ICustomPrefab,Nautilus.Crafting.RecipeData)">
            <summary>
            Constructs a crafting gadget.
            </summary>
            <param name="prefab">The custom prefab to operate on.</param>
            <param name="recipeData">The crafting recipe to add.</param>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.CraftingGadget.WithFabricatorType(CraftTree.Type)">
            <summary>
            Adds this prefab to a CraftTree type.
            </summary>
            <param name="fabricatorType">The craft tree type to add this crafting node to.</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.CraftingGadget.WithStepsToFabricatorTab(System.String[])">
            <summary>
            Adds this node to a specific tab you want it to appear in.
            </summary>
            <param name="stepsToFabricator">The steps required to get to the tab in question. See <see href="https://subnauticamodding.github.io/Nautilus/tutorials/craft-tree-paths.html"/> or the <see cref="T:Nautilus.Handlers.CraftTreeHandler.Paths"/> class for examples of valid parameters.<br/>
            If null, it will appear at the craft tree's root.</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.CraftingGadget.WithCraftingTime(System.Single)">
            <summary>
            The amount of seconds it takes to craft this item.
            Values equal to or less than zero will be ignored.
            </summary>
            <param name="craftingTime">Amount of seconds</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.CraftingGadget.Build">
            <inheritdoc/>
        </member>
        <member name="T:Nautilus.Assets.Gadgets.DuplicateGadgetException">
            <summary>
            The exception that is thrown when a <see cref="T:Nautilus.Assets.Gadgets.Gadget"/> is attempted to be added when an existing one of the same type already exists.
            </summary>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.DuplicateGadgetException.#ctor(System.String,Nautilus.Assets.Gadgets.Gadget)">
            <summary>
            Initializes a new instance of the <see cref="T:Nautilus.Assets.Gadgets.DuplicateGadgetException"/> class with default properties.
            </summary>
            <param name="classId">ClassID of the Prefab, otherwise should be labeled "Uninitialized". For debugging purposes.</param>
            <param name="duplicateGadget">The Gadget that cannot be added.</param>
        </member>
        <member name="T:Nautilus.Assets.Gadgets.EggGadget">
            <summary>
            Represents a creature egg gadget.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.Gadgets.EggGadget.RequiredAcuSize">
            <summary>
            The total amount of ACU floors required for the egg to be dropped in the ACU. defaulted to 1.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.Gadgets.EggGadget.AcidImmune">
            <summary>
            makes the egg immune to the Lost River's Acidic Brine.
            </summary>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.EggGadget.#ctor(Nautilus.Assets.ICustomPrefab,System.Int32)">
            <summary>
            Constructs a Creature egg gadget instance.
            </summary>
            <param name="prefab">The custom prefab to operate on.</param>
            <param name="requiredAcuSize">The total amount of ACU floors required for the egg to be dropped in the ACU.</param>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.EggGadget.WithRequiredAcuSize(System.Int32)">
            <summary>
            The total amount of ACU floors required for the egg to be dropped in the ACU.
            </summary>
            <param name="requiredAcuSize">The ACU stacks value.</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.EggGadget.SetAcidImmune(System.Boolean)">
            <summary>
             makes the egg immune to the Lost River's Acidic Brine.
            </summary>
            <param name="isAcidImmune">Should this item be acid immune?</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.EggGadget.Build">
            <inheritdoc/>
        </member>
        <member name="T:Nautilus.Assets.Gadgets.EquipmentGadget">
            <summary>
            Represents an equipment gadget
            </summary>
        </member>
        <member name="P:Nautilus.Assets.Gadgets.EquipmentGadget.EquipmentType">
            <summary>
            The type of equipment slot this item can fit into.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.Gadgets.EquipmentGadget.QuickSlotType">
            <summary>
            The way the game should treat this item as when in a quick slot.
            </summary>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.EquipmentGadget.#ctor(Nautilus.Assets.ICustomPrefab)">
            <summary>
            Constructs an equipment gadget.
            </summary>
            <param name="prefab"><inheritdoc cref="M:Nautilus.Assets.Gadgets.Gadget.#ctor(Nautilus.Assets.ICustomPrefab)"/></param>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.EquipmentGadget.#ctor(Nautilus.Assets.ICustomPrefab,EquipmentType)">
            <summary>
            Constructs an equipment gadget.
            </summary>
            <param name="prefab">The custom prefab to operate on.</param>
            <param name="equipmentType">The type of equipment slot this item can fit into.</param>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.EquipmentGadget.WithQuickSlotType(QuickSlotType)">
            <summary>
            Sets the way the game should treat this item as when in a quick slot.
            </summary>
            <param name="quickSlotType">The quick slot type</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.EquipmentGadget.Build">
            <inheritdoc/>
        </member>
        <member name="T:Nautilus.Assets.Gadgets.FabricatorGadget">
            <summary>
            Represents a craft tree/fabricator gadget.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.Gadgets.FabricatorGadget.CraftTreeType">
            <summary>
            The ID value for your custom craft tree.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.Gadgets.FabricatorGadget.Root">
            <summary>
             The root node of the crafting tree.
            </summary>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.FabricatorGadget.#ctor(Nautilus.Assets.ICustomPrefab)">
            <summary>
            Constructs a fabricator gadget.
            </summary>
            <param name="prefab"><inheritdoc cref="M:Nautilus.Assets.Gadgets.Gadget.#ctor(Nautilus.Assets.ICustomPrefab)"/></param>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.FabricatorGadget.AddTabNode(System.String,System.String,Atlas.Sprite,System.String,System.String)">
            <summary>
            Adds a new tab node to the custom crafting tree of this fabricator.
            </summary>
            <param name="tabId">The internal ID for the tab node.</param>
            <param name="displayText">The in-game text shown for the tab node. If null or empty, this will use the language line "{CraftTreeTypeName}_{<paramref name="tabId"/>}" instead.</param>
            <param name="tabIcon">The sprite used for the tab node.</param>
            <param name="language">The language for the display name. Defaults to English.</param>
            <param name="parentTabId">Optional. The parent tab of this tab.
            When this value is null, the tab will be added to the root of the craft tree.</param>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.FabricatorGadget.AddCraftNode(TechType,System.String)">
            <summary>
            Adds a new crafting node to the custom crafting tree of this fabricator.
            </summary>
            <param name="techType">The item to craft.</param>
            <param name="parentTabId">Optional. The parent tab of this craft node.<para/>
            When this value is null, the craft node will be added to the root of the craft tree.</param>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.FabricatorGadget.AddCraftNode(System.String,System.String)">
            <summary>
            Safely attempts to add a new crafting node to the custom crafting tree of this fabricator.<para/>
            If the modded TechType is not found, the craft node will not be added.
            </summary>
            <param name="moddedTechType">The modded item to craft.</param>
            <param name="parentTabId">Optional. The parent tab of this craft node.<para/>
            When this value is null, the craft node will be added to the root of the craft tree.</param>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.FabricatorGadget.Build">
            <inheritdoc/>
        </member>
        <member name="T:Nautilus.Assets.Gadgets.Gadget">
            <summary>
            Represents a class that handles registers to game code.
            </summary>
        </member>
        <member name="F:Nautilus.Assets.Gadgets.Gadget.prefab">
            <summary>
            The custom prefab to operate on
            </summary>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.Gadget.#ctor(Nautilus.Assets.ICustomPrefab)">
            <summary>
            Constructs a gadget instance.
            </summary>
            <param name="prefab">The custom prefab to operate on.</param>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.Gadget.Build">
            <summary>
            Where the data actually gets registered to the game.<br/>
            This is called after prefab register and PostRegisters in <see cref="M:Nautilus.Assets.CustomPrefab.Register"/>.
            </summary>
        </member>
        <member name="T:Nautilus.Assets.Gadgets.GadgetExtensions">
            <summary>
            Represents extension methods for the <see cref="T:Nautilus.Assets.Gadgets.Gadget"/> class.
            </summary>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.GadgetExtensions.SetRecipe(Nautilus.Assets.ICustomPrefab,Nautilus.Crafting.RecipeData)">
            <summary>
            Adds recipe to this custom prefab.
            </summary>
            <param name="customPrefab">The custom prefab to add recipe to.</param>
            <param name="recipeData">The recipe to add.</param>
            <returns>A reference to the created <see cref="T:Nautilus.Assets.Gadgets.CraftingGadget"/> to continue the recipe settings on.</returns>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.GadgetExtensions.SetRecipeFromJson(Nautilus.Assets.ICustomPrefab,System.String)">
            <summary>
            Adds recipe from a json file to this custom prefab.
            </summary>
            <param name="customPrefab">The custom prefab to add recipe to.</param>
            <param name="filePath">The path to the recipe json file. A string with valid recipe data json is also acceptable.</param>
            <returns>A reference to the created <see cref="T:Nautilus.Assets.Gadgets.CraftingGadget"/> to continue the recipe settings on.</returns>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.GadgetExtensions.SetUnlock(Nautilus.Assets.ICustomPrefab,TechType,System.Int32)">
            <summary>
            Adds unlocks to this custom prefab.
            </summary>
            <param name="customPrefab">The custom prefab to add unlocks to.</param>
            <param name="requiredForUnlock">The blueprint to set as a requirement.</param>
            <param name="fragmentsToScan">Amount of <paramref name="requiredForUnlock"/> that must be scanned to unlock this item.</param>
            <returns>A reference to the created <see cref="T:Nautilus.Assets.Gadgets.ScanningGadget"/> to continue the scanning settings on.</returns>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.GadgetExtensions.SetPdaGroupCategory(Nautilus.Assets.ICustomPrefab,TechGroup,TechCategory)">
            <summary>
            Adds this item into a blueprint category to appear in.
            </summary>
            <param name="customPrefab">The custom prefab to add unlocks to.</param>
            <param name="group">The main group in the PDA blueprints where this item appears</param>
            <param name="category">The category within the group in the PDA blueprints where this item appears.</param>
            <returns>A reference to the created <see cref="T:Nautilus.Assets.Gadgets.ScanningGadget"/> to continue the scanning settings on.</returns>
            <remarks>If the specified <paramref name="group"/> is a tech group that is present in the <see cref="F:uGUI_BuilderMenu.groups"/> list, this item will automatically
            become buildable. To avoid this, or make this item a buildable manually, use the <see cref="M:Nautilus.Assets.Gadgets.ScanningGadget.SetBuildable(System.Boolean)"/> method.</remarks>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.GadgetExtensions.SetPdaGroupCategoryAfter(Nautilus.Assets.ICustomPrefab,TechGroup,TechCategory,TechType)">
            <summary>
            Adds this item into a blueprint category to appear in.
            </summary>
            <param name="customPrefab">The custom prefab to add unlocks to.</param>
            <param name="group">The main group in the PDA blueprints where this item appears.</param>
            <param name="category">The category within the group in the PDA blueprints where this item appears.</param>
            <param name="target">It will be added after this target item or at the end if not found.</param>
            <returns>A reference to the created <see cref="T:Nautilus.Assets.Gadgets.ScanningGadget"/> to continue the scanning settings on.</returns>
            <remarks>If the specified <paramref name="group"/> is a tech group that is present in the <see cref="F:uGUI_BuilderMenu.groups"/> list, this item will automatically
            become buildable. To avoid this, or make this item a buildable manually, use the <see cref="M:Nautilus.Assets.Gadgets.ScanningGadget.SetBuildable(System.Boolean)"/> method.</remarks>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.GadgetExtensions.SetPdaGroupCategoryBefore(Nautilus.Assets.ICustomPrefab,TechGroup,TechCategory,TechType)">
            <summary>
            Adds this item into a blueprint category to appear in.
            </summary>
            <param name="customPrefab">The custom prefab to add unlocks to.</param>
            <param name="group">The main group in the PDA blueprints where this item appears.</param>
            <param name="category">The category within the group in the PDA blueprints where this item appears.</param>
            <param name="target">It will be inserted before this target item or at the beginning if not found.</param>
            <returns>A reference to the created <see cref="T:Nautilus.Assets.Gadgets.ScanningGadget"/> to continue the scanning settings on.</returns>
            <remarks>If the specified <paramref name="group"/> is a tech group that is present in the <see cref="F:uGUI_BuilderMenu.groups"/> list, this item will automatically
            become buildable. To avoid this, or make this item a buildable manually, use the <see cref="M:Nautilus.Assets.Gadgets.ScanningGadget.SetBuildable(System.Boolean)"/> method.</remarks>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.GadgetExtensions.SetEquipment(Nautilus.Assets.ICustomPrefab,EquipmentType)">
            <summary>
            Sets the type of equipment slot this item can fit into.
            </summary>
            <param name="customPrefab">The custom prefab to set equipment slot for.</param>
            <param name="equipmentType">The type of equipment slot this item can fit into.</param>
            <returns>A reference to the created <see cref="T:Nautilus.Assets.Gadgets.EquipmentGadget"/> to continue the equipment settings on.</returns>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.GadgetExtensions.SetVehicleUpgradeModule(Nautilus.Assets.ICustomPrefab,EquipmentType,QuickSlotType)">
            <summary>
            Sets this item as a vehicle upgrade module. Cyclops upgrades are not supported by this function.
            <para>If you're using this function, please do not use <see cref="M:Nautilus.Assets.Gadgets.GadgetExtensions.SetEquipment(Nautilus.Assets.ICustomPrefab,EquipmentType)"/>,<br/>
            it would interefere with this and possibly make the game crash or cause the mod to not work.</para>
            </summary>
            <param name="customPrefab">The custom prefab to set vehicle upgrade for.</param>
            <param name="equipmentType">The type of equipment slot this item can fit into. Preferably use something related to vehicles.</param>
            <param name="slotType">The quick slot type</param>
            <returns>A reference to the created <see cref="T:Nautilus.Assets.Gadgets.UpgradeModuleGadget"/> to continue the upgrade settings on.</returns>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.GadgetExtensions.CreateFabricator(Nautilus.Assets.ICustomPrefab,CraftTree.Type@)">
            <summary>
            Creates a craft tree for this prefab. The created craft tree is immediately returned after this method is executed. 
            </summary>
            <param name="customPrefab">The custom prefab to set equipment slot for.</param>
            <param name="treeType">The created custom craft tree type.</param>
            <returns>A reference to the created <see cref="T:Nautilus.Assets.Gadgets.FabricatorGadget"/> to continue the fabricator settings on.</returns>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.GadgetExtensions.SetSpawns(Nautilus.Assets.ICustomPrefab,Nautilus.Assets.SpawnLocation[])">
            <summary>
            Adds coordinated spawns for this custom prefab.
            </summary>
            <param name="customPrefab">The custom prefab to add coordinated spawns for.</param>
            <param name="spawnLocations">The spawn locations to spawn in.</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.GadgetExtensions.SetSpawns(Nautilus.Assets.ICustomPrefab,LootDistributionData.BiomeData[])">
            <summary>
            Adds biome spawns for this custom prefab with default <see cref="T:UWE.WorldEntityInfo"/> values.
            </summary>
            <param name="customPrefab">The custom prefab to add biome spawns for.</param>
            <param name="biomesToSpawnIn">The biomes to spawn in.</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.GadgetExtensions.SetSpawns(Nautilus.Assets.ICustomPrefab,UWE.WorldEntityInfo,LootDistributionData.BiomeData[])">
            <summary>
            Adds biome spawns for this custom prefab.
            </summary>
            <param name="customPrefab">The custom prefab to add biome spawns for.</param>
            <param name="entityInfo">Data on how the biome spawner should treat this object as.</param>
            <param name="biomesToSpawnIn">The biomes to spawn in.</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.GadgetExtensions.CreateCreatureEgg(Nautilus.Assets.ICustomPrefab,System.Int32)">
            <summary>
            Makes this item have additional creature-egg-related functionality.
            </summary>
            <param name="customPrefab">The custom prefab the creature egg gadget is created for.</param>
            <param name="requiredAcuSize">The total amount of ACU floors required for the egg to be dropped in the ACU.</param>
            <returns>A reference to the created <see cref="T:Nautilus.Assets.Gadgets.EggGadget"/> instance after the operation has completed.</returns>
        </member>
        <member name="T:Nautilus.Assets.Gadgets.ScanningGadget">
            <summary>
            Represents a scanning gadget.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.Gadgets.ScanningGadget.RequiredForUnlock">
            <summary>
            The blueprint that must first be scanned or picked up to unlocked this item.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.Gadgets.ScanningGadget.CompoundTechsForUnlock">
            <summary>
            Multiple blueprints that must first be scanned or picked up to unlocked this item.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.Gadgets.ScanningGadget.FragmentsToScan">
            <summary>
            Amount of <see cref="P:Nautilus.Assets.Gadgets.ScanningGadget.RequiredForUnlock"/> that must be scanned to unlock this item.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.Gadgets.ScanningGadget.GroupForPda">
            <summary>
            The main group in the PDA blueprints where this item appears.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.Gadgets.ScanningGadget.CategoryForPda">
            <summary>
            The category within the group in the PDA blueprints where this item appears.
            </summary>
        </member>
        <member name="T:Nautilus.Assets.Gadgets.ScanningGadget.SortPosition">
            <summary>
            Defines the insertion position for the new blueprint in relation to the <see cref="P:Nautilus.Assets.Gadgets.ScanningGadget.PdaSortTarget"/> in the PDA.
            </summary>
        </member>
        <member name="F:Nautilus.Assets.Gadgets.ScanningGadget.SortPosition.InsertBefore">
            <summary>
            Use this to insert the new blueprint before the <see cref="P:Nautilus.Assets.Gadgets.ScanningGadget.PdaSortTarget"/> or at the beginning if not found.
            </summary>
        </member>
        <member name="F:Nautilus.Assets.Gadgets.ScanningGadget.SortPosition.AppendAfter">
            <summary>
            Use this to append the new blueprint after the <see cref="P:Nautilus.Assets.Gadgets.ScanningGadget.PdaSortTarget"/> or at the end if not found.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.Gadgets.ScanningGadget.PdaSortPosition">
            <summary>
            Whether the blueprint is inserted before or appended after the <see cref="P:Nautilus.Assets.Gadgets.ScanningGadget.PdaSortTarget"/> in the PDA.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.Gadgets.ScanningGadget.PdaSortTarget">
            <summary>
            It will be added/inserted next to this item or at the end/beginning if not found.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.Gadgets.ScanningGadget.EncyclopediaEntryData">
            <summary>
            Adds an encyclopedia entry for this item in the PDA.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.Gadgets.ScanningGadget.ScannerEntryData">
            <summary>
            Additional logic on how the Scanner tool will interact with this item.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.Gadgets.ScanningGadget.AnalysisTech">
            <summary>
            Additional logic on what will happen when this item is unlocked.
            </summary>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.ScanningGadget.#ctor(Nautilus.Assets.ICustomPrefab)">
            <summary>
            Constructs a scanning gadget.
            </summary>
            <param name="prefab"><inheritdoc cref="M:Nautilus.Assets.Gadgets.Gadget.#ctor(Nautilus.Assets.ICustomPrefab)"/></param>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.ScanningGadget.#ctor(Nautilus.Assets.ICustomPrefab,TechType,System.Int32)">
            <summary>
            Constructs a scanning gadget.
            </summary>
            <param name="prefab"><inheritdoc cref="M:Nautilus.Assets.Gadgets.Gadget.#ctor(Nautilus.Assets.ICustomPrefab)"/></param>
            <param name="requiredForUnlock">The blueprint that must first be unlocked to unlock this item.</param>
            <param name="fragmentsToScan">The amount of <see cref="P:Nautilus.Assets.Gadgets.ScanningGadget.RequiredForUnlock"/> that must be scanned to unlock this item.</param>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.ScanningGadget.WithCompoundTechsForUnlock(System.Collections.Generic.List{TechType})">
            <summary>
            Adds multiple blueprints that must first be scanned or picked up to unlocked this item.
            </summary>
            <param name="compoundTechs">The compound blueprints.</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.ScanningGadget.WithPdaGroupCategory(TechGroup,TechCategory)">
            <summary>
            Adds this item into a blueprint category to appear in.
            </summary>
            <param name="group">The main group in the PDA blueprints where this item appears.</param>
            <param name="category">The category within the group in the PDA blueprints where this item appears.</param>
            <returns>A reference to this instance after the operation has completed.</returns>
            <remarks>If the specified <paramref name="group"/> is a tech group that is present in the <see cref="F:uGUI_BuilderMenu.groups"/> list, this item will automatically
            become buildable. To avoid this, or make this item a buildable manually, use the <see cref="M:Nautilus.Assets.Gadgets.ScanningGadget.SetBuildable(System.Boolean)"/> method.</remarks>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.ScanningGadget.WithPdaGroupCategoryAfter(TechGroup,TechCategory,TechType)">
            <summary>
            Adds this item into a blueprint category to appear in.
            </summary>
            <param name="group">The main group in the PDA blueprints where this item appears.</param>
            <param name="category">The category within the group in the PDA blueprints where this item appears.</param>
            <param name="target">It will be added after this target item or at the end if not found.</param>
            <returns>A reference to this instance after the operation has completed.</returns>
            <remarks>If the specified <paramref name="group"/> is a tech group that is present in the <see cref="F:uGUI_BuilderMenu.groups"/> list, this item will automatically
            become buildable. To avoid this, or make this item a buildable manually, use the <see cref="M:Nautilus.Assets.Gadgets.ScanningGadget.SetBuildable(System.Boolean)"/> method.</remarks>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.ScanningGadget.WithPdaGroupCategoryBefore(TechGroup,TechCategory,TechType)">
            <summary>
            Adds this item into a blueprint category to appear in.
            </summary>
            <param name="group">The main group in the PDA blueprints where this item appears.</param>
            <param name="category">The category within the group in the PDA blueprints where this item appears.</param>
            <param name="target">It will be inserted before this target item or at the beginning if not found.</param>
            <returns>A reference to this instance after the operation has completed.</returns>
            <remarks>If the specified <paramref name="group"/> is a tech group that is present in the <see cref="F:uGUI_BuilderMenu.groups"/> list, this item will automatically
            become buildable. To avoid this, or make this item a buildable manually, use the <see cref="M:Nautilus.Assets.Gadgets.ScanningGadget.SetBuildable(System.Boolean)"/> method.</remarks>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.ScanningGadget.SetBuildable(System.Boolean)">
            <summary>
            Classifies this item as buildable via the habitat builder.
            </summary>
            <param name="isBuildable">Should this item be buildable?</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.ScanningGadget.WithEncyclopediaEntry(System.String,UnityEngine.Sprite,UnityEngine.Texture2D,FMODAsset,FMODAsset)">
            <summary>
            <para>Adds an encyclopedia entry for this item in the PDA. This method does not ask for display text, for that you must use the <see cref="T:Nautilus.Handlers.LanguageHandler"/>.</para>
            <para>The encyclopedia entry's key will be set as the TechType string.</para>
            <para>The language keys for this ency are as as follows: "Ency_{TechType}" (title) and "EncyDesc_{TechType}" (description), i.e. "Ency_Peeper".</para>
            </summary>
            <param name="path">The path this entry will appear in.</param>
            <param name="popupSprite">The sprite that will pop up on the side of the screen once this entry is unlocked.</param>
            <param name="encyImage">The entry image that will appear in the encyclopedia entry</param>
            <param name="unlockSound">The audio that is played when this sound is unlocked. Typical values are <see cref="P:Nautilus.Handlers.PDAHandler.UnlockBasic"/> and <see cref="P:Nautilus.Handlers.PDAHandler.UnlockBasic"/>. If unassigned, will have a default value of <see cref="P:Nautilus.Handlers.PDAHandler.UnlockBasic"/>.</param>
            <param name="encyAudio">The audio that can be played in the entry.</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.ScanningGadget.WithScannerEntry(System.Single,System.Boolean,System.String,System.Boolean)">
            <summary>
            Adds additional info on how the Scanner tool should treat this item when scanning it.
            </summary>
            <param name="scanTime">The amount of seconds it takes to scan this item.</param>
            <param name="isFragment">Is this a fragment?</param>
            <param name="encyKey">The encyclopedia key to unlock once the scanning is completed.</param>
            <param name="destroyAfterScan">Should this object be destroyed after a successful scan?</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.ScanningGadget.WithAnalysisTech(UnityEngine.Sprite,System.Collections.Generic.List{Story.StoryGoal},FMODAsset,System.String)">
            <summary>
            Adds additional info on what should happen when this item is unlocked.
            </summary>
            <param name="popupSprite">The sprite that should popup on unlock.</param>
            <param name="storyGoalsToTrigger">The story goals that should be triggered on unlock.</param>
            <param name="unlockSound">The sound that will be played on unlock.</param>
            <param name="unlockMessage">Message which should be shown on unlock.</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.ScanningGadget.Build">
            <inheritdoc/>
        </member>
        <member name="T:Nautilus.Assets.Gadgets.UpgradeModuleGadget">
            <summary>
            Represents a vehicle module (or upgrade) gadget.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.Gadgets.UpgradeModuleGadget.MaxCharge">
            <summary>
            Max charge of this item.
            Should apply to modules of vehicles and to chargeable items.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.Gadgets.UpgradeModuleGadget.EnergyCost">
            <summary>
            Energy cost of this item.
            Should apply to modules of vehicles.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.Gadgets.UpgradeModuleGadget.Cooldown">
            <summary>
            Cooldown for this module.
            Does not work with Toggleable items.
            May not work with certain vehicles.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.Gadgets.UpgradeModuleGadget.CrushDepth">
            <summary>
            Crush depth of this upgrade.
            Leave to -1f to disable
            </summary>
        </member>
        <member name="P:Nautilus.Assets.Gadgets.UpgradeModuleGadget.AbsoluteDepth">
            <summary>
            Wether the depth provided should be absolute or added to the default depth of the vehicle.
            Default value is false.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.Gadgets.UpgradeModuleGadget.delegateOnAdded">
            <summary>
            This happens when the module is added to the vehicle.
            <para>Action that is executed after Nautilus' default action (if there is) on this event.</para>
            </summary>
        </member>
        <member name="P:Nautilus.Assets.Gadgets.UpgradeModuleGadget.delegateOnRemoved">
            <summary>
            This happens when the module is removed from the vehicle.
            <para>Action that is executed after Nautilus' default action (if there is) on this event.</para>
            </summary>
        </member>
        <member name="P:Nautilus.Assets.Gadgets.UpgradeModuleGadget.delegateOnUsed">
            <summary>
            This happens when the module is used.
            The delegate is not run when the module is a toggleable.
            <para>Action that is executed after Nautilus' default action (if there is) on this event.</para>
            </summary>
        </member>
        <member name="P:Nautilus.Assets.Gadgets.UpgradeModuleGadget.delegateOnToggled">
            <summary>
            This happens when the module is toggled.<br/>
            The boolean represents wether the module is on or off.<br/>
            The delegate is not executed when the module is a selectable, selectableChargeable or a chargeable.
            <para>Action that is executed after Nautilus' default action (if there is) on this event.</para>
            </summary>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.UpgradeModuleGadget.#ctor(Nautilus.Assets.ICustomPrefab)">
            <summary>
            Constructs an equipment gadget.
            </summary>
            <param name="prefab"><inheritdoc cref="M:Nautilus.Assets.Gadgets.Gadget.#ctor(Nautilus.Assets.ICustomPrefab)"/></param>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.UpgradeModuleGadget.WithMaxCharge(System.Double)">
            <summary>
            The maximum charge of the item.
            Usually used as a multiplier for vehicle modules.
            (Seamoth defense perimeter, Seatruck defense perimeter)
            <para>Example: The Seamoth defense perimeter can be charged by holding the action key to make its damage bigger.</para>
            </summary>
            <param name="maxCharge">Charge multiplier</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.UpgradeModuleGadget.WithEnergyCost(System.Double)">
            <summary>
            The energy cost of the item.
            Usually used for vehicle modules to consume energy.
            (Seamoth perimeter defense, Seamoth sonar)
            </summary>
            <param name="energyCost">Energy cost</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.UpgradeModuleGadget.WithCooldown(System.Double)">
            <summary>
            The cooldown of the module when it is used.
            <para>Cooldown may not work with certain vehicles.</para>
            <para>Does not work with toggleable and passive items.</para>
            </summary>
            <param name="cooldown">Cooldown of the module in seconds.</param>
            <returns>A reference to thihs instance after the operation has completed.</returns>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.UpgradeModuleGadget.WithDepthUpgrade(System.Single,System.Boolean)">
            <summary>
            Sets the crush depth given by this upgrade.
            </summary>
            <param name="newCrushDepth">New crush depth, in meters.</param>
            <param name="absolute">Wether the provided depth should be absolute or added to the default max depth of the vehicle.</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.UpgradeModuleGadget.WithOnModuleAdded(System.Action{Vehicle,System.Int32})">
            <summary>
            What happens when the module is added to a vehicle ?<br/>
            This action is run <b>after</b> Nautilus' default action (if the module is a hull, the new hull of the vehicle is automatically updated).<br/>
            For removed, see also <see cref="M:Nautilus.Assets.Gadgets.UpgradeModuleGadget.WithOnModuleRemoved(System.Action{Vehicle,System.Int32})"/>.
            </summary>
            <param name="onAdded">Action that occurs when the module is added.</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.UpgradeModuleGadget.WithOnModuleRemoved(System.Action{Vehicle,System.Int32})">
            <summary>
            What happens when the module is removed from a vehicle ?<br/>
            This action is run <b>after</b> Nautilus' default action (if the module is a hull, the new hull of the vehicle is automatically updated).<br/>
            For added, see also <see cref="M:Nautilus.Assets.Gadgets.UpgradeModuleGadget.WithOnModuleAdded(System.Action{Vehicle,System.Int32})"/>.
            </summary>
            <param name="onRemoved">Action that occurs when the module is removed.</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.UpgradeModuleGadget.WithOnModuleUsed(System.Action{Vehicle,System.Int32,System.Single,System.Single})">
            <summary>
            What happens when the module is used ?<br/>
            This action is run <b>after</b> Nautilus' default action (cooldown and energy consumption are automatically set).<br/>
            For toggle, see also <see cref="M:Nautilus.Assets.Gadgets.UpgradeModuleGadget.WithOnModuleToggled(System.Action{Vehicle,System.Int32,System.Single,System.Boolean})"/>.
            </summary>
            <param name="onUsed">Action that occurs when the module is used.</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.UpgradeModuleGadget.WithOnModuleToggled(System.Action{Vehicle,System.Int32,System.Single,System.Boolean})">
            <summary>
            What happens when the module is toggled ?<br/>
            This actions is run <b>after</b> Nautilus' default action (energy consumption is automatically set).<br/>
            For use, see also <see cref="M:Nautilus.Assets.Gadgets.UpgradeModuleGadget.WithOnModuleUsed(System.Action{Vehicle,System.Int32,System.Single,System.Single})"/>.
            </summary>
            <param name="onToggled">Action that occurs <b>when the module turns on and when it turns off</b>.<br/>
            The boolean determines wether it is added or removed (added=true).</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:Nautilus.Assets.Gadgets.UpgradeModuleGadget.Build">
            <inheritdoc/>
        </member>
        <member name="T:Nautilus.Assets.ModPrefabCache">
            <summary>
            Class used by the prefab system to store GameObjects.
            Objects in the cache are inactive because they are placed within an inactive parent object.
            </summary>
        </member>
        <member name="M:Nautilus.Assets.ModPrefabCache.AddPrefab(UnityEngine.GameObject)">
            <summary> Adds the given prefab to the cache. </summary>
            <param name="prefab"> The prefab object that is disabled and cached. </param>
        </member>
        <member name="M:Nautilus.Assets.ModPrefabCache.IsPrefabCached(System.String)">
            <summary>
            Determines if a prefab is already cached, searching by class id.
            </summary>
            <param name="classId">The class id to search for.</param>
            <returns>True if a prefab by the given <paramref name="classId"/> exists in the cache, otherwise false.</returns>
        </member>
        <member name="M:Nautilus.Assets.ModPrefabCache.RemovePrefabFromCache(System.String)">
            <summary>
            Any prefab with the matching <paramref name="classId"/> will be removed from the cache.
            </summary>
            <param name="classId">The class id of the prefab that will be removed.</param>
        </member>
        <member name="M:Nautilus.Assets.ModPrefabCache.TryGetPrefabFromCache(System.String,UnityEngine.GameObject@)">
            <summary>
            Attempts to fetch a prefab from the cache by its <paramref name="classId"/>. The <paramref name="prefab"/> out parameter is set to the prefab, if any was found.
            </summary>
            <param name="classId">The class id of the prefab we are searching for.</param>
            <param name="prefab">The prefab that may or may not be found.</param>
            <returns>True if the prefab was found in the cache, otherwise false.</returns>
        </member>
        <member name="T:Nautilus.Assets.PrefabInfo">
            <summary>
            Data class that represents information about a prefab.
            </summary>
            <param name="ClassID">The class identifier used for the <see cref="T:PrefabIdentifier"/> component whenever applicable.</param>
            <param name="PrefabFileName">Name of the prefab file.</param>
            <param name="TechType">The <see cref="P:Nautilus.Assets.PrefabInfo.TechType"/> of the corresponding item.</param>
        </member>
        <member name="M:Nautilus.Assets.PrefabInfo.#ctor(System.String,System.String,TechType)">
            <summary>
            Data class that represents information about a prefab.
            </summary>
            <param name="ClassID">The class identifier used for the <see cref="T:PrefabIdentifier"/> component whenever applicable.</param>
            <param name="PrefabFileName">Name of the prefab file.</param>
            <param name="TechType">The <see cref="P:Nautilus.Assets.PrefabInfo.TechType"/> of the corresponding item.</param>
        </member>
        <member name="P:Nautilus.Assets.PrefabInfo.ClassID">
            <summary>The class identifier used for the <see cref="T:PrefabIdentifier"/> component whenever applicable.</summary>
        </member>
        <member name="P:Nautilus.Assets.PrefabInfo.PrefabFileName">
            <summary>Name of the prefab file.</summary>
        </member>
        <member name="P:Nautilus.Assets.PrefabInfo.TechType">
            <summary>The <see cref="P:Nautilus.Assets.PrefabInfo.TechType"/> of the corresponding item.</summary>
        </member>
        <member name="M:Nautilus.Assets.PrefabInfo.WithTechType(System.String,System.String,System.String,System.String,System.Boolean,System.Reflection.Assembly)">
            <summary>
            Constructs a new <see cref="T:Nautilus.Assets.PrefabInfo"/> instance with automatically set <see cref="P:Nautilus.Assets.PrefabInfo.PrefabFileName"/> and <see cref="P:Nautilus.Assets.PrefabInfo.TechType"/>.
            </summary>
            <param name="classId">The class identifier used for the <see cref="T:PrefabIdentifier"/> component whenever applicable.</param>
            <param name="displayName">The display name of this Tech Type, can be anything. If null or empty, this will use the language line "{enumName}" instead.</param>
            <param name="description">The tooltip displayed when hovered in the PDA, can be anything. If null or empty, this will use the language line "Tooltip_{enumName}" instead.</param>
            <param name="language">The language for this entry. Defaults to English.</param>
            <param name="unlockAtStart">Whether this tech type should be unlocked on game start or not. Default to <see langword="true"/>.</param>
            <param name="techTypeOwner">The assembly that owns the created tech type. The name of this assembly will be shown in the PDA.</param>
            <returns>An instance of the constructed <see cref="T:Nautilus.Assets.PrefabInfo"/>.</returns>
        </member>
        <member name="M:Nautilus.Assets.PrefabInfo.WithIcon(Atlas.Sprite)">
            <summary>
            Adds an icon for <see cref="P:Nautilus.Assets.PrefabInfo.TechType"/>.
            </summary>
            <param name="sprite"></param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:Nautilus.Assets.PrefabInfo.WithIcon(UnityEngine.Sprite)">
            <summary>
            Adds an icon for <see cref="P:Nautilus.Assets.PrefabInfo.TechType"/>.
            </summary>
            <param name="sprite"></param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:Nautilus.Assets.PrefabInfo.WithSizeInInventory(Vector2int)">
            <summary>
            Sets the size of this tech type in the inventory.
            </summary>
            <param name="size">The 2x2 vector size</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:Nautilus.Assets.PrefabInfo.WithFileName(System.String)">
            <summary>
            Sets the prefab file name as prefab info.
            </summary>
            <param name="fileName">The prefab file name.</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="T:Nautilus.Assets.PrefabTemplates.AssetBundleTemplate">
            <summary>
            A PrefabTemplate used for loading objects in from asset bundles
            </summary>
        </member>
        <member name="M:Nautilus.Assets.PrefabTemplates.AssetBundleTemplate.#ctor(UnityEngine.AssetBundle,System.String,Nautilus.Assets.PrefabInfo)">
            <summary>
            Instantiates a new AssetBundleTemplate
            </summary>
            <param name="bundle">The AssetBundle to load the asset from</param>
            <param name="prefabName">The name of the prefab game object to load from the bundle</param>
            <param name="info">The prefab info to base this template off of.</param>
        </member>
        <member name="P:Nautilus.Assets.PrefabTemplates.AssetBundleTemplate.Prefab">
            <summary>
            A reference to the loaded prefab for modification purposes. This points directly to the prefab contained in the Asset Bundle.
            </summary>
        </member>
        <member name="M:Nautilus.Assets.PrefabTemplates.AssetBundleTemplate.#ctor(System.String,System.String,Nautilus.Assets.PrefabInfo,System.Reflection.Assembly)">
            <summary>
            Instantiates a new AssetBundleTemplate. Automatically loads the bundle by calling <see cref = "M:Nautilus.Utility.AssetBundleLoadingUtils.LoadFromAssetsFolder(System.Reflection.Assembly,System.String)"/>,
            which expects the bundle to be in your mod's Assets folder.
            <para>Also caches the loaded bundle for future use.</para>
            <para>If you are loading and using your bundle on your own, it's highly recommended to use the AssetBundle constructor overload instead.</para>
            <para>Bundles are cached per Assembly, and won't work with mods that use multiple seperate bundles.</para>
            </summary>
            <param name="assetBundleFileName">The file name of the asset bundle. These often do not have file extensions.</param>
            <param name="prefabName">The name of the prefab GameObject to load from the bundle.</param>
            <param name="info">The prefab info to base this template off of.</param>
            <param name="modAssembly">The <see cref="T:System.Reflection.Assembly"/> of the mod that contains the given Asset Bundle. If left unassigned, this will be automatically set to
            <see cref="M:System.Reflection.Assembly.GetCallingAssembly"/>.</param>
        </member>
        <member name="M:Nautilus.Assets.PrefabTemplates.AssetBundleTemplate.GetPrefabAsync(TaskResult{UnityEngine.GameObject})">
            <inheritdoc/>
        </member>
        <member name="T:Nautilus.Assets.PrefabTemplates.CloneTemplate">
            <summary>
            Represents a prefab clone template.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.PrefabTemplates.CloneTemplate.ModelDatas">
            <summary>
            Reskinning model data to apply to the clone.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.PrefabTemplates.CloneTemplate.ModifyPrefab">
            <summary>
            Callback that will get called after the prefab is retrieved. Use this to modify or process your prefab further more.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.PrefabTemplates.CloneTemplate.ModifyPrefabAsync">
            <summary>
            Callback that will get called after the prefab is retrieved. Use this to modify or process your prefab further more asynchronously.
            </summary>
        </member>
        <member name="M:Nautilus.Assets.PrefabTemplates.CloneTemplate.#ctor(Nautilus.Assets.PrefabInfo,TechType)">
            <summary>
            Creates a <see cref="T:Nautilus.Assets.PrefabTemplates.CloneTemplate"/> instance.
            </summary>
            <param name="info">The prefab info to base this template off of.</param>
            <param name="techTypeToClone">The tech type to clone and use for this template.</param>
        </member>
        <member name="M:Nautilus.Assets.PrefabTemplates.CloneTemplate.#ctor(Nautilus.Assets.PrefabInfo,System.String)">
            <summary>
            Creates a <see cref="T:Nautilus.Assets.PrefabTemplates.CloneTemplate"/> instance.
            </summary>
            <param name="info">The prefab info to base this template off of.</param>
            <param name="classIdToClone">The class ID to clone and use for this template.</param>
        </member>
        <member name="M:Nautilus.Assets.PrefabTemplates.CloneTemplate.GetPrefabAsync(TaskResult{UnityEngine.GameObject})">
            <summary>
            Gets the appropriate cloned prefab.
            </summary>
            <param name="gameObject">The cloned prefab is set into this argument.<br/>
            If the provided task result already has a game object, this method will only call the <see cref="P:Nautilus.Assets.PrefabTemplates.CloneTemplate.ModifyPrefab"/> callback on it.
            Otherwise; Creates a prefab clone, then runs the <see cref="P:Nautilus.Assets.PrefabTemplates.CloneTemplate.ModifyPrefab"/> callback.</param>
            <returns>A coroutine operation. Must be used with either <c>yield return</c>, or <see cref="M:UnityEngine.MonoBehaviour.StartCoroutine(System.Collections.IEnumerator)"/>.</returns>
        </member>
        <member name="T:Nautilus.Assets.PrefabTemplates.EggTemplate">
            <summary>
            Represents a creature egg prefab template.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.PrefabTemplates.EggTemplate.UndiscoveredTechType">
            <summary>
            The Undiscovered Techtype of this egg.
            </summary>
            <returns>The undiscovered TechType if the <see cref="M:Nautilus.Assets.PrefabTemplates.EggTemplate.SetUndiscoveredTechType"/> was invoked; otherwise <see cref="F:TechType.None"/>.</returns>
        </member>
        <member name="P:Nautilus.Assets.PrefabTemplates.EggTemplate.HatchingCreature">
            <summary>
            the creature that's going to hatch from this egg.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.PrefabTemplates.EggTemplate.HatchingTime">
            <summary>
            amount of in-game days this egg will take to hatch the <seealso cref="P:Nautilus.Assets.PrefabTemplates.EggTemplate.HatchingCreature"/>.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.PrefabTemplates.EggTemplate.Mass">
            <summary>
            Mass of the egg by KG. defaulted to 100.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.PrefabTemplates.EggTemplate.MaxHealth">
            <summary>
            Health of the egg. defaulted to 60.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.PrefabTemplates.EggTemplate.CellLevel">
            <summary>
            Determines how close you have to be to the egg for it to appear. Defaults to <see cref="F:LargeWorldEntity.CellLevel.Medium"/>.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.PrefabTemplates.EggTemplate.ModifyPrefab">
            <summary>
            Callback that will get called after the prefab is retrieved. Use this to modify or process your prefab further more.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.PrefabTemplates.EggTemplate.ModifyPrefabAsync">
            <summary>
            Callback that will get called after the prefab is retrieved. Use this to modify or process your prefab further more asynchronously.
            </summary>
        </member>
        <member name="M:Nautilus.Assets.PrefabTemplates.EggTemplate.#ctor(Nautilus.Assets.PrefabInfo,Nautilus.Assets.PrefabTemplates.AssetBundleTemplate)">
            <summary>
            Creates a <see cref="T:Nautilus.Assets.PrefabTemplates.EggTemplate"/> instance and sets the specified asset bundle prefab as the base model.
            </summary>
            <param name="info">The prefab info to base this template off of.</param>
            <param name="assetBundleTemplate">The asset bundle prefab to set as the model.</param>
        </member>
        <member name="M:Nautilus.Assets.PrefabTemplates.EggTemplate.#ctor(Nautilus.Assets.PrefabInfo,UnityEngine.GameObject)">
            <summary>
            Creates a <see cref="T:Nautilus.Assets.PrefabTemplates.EggTemplate"/> instance and sets the specified game object as the base model.
            </summary>
            <param name="info">The prefab info to base this template off of.</param>
            <param name="model">The game object to set as the model.</param>
        </member>
        <member name="M:Nautilus.Assets.PrefabTemplates.EggTemplate.#ctor(Nautilus.Assets.PrefabInfo,TechType)">
            <summary>
            Creates a <see cref="T:Nautilus.Assets.PrefabTemplates.EggTemplate"/> instance and sets a tech type as the base model.
            </summary>
            <param name="info">The prefab info to base this template off of.</param>
            <param name="techType">The tech type to clone and use as the base.</param>
        </member>
        <member name="M:Nautilus.Assets.PrefabTemplates.EggTemplate.#ctor(Nautilus.Assets.PrefabInfo,System.String)">
            <summary>
            Creates a <see cref="T:Nautilus.Assets.PrefabTemplates.EggTemplate"/> instance and sets a class ID as the base model.
            </summary>
            <param name="info">The prefab info to base this template off of.</param>
            <param name="classId">The class ID to clone and use as the base.</param>
        </member>
        <member name="M:Nautilus.Assets.PrefabTemplates.EggTemplate.WithHatchingCreature(TechType)">
            <summary>
            the creature that's going to hatch from this egg.
            </summary>
            <param name="hatchingCreature">The tech type for the hatching creature.</param>
            <returns>A reference to this instance after the operation is completed.</returns>
        </member>
        <member name="M:Nautilus.Assets.PrefabTemplates.EggTemplate.WithHatchingTime(System.Single)">
            <summary>
            amount of in-game days this egg will take to hatch the <seealso cref="P:Nautilus.Assets.PrefabTemplates.EggTemplate.HatchingCreature"/>.
            </summary>
            <param name="hatchingTime">The amount of days.</param>
            <returns>A reference to this instance after the operation is completed.</returns>
        </member>
        <member name="M:Nautilus.Assets.PrefabTemplates.EggTemplate.WithMass(System.Single)">
            <summary>
            Mass of the egg by KG.
            </summary>
            <param name="mass">The mass.</param>
            <returns>A reference to this instance after the operation is completed.</returns>
        </member>
        <member name="M:Nautilus.Assets.PrefabTemplates.EggTemplate.WithMaxHealth(System.Single)">
            <summary>
            Health of the egg.
            </summary>
            <param name="maxHealth">The health.</param>
            <returns>A reference to this instance after the operation is completed.</returns>
        </member>
        <member name="M:Nautilus.Assets.PrefabTemplates.EggTemplate.WithCellLevel(LargeWorldEntity.CellLevel)">
            <summary>
            Determines how close you have to be to the egg for it to appear.
            </summary>
            <param name="cellLevel">The cell level.</param>
            <returns>A reference to this instance after the operation is completed.</returns>
        </member>
        <member name="M:Nautilus.Assets.PrefabTemplates.EggTemplate.OnModifyPrefab(System.Action{UnityEngine.GameObject})">
            <summary>
            Callback that will get called after the prefab is retrieved. Use this to modify or process your prefab further more.
            </summary>
            <param name="modifyPrefabAction">The callback.</param>
            <returns>A reference to this instance after the operation is completed.</returns>
        </member>
        <member name="M:Nautilus.Assets.PrefabTemplates.EggTemplate.OnModifyPrefabAsync(System.Func{UnityEngine.GameObject,System.Collections.IEnumerator})">
            <summary>
            Callback that will get called after the prefab is retrieved. Use this to modify or process your prefab further more asynchronously.
            </summary>
            <param name="modifyPrefabAsyncAction">The callback.</param>
            <returns>A reference to this instance after the operation is completed.</returns>
        </member>
        <member name="M:Nautilus.Assets.PrefabTemplates.EggTemplate.SetUndiscoveredTechType">
            <summary>
            Makes this egg have an unidentified egg tech type before hatching. Once it hatches, it will receive the main egg tech type.
            </summary>
            <returns>A reference to this instance after the operation is completed.</returns>
        </member>
        <member name="M:Nautilus.Assets.PrefabTemplates.EggTemplate.GetPrefabAsync(TaskResult{UnityEngine.GameObject})">
            <summary>
            Gets the appropriate egg prefab.
            </summary>
            <param name="gameObject">The egg prefab is is set to this argument.</param>
            <returns>A coroutine operation. Must be used with either <c>yield return</c>, or <see cref="M:UnityEngine.MonoBehaviour.StartCoroutine(System.Collections.IEnumerator)"/>.</returns>
        </member>
        <member name="T:Nautilus.Assets.PrefabTemplates.EnergySourceTemplate">
            <summary>
            Represents an energy source template. This template is capable of returning a Battery or a Power Cell.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.PrefabTemplates.EnergySourceTemplate.IsPowerCell">
            <summary>
            Is this energy source a Power Cell?
            </summary>
        </member>
        <member name="P:Nautilus.Assets.PrefabTemplates.EnergySourceTemplate.UseIonModelAsBase">
            <summary>
            Determines which model to use as the base. If <c>true</c>, this template will use the Precursor Ion Battery or Power cell.<br/>
            Otherwise; uses the default Battery or Power Cell models.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.PrefabTemplates.EnergySourceTemplate.ModifyPrefab">
            <summary>
            Callback that will get called after the prefab is retrieved. Use this to modify or process your prefab further more.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.PrefabTemplates.EnergySourceTemplate.ModifyPrefabAsync">
            <summary>
            Callback that will get called after the prefab is retrieved. Use this to modify or process your prefab further more asynchronously.
            </summary>
        </member>
        <member name="M:Nautilus.Assets.PrefabTemplates.EnergySourceTemplate.#ctor(Nautilus.Assets.PrefabInfo,System.Int32)">
            <summary>
            Creates an <see cref="T:Nautilus.Assets.PrefabTemplates.EnergySourceTemplate"/> instance.
            </summary>
            <param name="info">The prefab info to base this template off of.</param>
            <param name="energyAmount">The amount of energy this source should have.</param>
        </member>
        <member name="M:Nautilus.Assets.PrefabTemplates.EnergySourceTemplate.GetPrefabAsync(TaskResult{UnityEngine.GameObject})">
            <summary>
            Gets the appropriate energy source prefab.
            </summary>
            <param name="gameObject">The energy source prefab is set into this argument.<br/>
            If the provided task result already has a game object, it will try to set the necessary components first.
            Otherwise; sets the standard Battery or Power Cell.</param>
            <returns>A coroutine operation. Must be used with either <c>yield return</c>, or <see cref="M:UnityEngine.MonoBehaviour.StartCoroutine(System.Collections.IEnumerator)"/>.</returns>
        </member>
        <member name="T:Nautilus.Assets.PrefabTemplates.FabricatorTemplate">
            <summary>
            Represents an fabricator template. This template is capable of returning a Fabricator or a Workbench.
            </summary>
        </member>
        <member name="T:Nautilus.Assets.PrefabTemplates.FabricatorTemplate.Model">
            <summary>
            Defines a list of available models for your custom fabricator.
            </summary>
        </member>
        <member name="F:Nautilus.Assets.PrefabTemplates.FabricatorTemplate.Model.Custom">
            <summary>
            Use this option only if you want to provide your own custom model for your fabricator.<para/>
            To use this value, you must pass a non-null game object to the task result in the <see cref="M:Nautilus.Assets.PrefabTemplates.FabricatorTemplate.GetPrefabAsync(TaskResult{UnityEngine.GameObject})"/> method.
            </summary>
        </member>
        <member name="F:Nautilus.Assets.PrefabTemplates.FabricatorTemplate.Model.Fabricator">
            <summary>
            The regular fabricator like the one in the life pod.
            </summary>
        </member>
        <member name="F:Nautilus.Assets.PrefabTemplates.FabricatorTemplate.Model.Workbench">
            <summary>
            The modification station that upgrades your equipment.
            </summary>
        </member>
        <member name="F:Nautilus.Assets.PrefabTemplates.FabricatorTemplate.Model.MoonPool">
            <summary>
            The style of fabricator found in the Moon Pool and the Cyclops sub.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.PrefabTemplates.FabricatorTemplate.FabricatorModel">
            <summary>
            The model this template will use. Leave it to <see cref="F:Nautilus.Assets.PrefabTemplates.FabricatorTemplate.Model.Custom"/> if you've got a custom model.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.PrefabTemplates.FabricatorTemplate.ConstructableFlags">
            <summary>
            Indicates where this fabricator can be placed.<para/>
            By default, this is set to the following flags: <br/>
            <see cref="F:Nautilus.Utility.ConstructableFlags.Inside"/> for all fabricators. <br/>
            <see cref="F:Nautilus.Utility.ConstructableFlags.Wall"/> for non-workbench fabricators.<br/>
            And <see cref="F:Nautilus.Utility.ConstructableFlags.Ground"/> and <see cref="F:Nautilus.Utility.ConstructableFlags.Rotatable"/> for workbench. 
            </summary>
        </member>
        <member name="P:Nautilus.Assets.PrefabTemplates.FabricatorTemplate.ColorTint">
            <summary>
            Applies a simple color tint to the fabricator model.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.PrefabTemplates.FabricatorTemplate.ModifyPrefab">
            <summary>
            Callback that will get called after the prefab is retrieved. Use this to modify or process your prefab further more.
            </summary>
        </member>
        <member name="P:Nautilus.Assets.PrefabTemplates.FabricatorTemplate.ModifyPrefabAsync">
            <summary>
            Callback that will get called after the prefab is retrieved. Use this to modify or process your prefab further more asynchronously.
            </summary>
        </member>
        <member name="M:Nautilus.Assets.PrefabTemplates.FabricatorTemplate.#ctor(Nautilus.Assets.PrefabInfo,CraftTree.Type)">
            <summary>
            Creates a <see cref="T:Nautilus.Assets.PrefabTemplates.FabricatorTemplate"/> instance.
            </summary>
            <param name="info">The prefab info to base this template off of.</param>
            <param name="craftTreeType">The craft tree type for this template.</param>
        </member>
        <member name="M:Nautilus.Assets.PrefabTemplates.FabricatorTemplate.GetPrefabAsync(TaskResult{UnityEngine.GameObject})">
            <summary>
            Gets the appropriate fabricator prefab.
            </summary>
            <param name="gameObject">The fabricator prefab is set into this argument.<br/>
            If the provided task result already has a game object, it will try to set the necessary components first.
            Otherwise; sets the standard Battery or Power Cell.</param>
            <returns>A coroutine operation. Must be used with either <c>yield return</c>, or <see cref="M:UnityEngine.MonoBehaviour.StartCoroutine(System.Collections.IEnumerator)"/>.</returns>
        </member>
        <member name="T:Nautilus.Assets.PrefabTemplates.PrefabTemplate">
            <summary>
            Represents the contract for a prefab template. 
            </summary>
        </member>
        <member name="F:Nautilus.Assets.PrefabTemplates.PrefabTemplate.info">
            <summary>
            The prefab info to operate on.
            </summary>
        </member>
        <member name="M:Nautilus.Assets.PrefabTemplates.PrefabTemplate.#ctor(Nautilus.Assets.PrefabInfo)">
            <summary>
            Constructs a prefab template.
            </summary>
            <param name="info">The prefab info to base this template off of.</param>
        </member>
        <member name="M:Nautilus.Assets.PrefabTemplates.PrefabTemplate.GetPrefabAsync(TaskResult{UnityEngine.GameObject})">
            <summary>
            Gets a prefab of this template type. The returned object can be accessed via <see cref="M:TaskResult`1.Get"/>. 
            </summary>
            <param name="gameObject">The prefab computation result is set into this argument.<br/>
            If the provided task result already has a game object set to it, it will try to set the necessary components first. Otherwise; sets a default implementation of this entity type.</param>
            <returns>A coroutine operation. Must be used with either <c>yield return</c>, or <see cref="M:UnityEngine.MonoBehaviour.StartCoroutine(System.Collections.IEnumerator)"/>.</returns>
        </member>
        <member name="M:Nautilus.Assets.PrefabTemplates.PrefabTemplate.OnPrefabPostProcessor(UnityEngine.GameObject)">
            <summary>
            Use this method to make changes to the prefab after the Nautilus' prefab processing is completed. Can be used to override or add more features to a prefab once it's settled. 
            </summary>
            <param name="prefab">The prefab to process.</param>
            <returns>A coroutine operation.</returns>
        </member>
        <member name="T:Nautilus.Assets.SpawnLocation">
            <summary>
            Defines the spawn location with world position and optional euler angles. Used in the Coordinated Spawns system.
            </summary>
            <param name="Position">The world position.</param>
            <param name="EulerAngles">Euler angles for the rotation the spawned object will appear with.</param>
        </member>
        <member name="M:Nautilus.Assets.SpawnLocation.#ctor(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Defines the spawn location with world position and optional euler angles. Used in the Coordinated Spawns system.
            </summary>
            <param name="Position">The world position.</param>
            <param name="EulerAngles">Euler angles for the rotation the spawned object will appear with.</param>
        </member>
        <member name="P:Nautilus.Assets.SpawnLocation.Position">
            <summary>The world position.</summary>
        </member>
        <member name="P:Nautilus.Assets.SpawnLocation.EulerAngles">
            <summary>Euler angles for the rotation the spawned object will appear with.</summary>
        </member>
        <member name="T:Nautilus.Assets.ModSprite">
            <summary>
            A class that handles a custom sprite and what item it is associated to.
            </summary>
        </member>
        <member name="F:Nautilus.Assets.ModSprite.TechType">
            <summary>
            The tech type of a specific item associated with this sprite.
            Can be <see cref="F:TechType.None"/> if this sprite is for used on a group.
            </summary>
        </member>
        <member name="F:Nautilus.Assets.ModSprite.Sprite">
            <summary>
            The actual sprite used in-game when this sprite is references.
            </summary>
        </member>
        <member name="F:Nautilus.Assets.ModSprite.Group">
            <summary>
            The group that this sprite belongs to. 
            Can be <see cref="F:SpriteManager.Group.None"/> if this sprite is for used on an item.
            </summary>
        </member>
        <member name="F:Nautilus.Assets.ModSprite.Id">
            <summary>
            The internal identifier of this sprite when it isn't associated to an item.
            </summary>
        </member>
        <member name="M:Nautilus.Assets.ModSprite.#ctor(TechType,Atlas.Sprite)">
            <summary>
            Creates a new ModSprite to be used with a specific TechType.
            Created with an Atlas Sprite.
            </summary>
            <param name="type">The techtype paired to this sprite.</param>
            <param name="sprite">The sprite to be added.</param>
        </member>
        <member name="M:Nautilus.Assets.ModSprite.#ctor(SpriteManager.Group,System.String,Atlas.Sprite)">
            <summary>
            Creates a new ModSprite to be used with a specific group and internal ID.
            Created with an Atlas Sprite.
            </summary>
            <param name="group">The sprite group.</param>
            <param name="id">The sprite internal identifier.</param>
            <param name="sprite">The sprite to be added.</param>
        </member>
        <member name="M:Nautilus.Assets.ModSprite.#ctor(SpriteManager.Group,TechType,Atlas.Sprite)">
            <summary>
            Creates a new ModSprite to be used with a specific group and internal ID.
            Created with an Atlas Sprite.
            </summary>
            <param name="group">The sprite group.</param>
            <param name="type">The techtype paired to this sprite.</param>
            <param name="sprite">The sprite to be added.</param>
        </member>
        <member name="M:Nautilus.Assets.ModSprite.#ctor(SpriteManager.Group,System.String,UnityEngine.Sprite)">
            <summary>
            Creates a new ModSprite to be used with a specific group and internal ID.
            Created with a UnityEngine Sprite.
            </summary>
            <param name="group">The sprite group this sprite will be added to.</param>
            <param name="id">The sprite internal identifier.</param>
            <param name="sprite">The sprite to be added.</param>
        </member>
        <member name="M:Nautilus.Assets.ModSprite.#ctor(TechType,UnityEngine.Sprite)">
            <summary>
            Creates a new ModSprite to be used with a specific TechType.
            Created with a UnityEngine Sprite.
            </summary>
            <param name="type">The techtype paired to this sprite.</param>
            <param name="sprite">The sprite to be added.</param>
        </member>
        <member name="T:Nautilus.Commands.ConsoleCommand">
            <summary>
            Represents a console command.
            </summary>
        </member>
        <member name="P:Nautilus.Commands.ConsoleCommand.Trigger">
            <summary>
            The string that triggers the command.
            </summary>
        </member>
        <member name="P:Nautilus.Commands.ConsoleCommand.ModName">
            <summary>
            The QMod that registered the command.
            </summary>
        </member>
        <member name="P:Nautilus.Commands.ConsoleCommand.Parameters">
            <summary>
            The parameters for the command.
            </summary>
        </member>
        <member name="P:Nautilus.Commands.ConsoleCommand.ParameterTypes">
            <summary>
            The types of the parameters.
            </summary>
        </member>
        <member name="M:Nautilus.Commands.ConsoleCommand.#ctor(System.String,System.Reflection.MethodInfo,System.Boolean,System.Object)">
            <summary>
            Creates an instance of <see cref="T:Nautilus.Commands.ConsoleCommand"/>.
            </summary>
            <param name="trigger">The string that triggers the command.</param>
            <param name="targetMethod">The method targeted by the command.</param>
            <param name="isDelegate">Whether or not the method is a delegate.</param>
            <param name="instance">The instance the method belongs to.</param>
        </member>
        <member name="M:Nautilus.Commands.ConsoleCommand.HasValidInvoke">
            <summary>
            Determines whether the targeted method is valid in terms of whether it is static or delegate.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nautilus.Commands.ConsoleCommand.HasValidParameterTypes">
            <summary>
            Determines whether the target methods parameters are valid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nautilus.Commands.ConsoleCommand.GetInvalidParameters">
            <summary>
            Returns a list of all invalid parameters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nautilus.Commands.ConsoleCommand.TryParseParameters(System.Collections.Generic.IEnumerable{System.String},System.Object[]@)">
            <summary>
            Attempts to parse input parameters into appropriate types as defined in the target method.
            </summary>
            <param name="inputParameters">The parameters as input by the user.</param>
            <param name="parsedParameters">The parameters that have been successfully parsed.</param>
            <returns>Whether or not all parameters were succesfully parsed.</returns>
        </member>
        <member name="M:Nautilus.Commands.ConsoleCommand.Invoke(System.Object[])">
            <summary>
            Invokes the command with the given parameters.
            </summary>
            <param name="parameters">The command parameters.</param>
            <returns>The string returned from the command.</returns>
        </member>
        <member name="T:Nautilus.Commands.ConsoleCommandAttribute">
            <summary>
            Attribute used to signify the decorated method should be called in response to a console command.
            
            <para>Decorated method must be both <see langword="public"/> and <see langword="static"/>.</para>
            </summary>
            <remarks>
            <para>The command can take parameters and will respect optional parameters as outlined in the method's signature.<br/>
            Supported parameter types: <see cref="T:System.String"/>, <see cref="T:System.Boolean"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Single"/>,
            <see cref="T:System.Double"/>.</para>
            
            <para>If the method has a return type, it will be printed to both the screen and the log.</para>
            </remarks>
            <seealso cref="M:Nautilus.Handlers.ConsoleCommandsHandler.RegisterConsoleCommand(System.String,System.Type,System.String,System.Type[])"/>
            <seealso cref="M:Nautilus.Handlers.ConsoleCommandsHandler.RegisterConsoleCommand``1(System.String,``0)"/>
            <seealso cref="M:Nautilus.Handlers.ConsoleCommandsHandler.RegisterConsoleCommands(System.Type)"/>
            <seealso cref="T:Nautilus.Handlers.ConsoleCommandsHandler"/>
        </member>
        <member name="P:Nautilus.Commands.ConsoleCommandAttribute.Command">
            <summary>
            The unique, case-insensitive command that when entered, will call the decorated method.
            </summary>
        </member>
        <member name="M:Nautilus.Commands.ConsoleCommandAttribute.#ctor(System.String)">
            <summary>
            <para>Signifies the decorated method should be called when the given <paramref name="command"/> is entered
            in the dev console.</para>
            
            <para>Decorated method must be both <see langword="public"/> and <see langword="static"/>.</para>
            </summary>
            <remarks>
            <para>The command can take parameters and will respect optional parameters as outlined in the method's signature.<br/>
            Supported parameter types: <see cref="T:System.String"/>, <see cref="T:System.Boolean"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Single"/>,
            <see cref="T:System.Double"/>.</para>
            
            <para>If the method has a return type, it will be printed to both the screen and the log.</para>
            </remarks>
            <param name="command">The unique, case-insensitive command that when entered into the dev console will call the
            decorated method.</param>
            <seealso cref="M:Nautilus.Handlers.ConsoleCommandsHandler.RegisterConsoleCommand(System.String,System.Type,System.String,System.Type[])"/>
            <seealso cref="M:Nautilus.Handlers.ConsoleCommandsHandler.RegisterConsoleCommand``1(System.String,``0)"/>
            <seealso cref="M:Nautilus.Handlers.ConsoleCommandsHandler.RegisterConsoleCommands(System.Type)"/>
            <seealso cref="T:Nautilus.Handlers.ConsoleCommandsHandler"/>
        </member>
        <member name="T:Nautilus.Crafting.ModCraftTreeCraft">
            <summary>
            A crafting node of a CraftTree. This is the last node on a tree; The one that actually crafts something.
            </summary>
            <seealso cref="T:Nautilus.Crafting.ModCraftTreeNode" />
        </member>
        <member name="T:Nautilus.Crafting.ModCraftTreeLinkingNode">
            <summary>
            Abstract class that provides methods for adding new nodes into the crafting tree.
            </summary>
            <seealso cref="T:Nautilus.Crafting.ModCraftTreeNode" />
        </member>
        <member name="F:Nautilus.Crafting.ModCraftTreeLinkingNode.ChildNodes">
            <summary>
            The child nodes linked bellow this node.
            </summary>
        </member>
        <member name="M:Nautilus.Crafting.ModCraftTreeLinkingNode.AddTabNode(System.String,System.String,Atlas.Sprite,System.String)">
            <summary>
            Creates a new tab node for the crafting tree and links it to the calling node.
            </summary>
            <param name="nameID">The name/ID of this node.</param>
            <param name="displayText">The hover text to display in-game. If null or empty, this will use the language line "{CraftTreeName}_{<paramref name="nameID"/>}" instead.</param>
            <param name="sprite">The custom sprite to display on this tab node.</param>
            <param name="language">The language for the display name. Defaults to English.</param>
            <returns>A new tab node linked to the root node and ready to use.</returns>
        </member>
        <member name="M:Nautilus.Crafting.ModCraftTreeLinkingNode.AddTabNode(System.String,System.String,UnityEngine.Sprite,System.String)">
            <summary>
            Creates a new tab node for the crafting tree and links it to the calling node.
            </summary>
            <param name="nameID">The name/ID of this node.</param>
            <param name="displayText">The hover text to display in-game. If null or empty, this will use the language line "{CraftTreeName}_{<paramref name="nameID"/>}" instead.</param>
            <param name="sprite">The custom sprite to display on this tab node.</param>
            <param name="language">The language for the display name. Defaults to English.</param>
            <returns>A new tab node linked to the root node and ready to use.</returns>
        </member>
        <member name="M:Nautilus.Crafting.ModCraftTreeLinkingNode.AddTabNode(System.String)">
            <summary>
            Creates a new tab node for the crafting tree and links it to the calling node.
            </summary>
            <param name="nameID">The name/ID of this node.</param>
            <returns>A new tab node linked to the root node and ready to use.</returns>
        </member>
        <member name="M:Nautilus.Crafting.ModCraftTreeLinkingNode.GetTabNode(System.String)">
            <summary>
            Gets the tab from the calling node.
            </summary>
            <param name="nameID">The name id of the tab to get.</param>
            <returns></returns>
        </member>
        <member name="M:Nautilus.Crafting.ModCraftTreeLinkingNode.GetCraftingNode(TechType)">
            <summary>
            Gets the crafting node from the calling node.
            </summary>
            <param name="techType">The TechType whose node to get.</param>
            <returns></returns>
        </member>
        <member name="M:Nautilus.Crafting.ModCraftTreeLinkingNode.GetNode(System.String)">
            <summary>
            Gets the node associated with the ID specified. Used if you don't know whether node is a tab or a craft node.
            </summary>
            <param name="nameID"></param>
            <returns></returns>
        </member>
        <member name="M:Nautilus.Crafting.ModCraftTreeLinkingNode.AddCraftingNode(TechType)">
            <summary>
            Creates a new crafting node for the crafting tree and links it to the calling node.
            </summary>
            <param name="techType">The TechType to be crafted.</param>
        </member>
        <member name="M:Nautilus.Crafting.ModCraftTreeLinkingNode.AddCraftingNode(TechType[])">
            <summary>
            Creates a collection of new crafting nodes for the crafting tree and links it to the calling node.
            </summary>
            <param name="techTypes">The TechTypes to be crafted.</param>
        </member>
        <member name="M:Nautilus.Crafting.ModCraftTreeLinkingNode.AddCraftingNode(System.Collections.Generic.IEnumerable{TechType})">
            <summary>
            Creates a collection of new crafting nodes for the crafting tree and links it to the calling node.
            </summary>
            <param name="techTypes">The TechTypes to be crafted.</param>
        </member>
        <member name="M:Nautilus.Crafting.ModCraftTreeLinkingNode.AddModdedCraftingNode(System.String)">
            <summary>
            <para>Creates a new crafting node for a modded item and links it to the calling node.</para>
            <para>If the modded item isn't present for the player, this call is safely ignored.</para>
            </summary>
            <param name="moddedTechTypeName">The internal name of the custom TechType to be crafted.</param>
            <remarks>
            If the player doesn't have the mod for this TechType installed, then nothing will happen.
            </remarks>
        </member>
        <member name="T:Nautilus.Crafting.ModCraftTreeNode">
            <summary>
            Basic data structure of a crafting tree node.
            </summary>
        </member>
        <member name="F:Nautilus.Crafting.ModCraftTreeNode.Action">
            <summary>
            The action this node takes in the crafting tree.
            </summary>
        </member>
        <member name="F:Nautilus.Crafting.ModCraftTreeNode.TechType">
            <summary>
            The tech type ID associated to this node.
            For item nodes, it is the item ID to be crafted.
            For root and tab nodes, this is always <see cref="F:TechType.None"/>.
            </summary>
        </member>
        <member name="F:Nautilus.Crafting.ModCraftTreeNode.Name">
            <summary>
            The name ID for this tab node.
            </summary>
        </member>
        <member name="F:Nautilus.Crafting.ModCraftTreeNode.CraftNode">
            <summary>
            The the in-game representation of this node.
            </summary>
        </member>
        <member name="M:Nautilus.Crafting.ModCraftTreeNode.RemoveNode">
            <summary>
            Removes the calling node from parent. 
            </summary>
        </member>
        <member name="T:Nautilus.Crafting.ModCraftTreeRoot">
            <summary>
            The root node of a CraftTree. The whole tree starts here.<para/>
            Build up your custom crafting tree from this root node using the AddCraftingNode and AddTabNode methods.<br/>
            This tree will be automatically patched into the game.<para/>
            For more advanced usage, you can replace the default value of <see cref="F:Nautilus.Crafting.ModCraftTreeRoot.CraftTreeCreation"/> with your own custom function.        
            </summary>    
            <seealso cref="T:Nautilus.Crafting.ModCraftTreeLinkingNode" />
        </member>
        <member name="P:Nautilus.Crafting.ModCraftTreeRoot.CustomCraftingTree">
            <summary>
            Dynamically creates the CraftTree object for this crafting tree.
            The CraftNode objects were created and linked as the classes of the ModCraftTreeFamily were created and linked.
            </summary>
        </member>
        <member name="M:Nautilus.Crafting.ModCraftTreeRoot.CreateFromExistingTree(CraftNode,Nautilus.Crafting.ModCraftTreeLinkingNode@)">
            <summary>
            Populates a new ModCraftTreeRoot from a CraftNode tree.
            </summary>
            <param name="tree">The tree to create the ModCraftTreeRoot from.</param>
            <param name="root"></param>
        </member>
        <member name="F:Nautilus.Crafting.ModCraftTreeRoot.CraftTreeCreation">
            <summary>
            The craft tree creation function.<br/>
            Default implementaion returns a new <see cref="T:CraftTree"/> instantiated with <see cref="P:Nautilus.Crafting.ModCraftTreeRoot.SchemeAsString"/> and the root <see cref="T:CraftNode"/>.<para/>
            You can replace this function with your own to have more control of the crafting tree when it is being created.
            </summary>
        </member>
        <member name="M:Nautilus.Crafting.ModCraftTreeRoot.AddTabNode(System.String,System.String,Atlas.Sprite,System.String,System.String)">
            <summary>
            Adds a new tab node to the custom crafting tree of this fabricator.
            </summary>
            <param name="tabId">The internal ID for the tab node.</param>
            <param name="displayText">The in-game text shown for the tab node. If null or empty, this will use the language line "{CraftTreeName}_{<paramref name="tabId"/>}" instead.</param>
            <param name="tabSprite">The sprite used for the tab node.</param>
            <param name="language">The language for the display name. Defaults to English.</param>
            <param name="parentTabId">Optional. The parent tab of this tab.<para/>
            When this value is null, the tab will be added to the root of the craft tree.</param>
        </member>
        <member name="M:Nautilus.Crafting.ModCraftTreeRoot.AddTabNode(System.String,System.String,UnityEngine.Sprite,System.String,System.String)">
            <summary>
            Adds a new tab node to the custom crafting tree of this fabricator.
            </summary>
            <param name="tabId">The internal ID for the tab node.</param>
            <param name="displayText">The in-game text shown for the tab node. If null or empty, this will use the language line "{CraftTreeName}_{<paramref name="tabId"/>}" instead.</param>
            <param name="tabSprite">The sprite used for the tab node.</param>
            <param name="language">The language for the display name. Defaults to English.</param>
            <param name="parentTabId">Optional. The parent tab of this tab.<para/>
            When this value is null, the tab will be added to the root of the craft tree.</param>
        </member>
        <member name="M:Nautilus.Crafting.ModCraftTreeRoot.AddCraftNode(TechType,System.String)">
            <summary>
            Adds a new crafting node to the custom crafting tree of this fabricator.
            </summary>
            <param name="techType">The item to craft.</param>
            <param name="parentTabId">Optional. The parent tab of this craft node.<para/>
            When this value is null, the craft node will be added to the root of the craft tree.</param>
        </member>
        <member name="M:Nautilus.Crafting.ModCraftTreeRoot.AddCraftNode(System.String,System.String)">
            <summary>
            Safely attempts to add a new crafting node to the custom crafting tree of this fabricator.<para/>
            If the modded TechType is not found, the craft node will not be added.
            </summary>
            <param name="moddedTechType">The modded item to craft.</param>
            <param name="parentTabId">Optional. The parent tab of this craft node.<para/>
            When this value is null, the craft node will be added to the root of the craft tree.</param>
        </member>
        <member name="M:Nautilus.Crafting.ModCraftTreeRoot.GetTabNode(System.String[])">
            <summary>
            Gets the tab node at the specified path from the root.
            </summary>
            <param name="stepsToTab">
            <para>The steps to the target tab.</para>
            <para>These must match the id value of the CraftNode in the crafting tree you're targeting.</para>
            <para>Do not include "root" in this path.</para>
            </param>
            <returns>If the specified tab node is found, returns that <see cref="T:Nautilus.Crafting.ModCraftTreeTab"/>; Otherwise, returns null.</returns>
        </member>
        <member name="M:Nautilus.Crafting.ModCraftTreeRoot.GetNode(System.String[])">
            <summary>
            Gets the node at the specified path from the root.
            </summary>
            <param name="stepsToNode">
            <para>The steps to the target tab.</para>
            <para>These must match the id value of the CraftNode in the crafting tree you're targeting.</para>
            <para>Do not include "root" in this path.</para>
            </param>
            <returns>If the specified tab node is found, returns that <see cref="T:Nautilus.Crafting.ModCraftTreeNode"/>; Otherwise, returns null.</returns>
        </member>
        <member name="T:Nautilus.Crafting.ModCraftTreeTab">
            <summary>
            A tab node of a CraftTree. Tab nodes help organize crafting nodes by grouping them into categories.
            </summary>
            <seealso cref="T:Nautilus.Crafting.ModCraftTreeLinkingNode" />
        </member>
        <member name="T:Nautilus.Crafting.RecipeData">
            <summary>
            A class that fully describes a recipe for a <see cref="T:TechType"/> identified item.
            </summary>
        </member>
        <member name="P:Nautilus.Crafting.RecipeData.craftAmount">
            <summary>
            Gets or sets the how many copies of the item are created when crafting this recipe.
            </summary>
            <value>
            The quantity of the item this recipe yields.
            </value>
        </member>
        <member name="P:Nautilus.Crafting.RecipeData.ingredientCount">
            <summary>
            Gets the number of different ingredients for this recipe.
            </summary>
            <value>
            The number of ingredients for this recipe.
            </value>
        </member>
        <member name="P:Nautilus.Crafting.RecipeData.linkedItemCount">
            <summary>
            Gets the number of items linked to this recipe.
            </summary>
            <value>
            The number of linked items.
            </value>
        </member>
        <member name="F:Nautilus.Crafting.RecipeData.Ingredients">
            <summary>
            The list of ingredients required for this recipe.
            </summary>
        </member>
        <member name="F:Nautilus.Crafting.RecipeData.LinkedItems">
            <summary>
            The items that will also be created when this recipe is crafted.
            </summary>
        </member>
        <member name="M:Nautilus.Crafting.RecipeData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nautilus.Crafting.RecipeData"/> class a custom recipe.
            </summary>
        </member>
        <member name="M:Nautilus.Crafting.RecipeData.#ctor(System.Collections.Generic.List{CraftData.Ingredient})">
            <summary>
            Initializes a new instance of the <see cref="T:Nautilus.Crafting.RecipeData"/> class for a custom recipe with a list of ingridients.
            </summary>
            <param name="ingredients">The ingredients.</param>
        </member>
        <member name="M:Nautilus.Crafting.RecipeData.#ctor(CraftData.Ingredient[])">
            <summary>
            Initializes a new instance of the <see cref="T:Nautilus.Crafting.RecipeData"/> class for a custom recipe with a collection of ingridients.
            </summary>
            <param name="ingredients">The ingredients.</param>
        </member>
        <member name="M:Nautilus.Crafting.RecipeData.GetIngredient(System.Int32)">
            <summary>
            Gets the ingredient at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The <see cref="T:CraftData.Ingredient"/> at the requested the index if the index is value; Otherwise returns null.</returns>
        </member>
        <member name="M:Nautilus.Crafting.RecipeData.GetLinkedItem(System.Int32)">
            <summary>
            Gets the linked item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The <see cref="T:TechType"/> at the requested the index if the index is value; Otherwise returns null.</returns>
        </member>
        <member name="T:Nautilus.Extensions.GameObjectExtensions">
            <summary>
            Contains extension methods for Unity objects.
            </summary>
        </member>
        <member name="M:Nautilus.Extensions.GameObjectExtensions.Exists``1(``0)">
            <summary>
            Checks if the object exists. This method is a wrapper to allow null-coalescing operator usage by respecting Unity's object life cycle.
            </summary>
            <param name="object">the object</param>
            <typeparam name="T">the <see cref="T:UnityEngine.Object"/> type</typeparam>
            <returns>The object if exists, otherwise null.</returns>
        </member>
        <member name="M:Nautilus.Extensions.GameObjectExtensions.CopyComponent``2(``0,``1)">
            <summary>
            Copies the field values from the specified component to the current component.
            </summary>
            <param name="this">The current instance to copy to.</param>
            <param name="copyFrom">The specified instance to copy from.</param>
            <typeparam name="TSelfComponent">The type of this component.</typeparam>
            <typeparam name="TCopiedComponent">The type of the copied component.</typeparam>
            <returns>The current component with the correct field values.</returns>
            <remarks>This method only takes effect on public fields that are serializable, or non-public fields with the <see cref="T:UnityEngine.SerializeField"/> attribute.</remarks>
            <seealso cref="M:Nautilus.Extensions.GameObjectExtensions.AddAndCopyComponent``2(UnityEngine.GameObject)"/>
            <seealso cref="M:Nautilus.Extensions.GameObjectExtensions.EnsureAndCopyComponent``2(UnityEngine.GameObject)"/>
        </member>
        <member name="M:Nautilus.Extensions.GameObjectExtensions.AddAndCopyComponent``2(UnityEngine.GameObject)">
            <summary>
            Adds a component with the <typeparamref name="TNewComponent"/> type, then copies the field values of the <typeparamref name="TCopiedComponent"/> into it.
            </summary>
            <param name="obj">The Game object to perform this action on.</param>
            <typeparam name="TNewComponent">The type of the new component.</typeparam>
            <typeparam name="TCopiedComponent">The type of the copied component.</typeparam>
            <returns>The new component with the correct field values.</returns>
            <remarks>This method only takes effect on public fields that are serializable, or non-public fields with the <see cref="T:UnityEngine.SerializeField"/> attribute.</remarks>
            <seealso cref="M:Nautilus.Extensions.GameObjectExtensions.CopyComponent``2(``0,``1)"/>
            <seealso cref="M:Nautilus.Extensions.GameObjectExtensions.EnsureAndCopyComponent``2(UnityEngine.GameObject)"/>
        </member>
        <member name="M:Nautilus.Extensions.GameObjectExtensions.EnsureAndCopyComponent``2(UnityEngine.GameObject)">
            <summary>
            Ensures a component with the <typeparamref name="TNewComponent"/> type exists, then copies the field values of the <typeparamref name="TCopiedComponent"/> into it.
            </summary>
            <param name="obj">The Game object to perform this action on.</param>
            <typeparam name="TNewComponent">The type of the new component.</typeparam>
            <typeparam name="TCopiedComponent">The type of the copied component.</typeparam>
            <returns>The new component with the correct field values.</returns>
            <remarks>This method only takes effect on public fields that are serializable, or non-public fields with the <see cref="T:UnityEngine.SerializeField"/> attribute.</remarks>
            <seealso cref="M:Nautilus.Extensions.GameObjectExtensions.CopyComponent``2(``0,``1)"/>
            <seealso cref="M:Nautilus.Extensions.GameObjectExtensions.EnsureAndCopyComponent``2(UnityEngine.GameObject)"/>
        </member>
        <member name="M:Nautilus.Extensions.GameObjectExtensions.SearchChild(UnityEngine.Transform,System.String)">
            <summary>
            Searches the hierarchy under this Transform recursively and returns a child Transform with the matching name if any is found.
            </summary>
            <param name="transform">The root object of the search.</param>
            <param name="name">The name of the object that is being searched for.</param>
            <returns>If found, a reference to the transform, otherwise; null.</returns>
        </member>
        <member name="M:Nautilus.Extensions.GameObjectExtensions.SearchChild(UnityEngine.GameObject,System.String)">
            <summary>
            Searches the hierarchy under this GameObject recursively and returns a child GameObject with the matching name if any is found.
            </summary>
            <param name="gameObject">The root object of the search.</param>
            <param name="name">The name of the object that is being searched for.</param>
            <returns>If found, a reference to the game object, otherwise; null.</returns>
        </member>
        <member name="M:Nautilus.Extensions.GameObjectExtensions.IsPrefab(UnityEngine.GameObject)">
            <summary>
            Checks if this game object is a proper prefab. Proper prefabs are those that are made via the Unity Editor and are .prefab formatted.
            </summary>
            <param name="gameObject">The game object to check.</param>
            <returns>True if this game object is a proper prefab, otherwise false.</returns>
        </member>
        <member name="M:Nautilus.Extensions.GameObjectExtensions.ForceValid``1(``0)">
            <summary>
            Forces the passed <see cref="T:UnityEngine.AddressableAssets.AssetReferenceGameObject"/>'s RuntimeKey to always pass the IsRuntimeKeyValid check.
            </summary>
            <param name="this">The <see cref="T:UnityEngine.AddressableAssets.AssetReferenceGameObject"/> to convert</param>
            <returns>A reference to this instance after the operation is completed.</returns>
        </member>
        <member name="T:Nautilus.Extensions.GeneralExtensions">
            <summary>
            Contains extensions that are not exclusively specific to one type.
            </summary>
        </member>
        <member name="M:Nautilus.Extensions.GeneralExtensions.Add``1(``0[],``0)">
            <summary>
            Adds an object to the end of the <see cref="T:System.Array"/>.
            </summary>
            <param name="array">The array to perform this action on.</param>
            <param name="item">The object to be added to the end of the <see cref="T:System.Array"/>. The value can be null for reference types.</param>
        </member>
        <member name="M:Nautilus.Extensions.GeneralExtensions.TrimClone(System.String)">
            <summary>
            Removes the "(Clone)" part from names.
            </summary>
            <param name="this">The string to perform this action on.</param>
            <returns>The new string without "(Clone)". If the specified string does not contain "(Clone)", it simply returns the string as-is.</returns>
        </member>
        <member name="M:Nautilus.Extensions.GeneralExtensions.AddHint(ErrorMessage,System.String)">
            <summary>
            Adds a message and increases the life of it, instead of spamming it.
            </summary>
            <param name="this"></param>
            <param name="message">the message text</param>
        </member>
        <member name="T:Nautilus.FMod.FModMultiSounds">
            <summary>
            This class is used to register FMOD events with multiple sounds in one event.
            </summary>
        </member>
        <member name="F:Nautilus.FMod.FModMultiSounds.randomizeSounds">
            <summary>
            Makes the sounds play in a randomized order. when <c>false</c>, sounds will play subsequently.
            </summary>
        </member>
        <member name="M:Nautilus.FMod.FModMultiSounds.#ctor(FMOD.Sound[],System.String,System.Boolean)">
            <summary>
            Constructs a new instance of <see cref="T:Nautilus.FMod.FModMultiSounds"/>. Used to register FMOD events with multiple sounds in one event.
            </summary>
            <param name="sounds">The sounds to register for this object. Please ensure that none of the sounds are on <see cref="F:FMOD.MODE.LOOP_NORMAL"/> or <see cref="F:FMOD.MODE.LOOP_BIDI"/> modes.</param>
            <param name="busPath"><see cref="T:FMOD.Studio.Bus"/> path to play these sounds under.</param>
            <param name="randomizeSounds">Makes the sounds play in a randomized order. when <c>false</c>, sounds will play subsequently.</param>
        </member>
        <member name="M:Nautilus.FMod.FModMultiSounds.#ctor(UnityEngine.AudioClip[],FMOD.MODE,System.String,System.Boolean)">
            <summary>
            Constructs a new instance of <see cref="T:Nautilus.FMod.FModMultiSounds"/>. Used to register FMOD events with multiple sounds in one event.
            </summary>
            <param name="clips">The clips to register for this object.</param>
            <param name="mode">The mode to set the clips to. Cannot be <c>MODE.LOOP_NORMAL</c> or <c>MODE.LOOP_BIDI</c>.</param>
            <param name="busPath"><see cref="T:FMOD.Studio.Bus"/> path to play these sounds under.</param>
            <param name="randomizeSounds">Makes the sounds play in a randomized order. when <c>false</c>, sounds will play subsequently.</param>
        </member>
        <member name="M:Nautilus.FMod.FModMultiSounds.#ctor(System.String[],FMOD.MODE,System.String,System.Boolean)">
            <summary>
            Constructs a new instance of <see cref="T:Nautilus.FMod.FModMultiSounds"/>. Used to register FMOD events with multiple sounds in one event.
            </summary>
            <param name="soundPaths">The sound paths to register for this object. Paths must be relative to the base game folder.</param>
            <param name="mode">The mode to set the clips to. Cannot be <c>MODE.LOOP_NORMAL</c> or <c>MODE.LOOP_BIDI</c>.</param>
            <param name="busPath"><see cref="T:FMOD.Studio.Bus"/> path to play these sounds under.</param>
            <param name="randomizeSounds">Makes the sounds play in a randomized order. when <c>false</c>, sounds will play subsequently.</param>
        </member>
        <member name="T:Nautilus.FMod.Interfaces.IFModSound">
            <summary>
            This interface is used to integrate with <see cref="T:Nautilus.Handlers.CustomSoundHandler"/>.
            </summary>
        </member>
        <member name="M:Nautilus.FMod.Interfaces.IFModSound.TryPlaySound(FMOD.Channel@)">
            <summary>
            Defines how to play sound in this object.
            </summary>
            <param name="channel">The channel on which the sound was created.</param>
            <returns>If the sound was reported as played.</returns>
        </member>
        <member name="T:Nautilus.Handlers.ConsoleCommandsHandler">
            <summary>
            A handler class for registering your custom console commands.
            </summary>
        </member>
        <member name="M:Nautilus.Handlers.ConsoleCommandsHandler.RegisterConsoleCommand(System.String,System.Type,System.String,System.Type[])">
            <summary>
            Registers your custom console command by targeting a <see langword="public"/> <see langword="static"/> method.
            </summary>
            <remarks>
            <para>Target method must be <see langword="static"/>.</para>
            
            <para>The command can take parameters and will respect optional parameters as outlined in the method's signature.<br/>
            Supported parameter types: <see cref="T:System.String"/>, <see cref="T:System.Boolean"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Single"/>,
            <see cref="T:System.Double"/>.</para>
            
            <para>If the method has a return type, it will be printed to both the screen and the log.</para>
            </remarks>
            <param name="command">The case-insensitive command to register.</param>
            <param name="declaringType">The declaring type that holds the method to call when the command is entered.</param>
            <param name="methodName">The name of the method to call within the declaring type when the command is entered. 
            Method must be <see langword="static"/>.</param>
            <param name="parameters">The parameter types the method receives, for targeting overloads.</param>
            <seealso cref="M:Nautilus.Handlers.ConsoleCommandsHandler.RegisterConsoleCommand``1(System.String,``0)"/>
            <seealso cref="M:Nautilus.Handlers.ConsoleCommandsHandler.RegisterConsoleCommands(System.Type)"/>
            <seealso cref="T:Nautilus.Commands.ConsoleCommandAttribute"/>
        </member>
        <member name="M:Nautilus.Handlers.ConsoleCommandsHandler.RegisterConsoleCommand``1(System.String,``0)">
            <summary>
            Registers your custom console command by passing a <see langword="delegate"/>.
            </summary>
            <remarks>
            <para>Supported parameter types: <see cref="T:System.String"/>, <see cref="T:System.Boolean"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Single"/>,
            <see cref="T:System.Double"/>.</para>
            
            <para>If the delegate has a return type, it will be printed to both the screen and the log.</para>
            </remarks>
            <typeparam name="T">The delegate type.</typeparam>
            <param name="command">The case-insensitive command to register.</param>
            <param name="callback">The callback to handle the command.</param>
            <seealso cref="M:Nautilus.Handlers.ConsoleCommandsHandler.RegisterConsoleCommand(System.String,System.Type,System.String,System.Type[])"/>
            <seealso cref="M:Nautilus.Handlers.ConsoleCommandsHandler.RegisterConsoleCommands(System.Type)"/>
            <seealso cref="T:Nautilus.Commands.ConsoleCommandAttribute"/>
        </member>
        <member name="M:Nautilus.Handlers.ConsoleCommandsHandler.RegisterConsoleCommands(System.Type)">
            <summary>
            Registers <see langword="public"/> <see langword="static"/> methods decorated with the
            <see cref="T:Nautilus.Commands.ConsoleCommandAttribute"/> within the <paramref name="type"/> as console commands.
            </summary>
            <remarks>
            <para>Target methods must be <see langword="static"/>.</para>
            
            <para>Commands can take parameters and will respect optional parameters as outlined in the method's signature.<br/>
            Supported parameter types: <see cref="T:System.String"/>, <see cref="T:System.Boolean"/>, <see cref="T:System.Int32"/>, <see cref="T:System.Single"/>,
            <see cref="T:System.Double"/>.</para>
            
            <para>If a decorated method has a return type, it will be printed to both the screen and the log.</para>
            </remarks>
            <seealso cref="M:Nautilus.Handlers.ConsoleCommandsHandler.RegisterConsoleCommand(System.String,System.Type,System.String,System.Type[])"/>
            <seealso cref="M:Nautilus.Handlers.ConsoleCommandsHandler.RegisterConsoleCommand``1(System.String,``0)"/>
            <seealso cref="T:Nautilus.Commands.ConsoleCommandAttribute"/>
        </member>
        <member name="T:Nautilus.Handlers.CoordinatedSpawnsHandler">
            <summary>
            A handler class for registering Coordinated Spawns.
            </summary>
        </member>
        <member name="M:Nautilus.Handlers.CoordinatedSpawnsHandler.RegisterCoordinatedSpawn(Nautilus.Handlers.SpawnInfo)">
            <summary>
            Registers a Coordinated Spawn.
            </summary>
            <param name="spawnInfo">the SpawnInfo to spawn.</param>
        </member>
        <member name="M:Nautilus.Handlers.CoordinatedSpawnsHandler.RegisterCoordinatedSpawns(System.Collections.Generic.List{Nautilus.Handlers.SpawnInfo})">
            <summary>
            registers Many Coordinated Spawns.
            </summary>
            <param name="spawnInfos">The SpawnInfos to spawn.</param>
        </member>
        <member name="M:Nautilus.Handlers.CoordinatedSpawnsHandler.RegisterCoordinatedSpawnsForOneTechType(TechType,Nautilus.Assets.SpawnLocation[])">
            <summary>
            Registers Multiple Coordinated spawns with rotations for one single passed TechType.
            </summary>
            <param name="techTypeToSpawn">The TechType to spawn.</param>
            <param name="spawnLocations">The spawn locations to spawn in. Euler angles are optional.</param>
        </member>
        <member name="T:Nautilus.Handlers.SpawnInfo">
            <summary>
            A basic struct that provides enough info for the <see cref="T:Nautilus.Handlers.CoordinatedSpawnsHandler"/> System to function.
            </summary>
        </member>
        <member name="M:Nautilus.Handlers.SpawnInfo.#ctor(TechType,UnityEngine.Vector3)">
            <summary>
            Initializes a new <see cref="T:Nautilus.Handlers.SpawnInfo"/>.
            </summary>
            <param name="techType">TechType to spawn.</param>
            <param name="spawnPosition">Position to spawn into.</param>
        </member>
        <member name="M:Nautilus.Handlers.SpawnInfo.#ctor(System.String,UnityEngine.Vector3)">
            <summary>
            Initializes a new <see cref="T:Nautilus.Handlers.SpawnInfo"/>.
            </summary>
            <param name="classId">ClassID to spawn.</param>
            <param name="spawnPosition">Position to spawn into.</param>
        </member>
        <member name="M:Nautilus.Handlers.SpawnInfo.#ctor(TechType,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Initializes a new <see cref="T:Nautilus.Handlers.SpawnInfo"/>.
            </summary>
            <param name="techType">TechType to spawn.</param>
            <param name="spawnPosition">Position to spawn into.</param>
            <param name="rotation">Rotation to spawn at.</param>
        </member>
        <member name="M:Nautilus.Handlers.SpawnInfo.#ctor(System.String,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Initializes a new <see cref="T:Nautilus.Handlers.SpawnInfo"/>.
            </summary>
            <param name="classId">ClassID to spawn.</param>
            <param name="spawnPosition">Position to spawn into.</param>
            <param name="rotation">Rotation to spawn at.</param>
        </member>
        <member name="M:Nautilus.Handlers.SpawnInfo.#ctor(TechType,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Initializes a new <see cref="T:Nautilus.Handlers.SpawnInfo"/>.
            </summary>
            <param name="techType">TechType to spawn.</param>
            <param name="spawnPosition">Position to spawn into.</param>
            <param name="rotation">Rotation to spawn at.</param>
        </member>
        <member name="M:Nautilus.Handlers.SpawnInfo.#ctor(System.String,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Initializes a new <see cref="T:Nautilus.Handlers.SpawnInfo"/>.
            </summary>
            <param name="classId">ClassID to spawn.</param>
            <param name="spawnPosition">Position to spawn into.</param>
            <param name="rotation">Rotation to spawn at.</param>
        </member>
        <member name="M:Nautilus.Handlers.SpawnInfo.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <remarks>
            It is worth noting that we use Unity's <see cref="M:UnityEngine.Vector3.op_Equality(UnityEngine.Vector3,UnityEngine.Vector3)"/> and <see cref="M:UnityEngine.Quaternion.op_Equality(UnityEngine.Quaternion,UnityEngine.Quaternion)"/>
            operator comparisons for comparing the <see cref="P:Nautilus.Handlers.SpawnInfo.SpawnPosition"/> and <see cref="P:Nautilus.Handlers.SpawnInfo.Rotation"/> properties of each instance, 
            to allow for an approximate comparison of these values.
            </remarks>
            <param name="obj">The object to compare with the current instance.</param>
            <returns><see langword="true"/> if <paramref name="obj"/> is a <see cref="T:Nautilus.Handlers.SpawnInfo"/> and represents the same
            value as this instance; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Nautilus.Handlers.SpawnInfo.Equals(Nautilus.Handlers.SpawnInfo)"/>
        </member>
        <member name="M:Nautilus.Handlers.SpawnInfo.GetHashCode">
            <summary>
            A custom hash code algorithm that takes into account the values of each property of the <see cref="T:Nautilus.Handlers.SpawnInfo"/> instance,
            and attempts to reduce diagonal collisions.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Nautilus.Handlers.SpawnInfo.Equals(Nautilus.Handlers.SpawnInfo)">
            <summary>
            Indicates whether the current <see cref="T:Nautilus.Handlers.SpawnInfo"/> is equal to another.
            </summary>
            <remarks>
            It is worth noting that we use Unity's <see cref="M:UnityEngine.Vector3.op_Equality(UnityEngine.Vector3,UnityEngine.Vector3)"/> and <see cref="M:UnityEngine.Quaternion.op_Equality(UnityEngine.Quaternion,UnityEngine.Quaternion)"/>
            operator comparisons for comparing the <see cref="P:Nautilus.Handlers.SpawnInfo.SpawnPosition"/> and <see cref="P:Nautilus.Handlers.SpawnInfo.Rotation"/> properties of each instance, 
            to allow for an approximate comparison of these values.
            </remarks>
            <param name="other">The other <see cref="T:Nautilus.Handlers.SpawnInfo"/>.</param>
            <returns><see langword="true"/> if the current <see cref="T:Nautilus.Handlers.SpawnInfo"/> is equal to the <paramref name="other"/> parameter;
            otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Nautilus.Handlers.SpawnInfo.op_Equality(Nautilus.Handlers.SpawnInfo,Nautilus.Handlers.SpawnInfo)">
            <summary>
            Indicates whether two <see cref="T:Nautilus.Handlers.SpawnInfo"/> instances are equal.
            </summary>
            <param name="a">The first instance to compare.</param>
            <param name="b">The second instance to compare.</param>
            <returns><see langword="true"/> if the <see cref="T:Nautilus.Handlers.SpawnInfo"/> instances are equal; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Nautilus.Handlers.SpawnInfo.op_Inequality(Nautilus.Handlers.SpawnInfo,Nautilus.Handlers.SpawnInfo)"/>
            <seealso cref="M:Nautilus.Handlers.SpawnInfo.Equals(Nautilus.Handlers.SpawnInfo)"/>
        </member>
        <member name="M:Nautilus.Handlers.SpawnInfo.op_Inequality(Nautilus.Handlers.SpawnInfo,Nautilus.Handlers.SpawnInfo)">
            <summary>
            Indicates whether two <see cref="T:Nautilus.Handlers.SpawnInfo"/> instances are not equal.
            </summary>
            <param name="a">The first instance to compare.</param>
            <param name="b">The second instance to compare.</param>
            <returns><see langword="true"/> if the <see cref="T:Nautilus.Handlers.SpawnInfo"/> instances are not equal; otherwise, <see langword="false"/>.</returns>
            <seealso cref="M:Nautilus.Handlers.SpawnInfo.op_Equality(Nautilus.Handlers.SpawnInfo,Nautilus.Handlers.SpawnInfo)"/>
            <seealso cref="M:Nautilus.Handlers.SpawnInfo.Equals(Nautilus.Handlers.SpawnInfo)"/>
        </member>
        <member name="T:Nautilus.Handlers.CraftDataHandler">
            <summary>
            A handler class for adding and editing crafted items.
            </summary>
            <summary>
            A handler class for adding and editing crafted items.
            </summary>
        </member>
        <member name="M:Nautilus.Handlers.CraftDataHandler.AddToGroup(TechGroup,TechCategory,TechType)">
            <summary>
            Allows you to add items to the game's internal grouping system.
            Required if you want to make buildable items show up in the Habitat Builder or show in the Blueprints Tab of the PDA.
            </summary>
            <param name="group">The TechGroup you want to add your TechType to.</param>
            <param name="category">The TechCategory (in the TechGroup) you want to add your TechType to.</param>
            <param name="techType">The TechType you want to add.</param>
        </member>
        <member name="M:Nautilus.Handlers.CraftDataHandler.AddToGroup(TechGroup,TechCategory,TechType,TechType,System.Boolean)">
            <summary>
            Allows you to add items to the game's internal grouping system.
            Required if you want to make buildable items show up in the Habitat Builder or show in the Blueprints Tab of the PDA.
            </summary>
            <param name="group">The TechGroup you want to add your TechType to.</param>
            <param name="category">The TechCategory (in the TechGroup) you want to add your TechType to.</param>
            <param name="techType">The TechType you want to add.</param>
            <param name="target">The icon in the blueprints tab of the PDA will be added next to this item or at the end/beginning if not found.</param>
            <param name="after">Whether to append after (true) or insert before (false) the target, for sorting purposes.</param>
        </member>
        <member name="M:Nautilus.Handlers.CraftDataHandler.RemoveFromGroup(TechGroup,TechCategory,TechType)">
            <summary>
            Allows you to remove an existing TechType from the game's internal group system.
            </summary>
            <param name="group">The TechGroup in which the TechType is located.</param>
            <param name="category">The TechCategory in which the TechType is located.</param>
            <param name="techType">The TechType which you want to remove.</param>
        </member>
        <member name="M:Nautilus.Handlers.CraftDataHandler.SetRecipeData(TechType,ITechData)">
            <summary>
            <para>Allows you to edit recipes, i.e. RecipeData for TechTypes.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose RecipeData you want to edit.</param>
            <param name="techData">The ITechData for that TechType.</param>
            <seealso cref="T:Nautilus.Crafting.RecipeData"/>
        </member>
        <member name="M:Nautilus.Handlers.CraftDataHandler.SetRecipeData(TechType,Nautilus.Crafting.RecipeData)">
            <summary>
            <para>Allows you to edit recipes, i.e. RecipeData for TechTypes.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose RecipeData you want to edit.</param>
            <param name="recipeData">The RecipeData for that TechType.</param>
            <seealso cref="T:Nautilus.Crafting.RecipeData"/>
        </member>
        <member name="M:Nautilus.Handlers.CraftDataHandler.SetEquipmentType(TechType,EquipmentType)">
            <summary>
            <para>Allows you to edit EquipmentTypes for TechTypes.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose EqiupmentType you want to edit.</param>
            <param name="equipmentType">The EquipmentType for that TechType.</param>
        </member>
        <member name="M:Nautilus.Handlers.CraftDataHandler.SetQuickSlotType(TechType,QuickSlotType)">
            <summary>
            <para>Allows you to edit QuickSlotType for TechTypes. Can be used for existing TechTypes too.</para>
            <para>Careful: This has to be called after <see cref="M:Nautilus.Handlers.CraftDataHandler.SetRecipeData(TechType,ITechData)"/> and <see cref="M:Nautilus.Handlers.CraftDataHandler.SetRecipeData(TechType,Nautilus.Crafting.RecipeData)"/>.</para>
            </summary>
            <param name="techType">The TechType whose QuickSlotType you want to edit.</param>
            <param name="slotType">The QuickSlotType for that TechType.</param>
        </member>
        <member name="M:Nautilus.Handlers.CraftDataHandler.SetMaxCharge(TechType,System.Double)">
            <summary>
            <para>Allows you to edit MaxCharge for TechTypes. Can be used for existing TechTypes too.</para>
            <para>Careful: This has to be called after <see cref="M:Nautilus.Handlers.CraftDataHandler.SetRecipeData(TechType,Nautilus.Crafting.RecipeData)"/>.</para>
            </summary>
            <param name="techType">The TechType whose MaxCharge you want to edit.</param>
            <param name="maxCharge">The MaxCharge for that TechType.</param>
        </member>
        <member name="M:Nautilus.Handlers.CraftDataHandler.SetEnergyCost(TechType,System.Double)">
            <summary>
            <para>Allows you to edit EnergyCost for TechTypes. Can be used for existing TechTypes too.</para>
            <para>Careful: This has to be called after <see cref="M:Nautilus.Handlers.CraftDataHandler.SetRecipeData(TechType,Nautilus.Crafting.RecipeData)"/>.</para>
            </summary>
            <param name="techType">The TechType wose EnergyCost you want to edit</param>
            <param name="energyCost">The EnergyCost for that TechType.</param>
        </member>
        <member name="M:Nautilus.Handlers.CraftDataHandler.SetHarvestOutput(TechType,TechType)">
            <summary>
            <para>Allows you to edit harvest output, i.e. what TechType you get when you "harvest" a TechType.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose harvest output you want to edit.</param>
            <param name="harvestOutput">The harvest output for that TechType.</param>
        </member>
        <member name="M:Nautilus.Handlers.CraftDataHandler.SetHarvestType(TechType,HarvestType)">
            <summary>
            <para>Allows you to edit how TechTypes are harvested.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose HarvestType you want to edit.</param>
            <param name="harvestType">The HarvestType for that TechType.</param>
        </member>
        <member name="M:Nautilus.Handlers.CraftDataHandler.SetHarvestFinalCutBonus(TechType,System.Int32)">
            <summary>
            <para>Allows you to edit how much additional slices/seeds are given upon last knife hit.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose final cut bonus you want to edit.</param>
            <param name="bonus">The number of additional slices/seeds you'll receive on last cut.</param>
        </member>
        <member name="M:Nautilus.Handlers.CraftDataHandler.SetItemSize(TechType,Vector2int)">
            <summary>
            <para>Allows you to edit item sizes for TechTypes.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose item size you want to edit.</param>
            <param name="size">The item size for that TechType.</param>
        </member>
        <member name="M:Nautilus.Handlers.CraftDataHandler.SetItemSize(TechType,System.Int32,System.Int32)">
            <summary>
            <para>Allows you to edit item sizes for TechTypes.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose item size you want to edit.</param>
            <param name="x">The width of the item</param>
            <param name="y">The height of the item</param>
        </member>
        <member name="M:Nautilus.Handlers.CraftDataHandler.SetCraftingTime(TechType,System.Single)">
            <summary>
            <para>Allows you to edit crafting times for TechTypes.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="techType">The TechType whose crafting time you want to edit.</param>
            <param name="time">The crafting time, in seconds, for that TechType.</param>
        </member>
        <member name="M:Nautilus.Handlers.CraftDataHandler.SetCookedVariant(TechType,TechType)">
            <summary>
            <para>Allows you to edit the cooked creature list, i.e. associate the unedible TechType to the cooked TechType.</para>
            <para>Can be used for existing TechTypes too.</para>
            </summary>
            <param name="uncooked">The TechType whose cooked creature counterpart to edit.</param>
            <param name="cooked">The cooked creature counterpart for that TechType.</param>
        </member>
        <member name="M:Nautilus.Handlers.CraftDataHandler.SetBackgroundType(TechType,CraftData.BackgroundType)">
            <summary>
            <para>Allows you to edit inventory background colors for TechTypes.</para>
            </summary>
            <param name="techType">The TechType whose BackgroundType you want to edit.</param>
            <param name="backgroundColor">The background color for that TechType.</param>
            <seealso cref="T:CraftData.BackgroundType"/>
        </member>
        <member name="M:Nautilus.Handlers.CraftDataHandler.SetEatingSound(TechType,System.String)">
            <summary>
            Sets the eating sound for the provided TechType.
            </summary>
            <param name="consumable">The item being consumed during <see cref="M:Survival.Eat(UnityEngine.GameObject)"/>.</param>
            <param name="soundPath">
            The sound path.
            <para>
            Value values are
            - "event:/player/drink"
            - "event:/player/drink_stillsuit"
            - "event:/player/use_first_aid"
            - "event:/player/eat" (default)
            </para>
            </param>
        </member>
        <member name="M:Nautilus.Handlers.CraftDataHandler.AddBuildable(TechType)">
            <summary>
            Allows you to add items to the buildable list.
            </summary>
            <param name="techType">The TechType which you want to add to the buildable list.</param>
        </member>
        <member name="M:Nautilus.Handlers.CraftDataHandler.GetModdedRecipeData(TechType)">
            <summary>
            Safely accesses the crafting data from a modded item.<para/>
            WARNING: This method is highly dependent on mod load order. 
            Make sure your mod is loading after the mod whose RecipeData you are trying to access.
            </summary>
            <param name="techType">The TechType whose RecipeData you want to access.</param>
            <returns>The RecipeData from the modded item if it exists; Otherwise, returns <c>null</c>.</returns>
        </member>
        <member name="M:Nautilus.Handlers.CraftDataHandler.GetRecipeData(TechType)">
            <summary>
            Safely accesses the crafting data from any item.<para/>
            WARNING: This method is highly dependent on mod load order. 
            Make sure your mod is loading after the mod whose RecipeData you are trying to access.
            </summary>
            <param name="techType">The TechType whose RecipeData you want to access.</param>
            <returns>Returns RecipeData if it exists; Otherwise, returns <c>null</c>.</returns>
        </member>
        <member name="M:Nautilus.Handlers.CraftDataHandler.ConvertToRecipeData(ITechData)">
            <summary>
            Converts the games ITechData into Nautilus RecipeData.
            </summary>
            <param name="iTechData"></param>
        </member>
        <member name="T:Nautilus.Handlers.CraftTreeHandler">
            <summary>
            A handler class for creating and modifying crafting trees.
            </summary>
        </member>
        <member name="M:Nautilus.Handlers.CraftTreeHandler.AddCraftingNode(CraftTree.Type,TechType,System.String[])">
            <summary>
            Adds a new crafting node to the root of the specified crafting tree, at the provided tab location.
            </summary>
            <param name="craftTree">The target craft tree to edit.</param>
            <param name="craftingItem">The item to craft.</param>
            <param name="stepsToTab">
            <para>The steps to the target tab.</para>
            <para>These must match the id value of the CraftNode in the crafting tree you're targeting.</para>
            <para>Do not include "root" in this path.</para>
            <para>See <see href="https://subnauticamodding.github.io/Nautilus/tutorials/craft-tree-paths.html"/> or use the <see cref="T:Nautilus.Handlers.CraftTreeHandler.Paths"/> class for examples of valid parameters.</para>
            </param>        
        </member>
        <member name="M:Nautilus.Handlers.CraftTreeHandler.AddCraftingNode(CraftTree.Type,TechType)">
            <summary>
            Adds a new crafting node to the root of the specified crafting tree
            </summary>
            <param name="craftTree">The target craft tree to edit.</param>
            <param name="craftingItem">The item to craft.</param>
        </member>
        <member name="M:Nautilus.Handlers.CraftTreeHandler.AddTabNode(CraftTree.Type,System.String,System.String,Atlas.Sprite)">
            <summary>
            Adds a new tab node to the root of the specified crafting tree.
            </summary>
            <param name="craftTree">The target craft tree to edit.</param>
            <param name="name">The ID of the tab node. Must be unique!</param>
            <param name="displayName">The display name of the tab, which will show up when you hover your mouse on the tab.</param>
            <param name="sprite">The sprite of the tab.</param>        
        </member>
        <member name="M:Nautilus.Handlers.CraftTreeHandler.AddTabNode(CraftTree.Type,System.String,System.String,UnityEngine.Sprite)">
            <summary>
            Adds a new tab node to the root of the specified crafting tree.
            </summary>
            <param name="craftTree">The target craft tree to edit.</param>
            <param name="name">The ID of the tab node. Must be unique!</param>
            <param name="displayName">The display name of the tab, which will show up when you hover your mouse on the tab.</param>
            <param name="sprite">The sprite of the tab.</param>
        </member>
        <member name="M:Nautilus.Handlers.CraftTreeHandler.AddTabNode(CraftTree.Type,System.String,System.String,Atlas.Sprite,System.String[])">
            <summary>
            Adds a new tab node to the root of the specified crafting tree, at the specified tab location.
            </summary>
            <param name="craftTree">The target craft tree to edit.</param>
            <param name="name">The ID of the tab node. Must be unique!</param>
            <param name="displayName">The display name of the tab, which will show up when you hover your mouse on the tab.</param>
            <param name="sprite">The sprite of the tab.</param>
            <param name="stepsToTab">
            <para>The steps to the target tab.</para>
            <para>These must match the id value of the CraftNode in the crafting tree you're targeting.</para>
            <para>Do not include "root" in this path.</para>
            <para>See <see href="https://subnauticamodding.github.io/Nautilus/tutorials/craft-tree-paths.html"/> or use the <see cref="T:Nautilus.Handlers.CraftTreeHandler.Paths"/> class for examples of valid parameters.</para>
            </param>        
        </member>
        <member name="M:Nautilus.Handlers.CraftTreeHandler.AddTabNode(CraftTree.Type,System.String,System.String,UnityEngine.Sprite,System.String[])">
            <summary>
            Adds a new tab node to the root of the specified crafting tree, at the specified tab location.
            </summary>
            <param name="craftTree">The target craft tree to edit.</param>
            <param name="name">The ID of the tab node. Must be unique!</param>
            <param name="displayName">The display name of the tab, which will show up when you hover your mouse on the tab.</param>
            <param name="sprite">The sprite of the tab.</param>
            <param name="stepsToTab">
            <para>The steps to the target tab.</para>
            <para>These must match the id value of the CraftNode in the crafting tree you're targeting.</para>
            <para>Do not include "root" in this path.</para>
            <para>See <see href="https://subnauticamodding.github.io/Nautilus/tutorials/craft-tree-paths.html"/> or use the <see cref="T:Nautilus.Handlers.CraftTreeHandler.Paths"/> class for examples of valid parameters.</para>
            </param>        
        </member>
        <member name="M:Nautilus.Handlers.CraftTreeHandler.RemoveNode(CraftTree.Type,System.String[])">
            <summary>
            <para>Removes a node at the specified node location. Can be used to remove either tabs or craft nodes.</para>
            <para>If a tab node is selected, all child nodes to it will also be removed.</para>
            </summary>
            <param name="craftTree">The target craft tree to edit.</param>
            <param name="stepsToNode">
            <para>The steps to the target node.</para>
            <para>These must match the id value of the CraftNode in the crafting tree you're targeting.</para>
            <para>This means matching the id of the crafted item or the id of the tab name.</para>
            <para>Do not include "root" in this path.</para>
            <para>See <see href="https://subnauticamodding.github.io/Nautilus/tutorials/craft-tree-paths.html"/> or use the <see cref="T:Nautilus.Handlers.CraftTreeHandler.Paths"/> class for examples of valid parameters.</para>
            </param>
        </member>
        <member name="T:Nautilus.Handlers.CraftTreeHandler.Paths">
            <summary>
            A list of all the built-in craft tree paths (AKA "steps to tab") for use in methods such as <see cref="M:Nautilus.Handlers.CraftTreeHandler.AddCraftingNode(CraftTree.Type,TechType,System.String[])"/>.
            </summary>
        </member>
        <member name="P:Nautilus.Handlers.CraftTreeHandler.Paths.FabricatorsBasicMaterials">
            <summary> Steps to the Basic Materials tab in the Fabricator (<c>Resources/BasicMaterials</c>). </summary>
        </member>
        <member name="P:Nautilus.Handlers.CraftTreeHandler.Paths.FabricatorsAdvancedMaterials">
            <summary> Steps to the Advanced Materials tab in the Fabricator (<c>Resources/AdvancedMaterials</c>). </summary>
        </member>
        <member name="P:Nautilus.Handlers.CraftTreeHandler.Paths.FabricatorsElectronics">
            <summary> Steps to the Electronics tab in the Fabricator (<c>Resources/Electronics</c>). </summary>
        </member>
        <member name="P:Nautilus.Handlers.CraftTreeHandler.Paths.FabricatorWater">
            <summary> Steps to the Water tab in the Fabricator (<c>Survival/Water</c>). </summary>
        </member>
        <member name="P:Nautilus.Handlers.CraftTreeHandler.Paths.FabricatorCookedFood">
            <summary> Steps to the Cooked Food tab in the Fabricator (<c>Survival/CookedFood</c>). </summary>
        </member>
        <member name="P:Nautilus.Handlers.CraftTreeHandler.Paths.FabricatorCuredFood">
            <summary> Steps to the Cured Food tab in the Fabricator (<c>Survival/CuredFood</c>). </summary>
        </member>
        <member name="P:Nautilus.Handlers.CraftTreeHandler.Paths.FabricatorEquipment">
            <summary> Steps to the Equipment tab in the Fabricator (<c>Personal/Equipment</c>). </summary>
        </member>
        <member name="P:Nautilus.Handlers.CraftTreeHandler.Paths.FabricatorTools">
            <summary> Steps to the Tools tab in the Fabricator (<c>Personal/Tools</c>). </summary>
        </member>
        <member name="P:Nautilus.Handlers.CraftTreeHandler.Paths.FabricatorMachines">
            <summary> Steps to the Deployables tab in the Fabricator (<c>Machines</c>). </summary>
        </member>
        <member name="P:Nautilus.Handlers.CraftTreeHandler.Paths.ConstructorVehicles">
            <summary> Steps to the Vehicles tab in the Mobile Vehicle Bay (<c>Vehicles</c>). </summary>
        </member>
        <member name="P:Nautilus.Handlers.CraftTreeHandler.Paths.ConstructorRocket">
            <summary> Steps to the Rocket tab in the Mobile Vehicle Bay (<c>Rocket</c>). </summary>
        </member>
        <member name="P:Nautilus.Handlers.CraftTreeHandler.Paths.VehicleUpgradesCommonModules">
            <summary> Steps to the Common Modules tab in the Vehicle Upgrade Console (<c>CommonModules</c>). </summary>
        </member>
        <member name="P:Nautilus.Handlers.CraftTreeHandler.Paths.VehicleUpgradesSeamothModules">
            <summary> Steps to the Seamoth Modules tab in the Vehicle Upgrade Console (<c>SeamothModules</c>). </summary>
        </member>
        <member name="P:Nautilus.Handlers.CraftTreeHandler.Paths.VehicleUpgradesExosuitModules">
            <summary> Steps to the Prawn Suit Modules tab in the Vehicle Upgrade Console (<c>ExosuitModules</c>). </summary>
        </member>
        <member name="P:Nautilus.Handlers.CraftTreeHandler.Paths.VehicleUpgradesTorpedoes">
            <summary> Steps to the Torpedoes tab in the Vehicle Upgrade Console (<c>Torpedoes</c>). </summary>
        </member>
        <member name="T:Nautilus.Handlers.CustomSoundHandler">
            <summary>
            A handler class for adding and overriding Sounds. Also see the <see cref="T:Nautilus.Utility.AudioUtils"/> class.
            </summary>
        </member>
        <member name="M:Nautilus.Handlers.CustomSoundHandler.RegisterCustomSound(System.String,System.String,System.String,FMOD.MODE)">
            <summary>
            Register a Custom sound by file path. Some vanilla game sounds can be overridden by matching the id to the <see cref="F:FMODAsset.path"/>.
            </summary>
            <param name="id">The Id of your custom sound which is used when checking which sounds to play.</param>
            <param name="filePath">The file path on disk of the sound file to load.</param>
            <param name="busPath">The bus path to play the sound on.</param>
            <param name="mode">The audio MODE of the sound.
            Standard values of this property can be found in the <see cref="T:Nautilus.Utility.AudioUtils"/> class (i.e. <see cref="F:Nautilus.Utility.AudioUtils.StandardSoundModes_3D"/>).</param>
            <returns>the <see cref="T:FMOD.Sound"/> loaded</returns>
        </member>
        <member name="M:Nautilus.Handlers.CustomSoundHandler.RegisterCustomSound(System.String,System.String,FMOD.Studio.Bus,FMOD.MODE)">
            <summary>
            Register a Custom sound by file path. Some vanilla game sounds can be overridden by matching the id to the <see cref="F:FMODAsset.path"/>.
            </summary>
            <param name="id">The Id of your custom sound which is used when checking which sounds to play.</param>
            <param name="filePath">The file path on disk of the sound file to load.</param>
            <param name="bus">The bus to play the sound on.</param>
            <param name="mode">The audio MODE of the sound.
            Standard values of this property can be found in the <see cref="T:Nautilus.Utility.AudioUtils"/> class (i.e. <see cref="F:Nautilus.Utility.AudioUtils.StandardSoundModes_3D"/>).</param>
            <returns>the <see cref="T:FMOD.Sound"/> loaded</returns>
        </member>
        <member name="M:Nautilus.Handlers.CustomSoundHandler.RegisterCustomSound(System.String,UnityEngine.AudioClip,System.String,FMOD.MODE)">
            <summary>
            Register a custom sound by an <see cref="T:UnityEngine.AudioClip"/> instance. Some vanilla game sounds can be overridden by matching the id to the <see cref="F:FMODAsset.path"/>.
            </summary>
            <param name="id">The Id of your custom sound which is used when checking which sounds to play.</param>
            <param name="audio">The AudioClip to register.</param>
            <param name="busPath">The bus path to play the sound on.</param>
            <param name="mode">The audio MODE of the sound.
            Standard values of this property can be found in the <see cref="T:Nautilus.Utility.AudioUtils"/> class (i.e. <see cref="F:Nautilus.Utility.AudioUtils.StandardSoundModes_3D"/>).</param>
            <returns>the <see cref="T:FMOD.Sound"/> loaded</returns>
        </member>
        <member name="M:Nautilus.Handlers.CustomSoundHandler.RegisterCustomSound(System.String,UnityEngine.AudioClip,FMOD.Studio.Bus,FMOD.MODE)">
            <summary>
            Register a custom sound by an <see cref="T:UnityEngine.AudioClip"/> instance. Some vanilla game sounds can be overridden by matching the id to the <see cref="F:FMODAsset.path"/>.
            </summary>
            <param name="id">The Id of your custom sound which is used when checking which sounds to play.</param>
            <param name="audio">The AudioClip to register.</param>
            <param name="bus">The bus to play the sound on.</param>
            <param name="mode">The audio MODE of the sound.
            Standard values of this property can be found in the <see cref="T:Nautilus.Utility.AudioUtils"/> class (i.e. <see cref="F:Nautilus.Utility.AudioUtils.StandardSoundModes_3D"/>).</param>
            <returns>the <see cref="T:FMOD.Sound"/> loaded</returns>
        </member>
        <member name="M:Nautilus.Handlers.CustomSoundHandler.RegisterCustomSound(System.String,Nautilus.FMod.Interfaces.IFModSound)">
            <summary>
            Registers a Custom sound by an <see cref="T:Nautilus.FMod.Interfaces.IFModSound"/> instance. IFModSound instances have custom logic for playing sounds.
            </summary>
            <param name="id">The Id of your custom sound which is used when checking which sounds to play.</param>
            <param name="fModSound">The sound IFModSound object to register.</param>
        </member>
        <member name="M:Nautilus.Handlers.CustomSoundHandler.RegisterCustomSound(System.String,FMOD.Sound,System.String)">
            <summary>
            Register a Custom sound that has been loaded using AudioUtils. Some vanilla game sounds can be overridden by matching the id to the <see cref="F:FMODAsset.path"/>.
            </summary>
            <param name="id">The Id of your custom sound which is used when checking which sounds to play.</param>
            <param name="sound">The pre loaded sound</param>
            <param name="busPath">The bus path to play the sound on.</param>
        </member>
        <member name="M:Nautilus.Handlers.CustomSoundHandler.RegisterCustomSound(System.String,FMOD.Sound,FMOD.Studio.Bus)">
            <summary>
            Register a Custom sound that has been loaded using AudioUtils. Some vanilla game sounds can be overridden by matching the id to the <see cref="F:FMODAsset.path"/>.
            </summary>
            <param name="id">The Id of your custom sound which is used when checking which sounds to play.</param>
            <param name="sound">The pre loaded sound</param>
            <param name="bus">The bus to play the sound on.</param>
        </member>
        <member name="M:Nautilus.Handlers.CustomSoundHandler.TryPlayCustomSound(System.String,FMOD.Channel@)">
            <summary>
            Try to find and play a custom <see cref="T:FMOD.Sound"/> that has been registered.
            </summary>
            <param name="id">The Id of the custom sound</param>
            <param name="channel">the <see cref="T:FMOD.Channel"/> the sound is playing on.</param>
        </member>
        <member name="M:Nautilus.Handlers.CustomSoundHandler.TryGetCustomSound(System.String,FMOD.Sound@)">
            <summary>
            Try to get a registered custom <see cref="T:FMOD.Sound"/>.
            </summary>
            <param name="id">The Id of the custom sound</param>
            <param name="sound">Outputs the <see cref="T:FMOD.Sound"/> if found and null if not found.</param>
            <returns>true or false depending on if the id was found</returns>
        </member>
        <member name="M:Nautilus.Handlers.CustomSoundHandler.TryGetCustomSoundChannel(System.Int32,FMOD.Channel@)">
            <summary>
            Try to get a playing custom sound channel for an emitter
            </summary>
            <param name="id">The emitter's ID, can be retrieved by calling <c>object.GetInstanceID()</c>.</param>
            <param name="channel">Outputs the <see cref="T:FMOD.Channel"/>.</param>
            <returns>True if found, otherwise false.</returns>
        </member>
        <member name="T:Nautilus.Handlers.EnumBuilder`1">
            <summary>
            Represents a custom enum object. This class cannot be inherited.
            </summary>
            <typeparam name="TEnum">Type of the enum.</typeparam>
        </member>
        <member name="P:Nautilus.Handlers.EnumBuilder`1.Value">
            <summary>
            The enum value corresponding to this builder.
            </summary>
        </member>
        <member name="M:Nautilus.Handlers.EnumBuilder`1.op_Implicit(Nautilus.Handlers.EnumBuilder{`0})~`0">
            <summary>
            Converts an EnumBuilder to its corresponding enum object. 
            </summary>
            <param name="enumBuilder">The Enum Builder</param>
            <returns>The enum object equivalent to this instance.</returns>
        </member>
        <member name="M:Nautilus.Handlers.EnumBuilder`1.ToString">
            <summary>
            Converts the value of this instance to a <see cref="T:System.String"/>.
            </summary>
            <returns>A string whose value is the same as this instance.</returns>
        </member>
        <member name="T:Nautilus.Handlers.EnumHandler">
            <summary>
            Class responsible to resolve anything related to adding custom enum objects.
            </summary>
        </member>
        <member name="M:Nautilus.Handlers.EnumHandler.AddEntry``1(System.String,System.Reflection.Assembly)">
            <summary>
            Adds a new custom enum object instance.
            </summary>
            <param name="name">The name for this instance. Must be unique and not contain any special characters.<br/>
            </param>
            <param name="ownerAssembly">The owner of this TechType instance.</param>
            <typeparam name="TEnum">Type of the enum to add an entry for.</typeparam>
            <returns>A reference to the created custom enum object or if the name is already in use it will return null</returns>
        </member>
        <member name="M:Nautilus.Handlers.EnumHandler.AddEntry``1(System.String)">
            <summary>
            Adds a new custom enum object instance.
            </summary>
            <param name="name">The name for this instance. Must be unique and not contain any special characters.<br/>
            </param>
            <typeparam name="TEnum">Type of the enum to add an entry for.</typeparam>
            <returns>A reference to the created custom enum object or if the name is already in use it will return null.</returns>
        </member>
        <member name="M:Nautilus.Handlers.EnumHandler.TryAddEntry``1(System.String,System.Reflection.Assembly,Nautilus.Handlers.EnumBuilder{``0}@)">
            <summary>
            Adds a new custom enum object instance.
            </summary>
            <param name="name">The name for this instance. Must be unique and not contain any special characters.<br/>
            </param>
            <param name="ownerAssembly">The owner of this TechType instance.</param>
            <param name="builder">The reference to the created custom enum object.</param>
            <typeparam name="TEnum">Type of the enum to add an entry for.</typeparam>
            <returns><see langword="true"/>if successful otherwise; <see langword="false"/>.</returns>
        </member>
        <member name="M:Nautilus.Handlers.EnumHandler.TryAddEntry``1(System.String,Nautilus.Handlers.EnumBuilder{``0}@)">
            <summary>
            Adds a new custom enum object instance.
            </summary>
            <param name="name">The name for this instance. Must be unique and not contain any special characters.<br/>
            </param>
            <param name="builder">The reference to the created custom enum object.</param>
            <typeparam name="TEnum">Type of the enum to add an entry for.</typeparam>
            <returns><see langword="true"/>if successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Nautilus.Handlers.EnumHandler.TryGetValue``1(System.String,``0@)">
            <summary>
            Safely looks for a custom enum object from another mod and outputs the instance when found.
            </summary>
            <param name="name">The name of the custom enum object.</param>
            <param name="enumValue">The custom enum object value.</param>
            <typeparam name="TEnum">Type of the enum to search for.</typeparam>
            <returns><see langword="true"/> if the object was found; otherwise, <see langword="false"/>.</returns>
            <remarks>
            Make sure to set a [BepInDependency("otherModGUID", BepInDependency.DependencyFlags.SoftDependency)] on your plugin to ensure theirs loads first.
            </remarks>
        </member>
        <member name="M:Nautilus.Handlers.EnumHandler.TryGetOwnerAssembly``1(``0,System.Reflection.Assembly@)">
            <summary>
            Safely looks for a custom enum object from another mod and outputs the instance when found.
            </summary>
            <param name="modEnumValue">The custom enum object value.</param>
            <param name="addedBy">The Assembly that added the Enum value.</param>
            <typeparam name="TEnum">Type of the enum to search for.</typeparam>
            <returns><see langword="true"/> if the Assembly was found; otherwise <see langword="false"/>.</returns>
            <remarks>
            Make sure to set a [BepInDependency("otherModGUID", BepInDependency.DependencyFlags.SoftDependency)] on your plugin to ensure theirs loads first.
            </remarks>
        </member>
        <member name="M:Nautilus.Handlers.EnumHandler.TryGetValue``1(System.String,``0@,System.Reflection.Assembly@)">
            <summary>
            Safely looks for a custom enum object from another mod and outputs the instance when found.
            </summary>
            <param name="name">The name of the custom enum object.</param>
            <param name="enumValue">The custom enum object value.</param>
            <param name="addedBy">The Assembly that added the Enum value.</param>
            <typeparam name="TEnum">Type of the enum to search for.</typeparam>
            <returns><see langword="true"/> if the object was found; otherwise <see langword="false"/>.</returns>
            <remarks>
            Make sure to set a [BepInDependency("otherModGUID", BepInDependency.DependencyFlags.SoftDependency)] on your plugin to ensure theirs loads first.
            </remarks>
        </member>
        <member name="M:Nautilus.Handlers.EnumHandler.ModdedEnumExists``1(System.String)">
            <summary>
            Safely looks for a custom enum object from another mod.
            </summary>
            <param name="name">The name of the custom enum object.</param>
            <typeparam name="TEnum">Type of the enum to search for.</typeparam>
            <returns><see langword="true"/> if the object was found; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Nautilus.Handlers.EnumExtensions">
            <summary>
            Extensions to interact more with custom enum objects.
            </summary>
        </member>
        <member name="M:Nautilus.Handlers.EnumExtensions.IsDefinedByDefault``1(``0)">
            <summary>
            Checks if an enum value is defined by default or added using Nautilus.
            </summary>
            <param name="enumValue">The enum value to look for.</param>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <returns><see langword="true"/> if the specified enum value is defined by default, otherwise; <see langword="false"/>.</returns>
        </member>
        <member name="M:Nautilus.Handlers.EnumExtensions.WithBackground(Nautilus.Handlers.EnumBuilder{CraftData.BackgroundType},Atlas.Sprite)">
            <summary>
            Adds a sprite for this instance.
            </summary>
            <param name="builder">The current custom enum object instance</param>
            <param name="backgroundSprite">The sprite to add for this instance.</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:Nautilus.Handlers.EnumExtensions.CreateCraftTreeRoot(Nautilus.Handlers.EnumBuilder{CraftTree.Type},Nautilus.Crafting.ModCraftTreeRoot@)">
            <summary>
            Creates a custom crafting tree.<br/>
            Creating a new CraftTree only makes sense if you're going to use it in a new type of <see cref="T:GhostCrafter"/>.
            </summary>
            <param name="builder">The custom enum object to make a crafting tree for.</param>
            <param name="craftTreeRoot">
            The root node for your custom craft tree, as a new <see cref="T:Nautilus.Crafting.ModCraftTreeRoot"/> instance.<br/>
            Build up your custom crafting tree from this root node.<br/>
            This tree will be automatically patched into the game.<para/>
            For more advanced usage, you can replace the default value of <see cref="F:Nautilus.Crafting.ModCraftTreeRoot.CraftTreeCreation"/> with your own custom function.
            </param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:Nautilus.Handlers.EnumExtensions.WithIcon(Nautilus.Handlers.EnumBuilder{PingType},Atlas.Sprite)">
            <summary>
            Adds an icon for this instance.
            </summary>
            <param name="builder">The current custom enum object instance.</param>
            <param name="sprite">The icon to add for this instance.</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:Nautilus.Handlers.EnumExtensions.WithIcon(Nautilus.Handlers.EnumBuilder{PingType},UnityEngine.Sprite)">
            <summary>
            Adds an icon for this instance.
            </summary>
            <param name="builder">The current custom enum object instance.</param>
            <param name="sprite">The icon to add for this instance.</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:Nautilus.Handlers.EnumExtensions.WithPdaInfo(Nautilus.Handlers.EnumBuilder{TechCategory},System.String,System.String)">
            <summary>
            Adds a display name to this instance.
            </summary>
            <param name="builder">The current enum object instance.</param>
            <param name="displayName">The display name of the Tech Category, can be anything. If null or empty, this will use the language line "TechCategory{enumName}" instead.</param>
            <param name="language">The language for the display name. Defaults to English.</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:Nautilus.Handlers.EnumExtensions.RegisterToTechGroup(Nautilus.Handlers.EnumBuilder{TechCategory},TechGroup)">
            <summary>
            Registers this TechCategory instance to a TechGroup.
            </summary>
            <param name="builder">The current custom enum object instance.</param>
            <param name="techGroup">The Tech Group to add this TechCategory to.</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:Nautilus.Handlers.EnumExtensions.WithPdaInfo(Nautilus.Handlers.EnumBuilder{TechGroup},System.String,System.String)">
            <summary>
            Adds a display name to this instance.
            </summary>
            <param name="builder">The current custom enum object instance.</param>
            <param name="displayName">The display name of the Tech Group, can be anything. If null or empty, this will use the language line "Group{enumName}" instead.</param>
            <param name="language">The language for the display name. Defaults to English.</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:Nautilus.Handlers.EnumExtensions.WithPdaInfo(Nautilus.Handlers.EnumBuilder{TechType},System.String,System.String,System.String,System.Boolean)">
            <summary>
            Adds a display name, tooltip to this instance.
            </summary>
            <param name="builder">The current custom enum object instance.</param>
            <param name="displayName">The display name of this Tech Type, can be anything. If null or empty, this will use the language line "{enumName}" instead.</param>
            <param name="tooltip">The tooltip displayed when hovered in the PDA, can be anything. If null or empty, this will use the language line "Tooltip_{enumName}" instead.</param>
            <param name="language">The language for this entry. Defaults to English.</param>
            <param name="unlockAtStart">Whether this instance should be unlocked on game start or not.</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:Nautilus.Handlers.EnumExtensions.WithIcon(Nautilus.Handlers.EnumBuilder{TechType},Atlas.Sprite)">
            <summary>
            Adds an icon for this instance.
            </summary>
            <param name="builder">The current custom enum object instance.</param>
            <param name="sprite">The icon to add for this instance.</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:Nautilus.Handlers.EnumExtensions.WithIcon(Nautilus.Handlers.EnumBuilder{TechType},UnityEngine.Sprite)">
            <summary>
            Adds an icon for this instance.
            </summary>
            <param name="builder">The current custom enum object instance.</param>
            <param name="sprite">The icon to add for this instance.</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="M:Nautilus.Handlers.EnumExtensions.WithSizeInInventory(Nautilus.Handlers.EnumBuilder{TechType},Vector2int)">
            <summary>
            Sets the size in inventory for this instance.
            </summary>
            <param name="builder">The current custom enum object instance.</param>
            <param name="size">The 2x2 vector size</param>
            <returns>A reference to this instance after the operation has completed.</returns>
        </member>
        <member name="T:Nautilus.Handlers.ItemActionHandler">
            <summary>
            A handler class for registering custom actions when left clicking or middle clicking on an item.
            </summary>
        </member>
        <member name="M:Nautilus.Handlers.ItemActionHandler.RegisterLeftClickAction(TechType,System.Action{InventoryItem},System.String,System.String,System.Predicate{InventoryItem})">
            <summary>
            Registers a custom left click action for a <see cref="T:TechType"/>
            </summary>
            <param name="targetTechType">The <see cref="T:TechType"/> to which the left click action will be assigned</param>
            <param name="callback">The method which will be called when a matching <see cref="T:InventoryItem"/> with the specified <see cref="T:TechType"/> was left-clicked</param>
            <param name="tooltip">The secondary tooltip which will appear in the description of the item. If null or empty, this will use the language line "LeftClickAction_{<paramref name="targetTechType"/>}" instead.</param>
            <param name="language">The language for the tooltip. Defaults to English.</param>
            <param name="condition">The condition which must return <see langword="true"/> for the action to be called when the item is clicked<para/>If omitted, the action will always be called</param>
        </member>
        <member name="M:Nautilus.Handlers.ItemActionHandler.RegisterMiddleClickAction(TechType,System.Action{InventoryItem},System.String,System.String,System.Predicate{InventoryItem})">
            <summary>
            Registers a custom middle click action for a <see cref="T:TechType"/>
            </summary>
            <param name="targetTechType">The <see cref="T:TechType"/> which the middle click action will be assigned</param>
            <param name="callback">The method which will be called when a matching <see cref="T:InventoryItem"/> with the specified <see cref="T:TechType"/> was middle-clicked</param>
            <param name="tooltip">The secondary tooltip which will appear in the description of the item</param>
            <param name="language">The language for the tooltip. Defaults to English.</param>
            <param name="condition">The condition which must return <see langword="true"/> for the action to be called when the item is clicked<para/>If omitted, the action will always be called</param>
        </member>
        <member name="T:Nautilus.Handlers.KnownTechHandler">
            <summary>
            A handler class for configuring custom unlocking conditions for item blueprints.
            </summary>
        </member>
        <member name="M:Nautilus.Handlers.KnownTechHandler.UnlockOnStart(TechType)">
            <summary>
            Allows you to unlock a TechType on game start.
            </summary>
            <param name="techType"></param>
        </member>
        <member name="M:Nautilus.Handlers.KnownTechHandler.SetAnalysisTechEntry(TechType,System.Collections.Generic.IEnumerable{TechType})">
            <summary>
            Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., "analysed".
            If there is already an existing AnalysisTech entry for a TechType, all the TechTypes in "techTypesToUnlock" will be
            added to the existing AnalysisTech entry unlocks.
            </summary>
            <param name="techTypeToBeAnalysed">This TechType is the criteria for all of the "unlock TechTypes"; when this TechType is unlocked, so are all the ones in that list</param>
            <param name="techTypesToUnlock">The TechTypes that will be unlocked when "techTypeToSet" is unlocked.</param>
        </member>
        <member name="M:Nautilus.Handlers.KnownTechHandler.SetAnalysisTechEntry(TechType,System.Collections.Generic.IEnumerable{TechType},System.String)">
            <summary>
            Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., "analysed".
            If there is already an existing AnalysisTech entry for a TechType, all the TechTypes in "techTypesToUnlock" will be
            added to the existing AnalysisTech entry unlocks.
            </summary>
            <param name="techTypeToBeAnalysed">This TechType is the criteria for all of the "unlock TechTypes"; when this TechType is unlocked, so are all the ones in that list</param>
            <param name="techTypesToUnlock">The TechTypes that will be unlocked when "techTypeToSet" is unlocked.</param>
            <param name="unlockMessage">The message that shows up on the right when the blueprint is unlocked. See <see cref="T:Nautilus.Handlers.KnownTechHandler.DefaultUnlockData"/> for a list of some valid parameters.</param>
        </member>
        <member name="M:Nautilus.Handlers.KnownTechHandler.SetAnalysisTechEntry(TechType,System.Collections.Generic.IEnumerable{TechType},FMODAsset)">
            <summary>
            Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., "analysed".
            If there is already an existing AnalysisTech entry for a TechType, all the TechTypes in "techTypesToUnlock" will be
            added to the existing AnalysisTech entry unlocks.
            </summary>
            <param name="techTypeToBeAnalysed">This TechType is the criteria for all of the "unlock TechTypes"; when this TechType is unlocked, so are all the ones in that list</param>
            <param name="techTypesToUnlock">The TechTypes that will be unlocked when "techTypeToSet" is unlocked.</param>
            <param name="unlockSound">The sound that plays when you unlock the blueprint.</param>
        </member>
        <member name="M:Nautilus.Handlers.KnownTechHandler.SetAnalysisTechEntry(TechType,System.Collections.Generic.IEnumerable{TechType},UnityEngine.Sprite)">
            <summary>
            Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., "analysed".
            If there is already an exisitng AnalysisTech entry for a TechType, all the TechTypes in "techTypesToUnlock" will be
            added to the existing AnalysisTech entry unlocks.
            </summary>
            <param name="techTypeToBeAnalysed">This TechType is the criteria for all of the "unlock TechTypes"; when this TechType is unlocked, so are all the ones in that list</param>
            <param name="techTypesToUnlock">The TechTypes that will be unlocked when "techTypeToSet" is unlocked.</param>
            <param name="unlockSprite">The sprite that shows up when you unlock the blueprint.</param>
        </member>
        <member name="M:Nautilus.Handlers.KnownTechHandler.SetAnalysisTechEntry(TechType,System.Collections.Generic.IEnumerable{TechType},System.String,FMODAsset)">
            <summary>
            Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., "analysed".
            If there is already an existing AnalysisTech entry for a TechType, all the TechTypes in "techTypesToUnlock" will be
            added to the existing AnalysisTech entry unlocks.
            </summary>
            <param name="techTypeToBeAnalysed">This TechType is the criteria for all of the "unlock TechTypes"; when this TechType is unlocked, so are all the ones in that list</param>
            <param name="techTypesToUnlock">The TechTypes that will be unlocked when "techTypeToSet" is unlocked.</param>
            <param name="unlockMessage">The message that shows up on the right when the blueprint is unlocked. See <see cref="T:Nautilus.Handlers.KnownTechHandler.DefaultUnlockData"/> for a list of some valid parameters.</param>
            <param name="unlockSound">The sound that plays when you unlock the blueprint. See <see cref="T:Nautilus.Handlers.KnownTechHandler.DefaultUnlockData"/> for a list of some valid parameters.</param>
        </member>
        <member name="M:Nautilus.Handlers.KnownTechHandler.SetAnalysisTechEntry(TechType,System.Collections.Generic.IEnumerable{TechType},System.String,UnityEngine.Sprite)">
            <summary>
            Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., "analysed".
            If there is already an existing AnalysisTech entry for a TechType, all the TechTypes in "techTypesToUnlock" will be
            added to the existing AnalysisTech entry unlocks.
            </summary>
            <param name="techTypeToBeAnalysed">This TechType is the criteria for all of the "unlock TechTypes"; when this TechType is unlocked, so are all the ones in that list</param>
            <param name="techTypesToUnlock">The TechTypes that will be unlocked when "techTypeToSet" is unlocked.</param>
            <param name="unlockMessage">The message that shows up on the right when the blueprint is unlocked. See <see cref="T:Nautilus.Handlers.KnownTechHandler.DefaultUnlockData"/> for a list of some valid parameters.</param>
            <param name="unlockSprite">The sprite that shows up when you unlock the blueprint.</param>
        </member>
        <member name="M:Nautilus.Handlers.KnownTechHandler.SetAnalysisTechEntry(TechType,System.Collections.Generic.IEnumerable{TechType},FMODAsset,UnityEngine.Sprite)">
            <summary>
            Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., "analysed".
            If there is already an existing AnalysisTech entry for a TechType, all the TechTypes in "techTypesToUnlock" will be
            added to the existing AnalysisTech entry unlocks.
            </summary>
            <param name="techTypeToBeAnalysed">This TechType is the criteria for all of the "unlock TechTypes"; when this TechType is unlocked, so are all the ones in that list</param>
            <param name="techTypesToUnlock">The TechTypes that will be unlocked when "techTypeToSet" is unlocked.</param>
            <param name="unlockSound">The sound that plays when you unlock the blueprint. See <see cref="T:Nautilus.Handlers.KnownTechHandler.DefaultUnlockData"/> for a list of some valid parameters.</param>
            <param name="unlockSprite">The sprite that shows up when you unlock the blueprint.</param>
        </member>
        <member name="M:Nautilus.Handlers.KnownTechHandler.SetAnalysisTechEntry(KnownTech.AnalysisTech)">
            <summary>
            Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., "analysed".
            If there is already an existing AnalysisTech entry for a TechType, all the TechTypes in <see cref="F:KnownTech.AnalysisTech.unlockTechTypes"/> will be
            added to the existing AnalysisTech entry unlocks.
            </summary>
            <param name="analysisTech">The analysis tech entry to add.</param>
        </member>
        <member name="M:Nautilus.Handlers.KnownTechHandler.SetAnalysisTechEntry(TechType,System.Collections.Generic.IEnumerable{TechType},FMODAsset,UnityEngine.Sprite,System.Collections.Generic.List{Story.StoryGoal})">
            <summary>
            Allows you to define which TechTypes are unlocked when a certain TechType is unlocked, i.e., "analysed".
            If there is already an existing AnalysisTech entry for a TechType, all the TechTypes in "techTypesToUnlock" will be
            added to the existing AnalysisTech entry unlocks.
            </summary>
            <param name="techTypeToBeAnalysed">This TechType is the criteria for all of the "unlock TechTypes"; when this TechType is unlocked, so are all the ones in that list</param>
            <param name="techTypesToUnlock">The TechTypes that will be unlocked when "techTypeToSet" is unlocked.</param>
            <param name="unlockSound">The sound that plays when you unlock the blueprint.</param>
            <param name="unlockSprite">The sprite that shows up when you unlock the blueprint.</param>
            <param name="storyGoals">The story goals that will be triggered when you unlock the blueprint.</param>
        </member>
        <member name="M:Nautilus.Handlers.KnownTechHandler.SetCompoundUnlock(TechType,System.Collections.Generic.List{TechType})">
            <summary>
            Allows you to set up a custom Compound Unlock requiring multiple techtypes to be unlocked before 1 is.
            ***Note: This will not remove any original unlock and if you need to do so you should use <see cref="M:Nautilus.Handlers.KnownTechHandler.RemoveAnalysisTechEntryFromSpecific(TechType,System.Collections.Generic.List{TechType})"/> or <see cref="M:Nautilus.Handlers.KnownTechHandler.RemoveAllCurrentAnalysisTechEntry(TechType)"/>
            </summary>
            <param name="techType"></param>
            <param name="compoundTechsForUnlock"></param>
        </member>
        <member name="M:Nautilus.Handlers.KnownTechHandler.RemoveAnalysisTechEntryFromSpecific(TechType,System.Collections.Generic.List{TechType})">
            <summary>
            Allows you to remove unlock entries for a <see cref="T:TechType"/> from specific entries.
            </summary>
            <param name="targetTechType">Target <see cref="T:TechType"/> to remove the unlocks for.</param>
            <param name="techTypes">List of <see cref="T:TechType"/> to remove the targetTechType from.</param>
        </member>
        <member name="M:Nautilus.Handlers.KnownTechHandler.RemoveAllCurrentAnalysisTechEntry(TechType)">
            <summary>
            Allows you to remove all unlock entries from a <see cref="T:TechType"/> to be able to disable or change it to a new unlock.
            ***Note: This is patch time specific so the LAST mod to call this on a techtype will be the only one to control what unlocks said type after its use.***
            </summary>
            <param name="targetTechType">Target <see cref="T:TechType"/> to remove the unlocks for.</param>
        </member>
        <member name="T:Nautilus.Handlers.KnownTechHandler.DefaultUnlockData">
            <summary>
            References to generic unlock sounds and unlock messages for the Known Tech system, matching those used in the base game.
            </summary>
        </member>
        <member name="F:Nautilus.Handlers.KnownTechHandler.DefaultUnlockData.NewCreatureDiscoveredMessage">
            <summary>Message on unlocking new creatures; "NEW LIFEFORM DISCOVERED"</summary>
        </member>
        <member name="P:Nautilus.Handlers.KnownTechHandler.DefaultUnlockData.NewCreatureDiscoveredSound">
            <summary>Sound on unlocking new creatures; "NEW LIFEFORM DISCOVERED"</summary>
        </member>
        <member name="F:Nautilus.Handlers.KnownTechHandler.DefaultUnlockData.BlueprintPickupMessage">
            <summary>Message on unlocking new blueprints from picking up items; "NEW BLUEPRINT SYNTHESIZED FROM ALIEN RESOURCE"</summary>
        </member>
        <member name="F:Nautilus.Handlers.KnownTechHandler.DefaultUnlockData.BlueprintUnlockMessage">
            <summary>Message on unlocking new blueprints from scanning; "NEW BLUEPRINT SYNTHESIZED"</summary>
        </member>
        <member name="P:Nautilus.Handlers.KnownTechHandler.DefaultUnlockData.BlueprintUnlockSound">
            <summary>Sound on unlocking new blueprints from scanning or picking up items; "NEW BLUEPRINT SYNTHESIZED"</summary>
        </member>
        <member name="P:Nautilus.Handlers.KnownTechHandler.DefaultUnlockData.BasicUnlockSound">
            <summary>Basic sound for unlocking items. Not commonly used and typically uses <see cref="F:Nautilus.Handlers.KnownTechHandler.DefaultUnlockData.BlueprintUnlockMessage"/> for its associated message.</summary>
        </member>
        <member name="T:Nautilus.Handlers.LanguageHandler">
            <summary>
            A handler class for adding or modifying language lines.
            </summary>
        </member>
        <member name="M:Nautilus.Handlers.LanguageHandler.SetLanguageLine(System.String,System.String,System.String)">
            <summary>
            Allows you to define a language entry into the game.
            </summary>
            <param name="lineId">The ID of the entry, this is what is used to get the actual text.</param>
            <param name="text">The actual text related to the entry.</param>
            <param name="language">The language for this specific entry. Defaults to English.</param>
        </member>
        <member name="M:Nautilus.Handlers.LanguageHandler.RegisterLocalizationFolder(System.String)">
            <summary>
            <para>Registers a folder path as a Multi-Language json files folder.</para>
            Please make sure that the passed folder contains json files that are properly named after the language each json file localizes.
            </summary>
            <param name="languageFolderName">the folder name. This folder is expected to be found at ModFolder/<paramref name="languageFolderName"/>.</param>
        </member>
        <member name="M:Nautilus.Handlers.LanguageHandler.RegisterLocalization(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Registers language entries for a specific language.
            </summary>
            <param name="language">The language to register the entries to.</param>
            <param name="languageStrings">The language entries to register.</param>
        </member>
        <member name="M:Nautilus.Handlers.LanguageHandler.SetTechTypeName(TechType,System.String,System.String)">
            <summary>
            Allows you to set the display name of a specific <see cref="T:TechType"/>.
            </summary>
            <param name="techType">The <see cref="T:TechType"/> whose display name that is to be changed.</param>
            <param name="text">The new display name for the chosen <see cref="T:TechType"/>.</param>
            <param name="language">The language for this entry. Defaults to English.</param>
        </member>
        <member name="M:Nautilus.Handlers.LanguageHandler.SetTechTypeTooltip(TechType,System.String,System.String)">
            <summary>
            Allows you to set the tooltip of a specific <see cref="T:TechType"/>.
            </summary>
            <param name="techType">The <see cref="T:TechType"/> whose tooltip that is to be changed.</param>
            <param name="text">The new tooltip for the chosen <see cref="T:TechType"/>.</param>
            <param name="language">The language for this entry. Defaults to English.</param>
        </member>
        <member name="T:Nautilus.Handlers.LootDistributionHandler">
            <summary>
            A handler that manages the distribution of spawned resources throughout the world. Used for fish, items, outcrops, fragments, eggs, etc...
            </summary>
        </member>
        <member name="M:Nautilus.Handlers.LootDistributionHandler.AddLootDistributionData(System.String,LootDistributionData.SrcData,UWE.WorldEntityInfo)">
            <summary>
            Adds in a custom entry into the Loot Distribution of the game.
            You must also add the <see cref="T:UWE.WorldEntityInfo"/> into the <see cref="T:UWE.WorldEntityDatabase"/> using <see cref="T:Nautilus.Handlers.WorldEntityDatabaseHandler"/>.
            </summary>
            <param name="data">The <see cref="T:LootDistributionData.SrcData"/> that contains data related to the spawning of a prefab, also contains the path to the prefab.</param>
            <param name="classId">The classId of the prefab.</param>
            <param name="info">The WorldEntityInfo of the prefab. For more information on how to set this up, see <see cref="T:Nautilus.Handlers.WorldEntityDatabaseHandler"/>.</param>
        </member>
        <member name="M:Nautilus.Handlers.LootDistributionHandler.AddLootDistributionData(System.String,System.String,System.Collections.Generic.IEnumerable{LootDistributionData.BiomeData})">
            <summary>
            Adds in a custom entry into the Loot Distribution of the game.
            You must also add the <see cref="T:UWE.WorldEntityInfo"/> into the <see cref="T:UWE.WorldEntityDatabase"/> using <see cref="T:Nautilus.Handlers.WorldEntityDatabaseHandler"/>.
            </summary>
            <param name="classId">The classId of the prefab.</param>
            <param name="prefabPath">The prefab path of the prefab.</param>
            <param name="biomeDistribution">The <see cref="T:LootDistributionData.BiomeData"/> dictating how the prefab should spawn in the world.</param>
        </member>
        <member name="M:Nautilus.Handlers.LootDistributionHandler.AddLootDistributionData(System.String,System.String,System.Collections.Generic.IEnumerable{LootDistributionData.BiomeData},UWE.WorldEntityInfo)">
            <summary>
            Adds in a custom entry into the Loot Distribution of the game.
            </summary>
            <param name="classId">The classId of the prefab.</param>
            <param name="prefabPath">The prefab path of the prefab.</param>
            <param name="biomeDistribution">The <see cref="T:LootDistributionData.BiomeData"/> dictating how the prefab should spawn in the world.</param>
            <param name="info">The WorldEntityInfo of the prefab. For more information on how to set this up, see <see cref="T:Nautilus.Handlers.WorldEntityDatabaseHandler"/>.</param>
        </member>
        <member name="M:Nautilus.Handlers.LootDistributionHandler.AddLootDistributionData(Nautilus.Assets.PrefabInfo,System.Collections.Generic.IEnumerable{LootDistributionData.BiomeData},UWE.WorldEntityInfo)">
            <summary>
            Adds in a custom entry into the Loot Distribution of the game.
            </summary>
            <param name="prefabInfo">The custom prefab which you want to spawn naturally in the game.</param>
            <param name="biomeDistribution">The <see cref="T:LootDistributionData.BiomeData"/> dictating how the prefab should spawn in the world.</param>
            <param name="info">The WorldEntityInfo of the prefab. For more information on how to set this up, see <see cref="T:Nautilus.Handlers.WorldEntityDatabaseHandler"/>.</param>
        </member>
        <member name="M:Nautilus.Handlers.LootDistributionHandler.AddLootDistributionData(System.String,LootDistributionData.SrcData)">
            <summary>
            Adds in a custom entry into the Loot Distribution of the game.
            </summary>
            <param name="classId">The classId of the prefab.</param>
            <param name="data">The <see cref="T:LootDistributionData.SrcData"/> that contains data related to the spawning of a prefab, also contains the path to the prefab.</param>
        </member>
        <member name="M:Nautilus.Handlers.LootDistributionHandler.AddLootDistributionData(System.String,LootDistributionData.BiomeData[])">
            <summary>
            Adds in a custom entry into Loot Distribution of the game.
            </summary>
            <param name="classId">The classId of the prefab.</param>
            <param name="biomeDistribution">The <see cref="T:LootDistributionData.BiomeData"/> dictating how the prefab should spawn in the world.</param>
        </member>
        <member name="M:Nautilus.Handlers.LootDistributionHandler.AddLootDistributionData(System.String,UWE.WorldEntityInfo,LootDistributionData.BiomeData[])">
            <summary>
            Adds in a custom entry into Loot Distribution of the game.
            </summary>
            <param name="classId">The classId of the prefab.</param>
            <param name="info">The WorldEntityInfo of the prefab. For more information on how to set this up, see <see cref="T:Nautilus.Handlers.WorldEntityDatabaseHandler"/>.</param>
            <param name="biomeDistribution">The <see cref="T:LootDistributionData.BiomeData"/> dictating how the prefab should spawn in the world.</param>
        </member>
        <member name="M:Nautilus.Handlers.LootDistributionHandler.EditLootDistributionData(System.String,BiomeType,System.Single,System.Int32)">
            <summary>
            Edits Loot Distribution data for existing prefabs.
            </summary>
            <param name="classId">The ClassID of the prefab. If unsure, use CraftData.GetClassIdForTechType.</param>
            <param name="biome">The <see cref="T:BiomeType"/>to change the data for.</param>
            <param name="probability">The desired probability.</param>
            <param name="count">The number to spawn at a time when spawning happens.</param>
        </member>
        <member name="M:Nautilus.Handlers.LootDistributionHandler.EditLootDistributionData(System.String,System.Collections.Generic.IEnumerable{LootDistributionData.BiomeData})">
            <summary>
            Edits Loot Distribution data for existing prefabs, for e.g. original game prefabs.
            </summary>
            <param name="classId">The ClassID of the prefab. If unsure, use CraftData.GetClassIdForTechType.</param>
            <param name="biomeDistribution">The list of <see cref="T:LootDistributionData.BiomeData"/> that contains information about how/when it should spawn in biomes.</param>
        </member>
        <member name="T:Nautilus.Handlers.ModDatabankHandler">
            <summary>
            A handler class for adding information about your mod to the "Mods" tab of the PDA's Datbabank. If you wish to add a standard PDA entry, instead see the <see cref="T:Nautilus.Handlers.PDAHandler"/> class.
            </summary>
        </member>
        <member name="M:Nautilus.Handlers.ModDatabankHandler.RegisterMod(BepInEx.PluginInfo)">
            <summary>
            Automatically adds info about your mod to the game's databank under a tab named Mods using your mod's PluginInfo.
            </summary>
            <param name="info">The PluginInfo for your mod. Pass in Info from your BepInPlugin class</param>
        </member>
        <member name="M:Nautilus.Handlers.ModDatabankHandler.RegisterMod(Nautilus.Handlers.ModDatabankHandler.ModData)">
            <summary>
            Automatically adds info about your mod to the game's databank under a tab named Mods using supplied ModData instance.
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:Nautilus.Handlers.ModDatabankHandler.ModData">
            <summary>
            Data for the encyclopedia entry of your mod.
            </summary>
        </member>
        <member name="F:Nautilus.Handlers.ModDatabankHandler.ModData.name">
            <summary>
            Name of your mod, not optional.
            </summary>
        </member>
        <member name="F:Nautilus.Handlers.ModDatabankHandler.ModData.guid">
            <summary>
            GUID, just an identifier, not optional.
            </summary>
        </member>
        <member name="F:Nautilus.Handlers.ModDatabankHandler.ModData.version">
            <summary>
            Mod version, optional.
            </summary>
        </member>
        <member name="F:Nautilus.Handlers.ModDatabankHandler.ModData.desc">
            <summary>
            Mod description, optional.
            </summary>
        </member>
        <member name="F:Nautilus.Handlers.ModDatabankHandler.ModData.image">
            <summary>
            Databank image, optional.
            </summary>
        </member>
        <member name="T:Nautilus.Handlers.OptionsPanelHandler">
            <summary>
            A handler class for registering your custom in-game mod options.
            </summary>
        </member>
        <member name="M:Nautilus.Handlers.OptionsPanelHandler.RegisterModOptions(Nautilus.Options.ModOptions)">
            <summary>
            Registers your mod options to the in-game menu.
            </summary>
            <param name="options">The mod options. Create a new child class inheriting from this one
            and add your options to it.</param>
            <seealso cref="T:Nautilus.Options.ModOptions"/>
        </member>
        <member name="M:Nautilus.Handlers.OptionsPanelHandler.RegisterModOptions``1">
            <summary>
            Generates an options menu based on the attributes and members declared in the <see cref="T:Nautilus.Json.ConfigFile"/>
            and registers it to the in-game menu.
            </summary>
            <typeparam name="T">A class derived from <see cref="T:Nautilus.Json.ConfigFile"/> to generate the options menu from.</typeparam>
            <returns>An instance of the <typeparamref name="T"/> : <see cref="T:Nautilus.Json.ConfigFile"/> with values loaded
            from the config file on disk.</returns>
        </member>
        <member name="T:Nautilus.Handlers.PDAHandler">
            <summary>
            A handler class for various PDA-related purposes:
            <list type="bullet">
            <item>Registering log entries.</item>
            <item>Registering encyclopedia (databank) entries.</item>
            <item>Defining data for scanning fragments and other items.</item>
            </list>
            </summary>
        </member>
        <member name="P:Nautilus.Handlers.PDAHandler.UnlockBasic">
            <summary>
            Sound asset used for unlocking most PDA entries, which is a short but pleasant sound. Path is '<c>event:/tools/scanner/new_encyclopediea</c>'.
            </summary>
        </member>
        <member name="P:Nautilus.Handlers.PDAHandler.UnlockImportant">
            <summary>
            <para>Subnautica:<br/>Sound asset for unlocking important PDA entries, where PDA says "Integrating new PDA data." Path is '<c>event:/loot/new_PDA_data</c>'.</para>
            <para>Below Zero:<br/>Sound asset for unlocking more important (generally story related) PDA entries. Path is '<c>event:/bz/ui/story_unlocked</c>'.</para>
            </summary>
        </member>
        <member name="M:Nautilus.Handlers.PDAHandler.EditFragmentsToScan(TechType,System.Int32)">
            <summary>
            Edits how many fragments must be scanned before unlocking the techtype's blueprint.
            </summary>
            <param name="techType">Can be either techtype of the fragment or the crafted item.</param>
            <param name="fragmentCount">The number of fragments to scan.</param>
        </member>
        <member name="M:Nautilus.Handlers.PDAHandler.EditFragmentScanTime(TechType,System.Single)">
            <summary>
            Edits the time it takes to finish scanning a fragment.
            </summary>
            <param name="techType">Can be either techtype of the fragment or the crafted item.</param>
            <param name="scanTime">The relative time spent on scanning. Default value is 1.</param>
        </member>
        <member name="M:Nautilus.Handlers.PDAHandler.AddCustomScannerEntry(PDAScanner.EntryData)">
            <summary>
            Adds in a custom <see cref="T:PDAScanner.EntryData"/>. ***Cannot be used to Change the values of a techtype that has data already!***
            </summary>
            <param name="entryData">The <see cref="T:PDAScanner.EntryData"/> of the entry. Must be populated when passed in.</param>
        </member>
        <member name="M:Nautilus.Handlers.PDAHandler.AddCustomScannerEntry(TechType,TechType,System.Boolean,System.Int32,System.Single,System.Boolean,System.String)">
            <summary>
            Registers a custom <see cref="T:PDAScanner.EntryData"/>.
            </summary>
            <param name="key">The scanned object's <see cref="T:TechType"/>. In the case of fragments, the fragment <see cref="T:TechType"/> is the key.</param>
            <param name="blueprint">The <paramref name="blueprint"/> that is unlocked when <paramref name="key"/> is scanned. In case of fragments, this is the actual <see cref="T:TechType"/> that unlocks when all fragments are scanned. Can be <see cref="F:TechType.None"/>.</param>
            <param name="isFragment">Whether the <paramref name="key"/> is a fragment or not.</param>
            <param name="totalFragmentsRequired">The total amount of objects of <paramref name="key"/> that need to be scanned to unlock the <paramref name="blueprint"/> and <paramref name="encyclopediaKey"/>.</param>
            <param name="scanTime">The amount of time in seconds it takes to scan this object.</param>
            <param name="destroyAfterScan">Whether the object should be destroyed after the scan is finished.</param>
            <param name="encyclopediaKey">The key of the encyclopedia entry that is unlocked when all the fragments are scanned.</param>
        </member>
        <member name="M:Nautilus.Handlers.PDAHandler.AddCustomScannerEntry(TechType,System.Single,System.Boolean,System.String)">
            <summary>
            Registers a custom <see cref="T:PDAScanner.EntryData"/>. This simplified overload is for prefabs that do not have fragments.
            </summary>
            <param name="key">The scanned object's <see cref="T:TechType"/>. In the case of fragments, the fragment <see cref="T:TechType"/> is the key.</param>
            <param name="scanTime">The amount of time in seconds it takes to scan this object.</param>
            <param name="destroyAfterScan">Whether the object should be destroyed after the scan is finished.</param>
            <param name="encyclopediaKey">The key of the encyclopedia entry that is unlocked when <paramref name="key"/> is scanned.</param>
        </member>
        <member name="M:Nautilus.Handlers.PDAHandler.AddLogEntry(System.String,System.String,FMODAsset,UnityEngine.Sprite)">
            <summary>
            Adds a custom PDA log entry message. Can be played by the Story Goal system (see <see cref="T:Nautilus.Handlers.StoryGoalHandler"/>) or manually through <see cref="M:PDALog.Add(System.String,System.Boolean)"/>.
            </summary>
            <param name="key">The key (unique identifier) for this entry.</param>
            <param name="languageKey">The subtitles language key for this entry. Also see: <see cref="M:Nautilus.Handlers.LanguageHandler.SetLanguageLine(System.String,System.String,System.String)"/>.</param>
            <param name="sound"><para>The sound that will be played once this log entry is unlocked or played through the PDA's Log tab.</para>
            <para>Note that the SoundQueue system (which plays the PDA sounds) accesses the FMODAsset's "id" field rather than the path, so make sure it is assigned properly.</para></param>
            <param name="icon">The icon that will be used in the Log tab for this entry. if unassigned, it will use the default log entry icon.</param>
        </member>
        <member name="M:Nautilus.Handlers.PDAHandler.AddLogEntry(System.String,System.String,FMOD.Sound,UnityEngine.Sprite)">
            <summary>
            Adds a custom PDA log entry message. Can be played by the Story Goal system (see <see cref="T:Nautilus.Handlers.StoryGoalHandler"/>) or manually through <see cref="M:PDALog.Add(System.String,System.Boolean)"/>.
            </summary>
            <param name="key">The key (unique identifier) for this entry. Also used to create the sound asset, so make sure this string is <i>truly</i> unique!</param>
            <param name="languageKey">The subtitles language key for this entry. Also see: <see cref="M:Nautilus.Handlers.LanguageHandler.SetLanguageLine(System.String,System.String,System.String)"/>.</param>
            <param name="sound">The sound that will be played once this log entry is unlocked or played through the PDA's Log tab.</param>
            <param name="icon">The icon that will be used in the Log tab for this entry. if unassigned, it will use the default log entry icon.</param>
        </member>
        <member name="M:Nautilus.Handlers.PDAHandler.AddLogEntry(System.String,System.String,UnityEngine.AudioClip,UnityEngine.Sprite)">
            <summary>
            Adds a custom PDA log entry message. Can be played by the Story Goal system (see <see cref="T:Nautilus.Handlers.StoryGoalHandler"/>) or manually through <see cref="M:PDALog.Add(System.String,System.Boolean)"/>.
            </summary>
            <param name="key">The key (unique identifier) for this entry. Also used to create the sound asset, so make sure this string is <i>truly</i> unique!</param>
            <param name="languageKey">The subtitles language key for this entry. Also see: <see cref="M:Nautilus.Handlers.LanguageHandler.SetLanguageLine(System.String,System.String,System.String)"/>.</param>
            <param name="audioClip">The sound that will be played once this log entry is unlocked or played through the PDA's Log tab. This is automatically converted to an FMOD sound.</param>
            <param name="icon">The icon that will be used in the Log tab for this entry. if unassigned, it will use the default log entry icon.</param>
        </member>
        <member name="M:Nautilus.Handlers.PDAHandler.AddLogEntry(System.String,System.String,System.String,UnityEngine.Sprite)">
            <summary>
            Adds a custom PDA log entry message. Can be played by the Story Goal system (see <see cref="T:Nautilus.Handlers.StoryGoalHandler"/>) or manually through <see cref="M:PDALog.Add(System.String,System.Boolean)"/>.
            </summary>
            <param name="key">The key (unique identifier) for this entry. Also used to create the sound asset, so make sure this string is <i>truly</i> unique!</param>
            <param name="languageKey">The subtitles language key for this entry. Also see: <see cref="M:Nautilus.Handlers.LanguageHandler.SetLanguageLine(System.String,System.String,System.String)"/>.</param>
            <param name="soundFilePath">The file path on the disk to the sound that will be played once this log entry is unlocked or played through the PDA's Log tab.</param>
            <param name="icon">The icon that will be used in the Log tab for this entry. if unassigned, it will use the default log entry icon.</param>
        </member>
        <member name="M:Nautilus.Handlers.PDAHandler.AddLogEntry(System.String,System.String,Nautilus.FMod.Interfaces.IFModSound,UnityEngine.Sprite)">
            <summary>
            Adds a custom PDA log entry message. Can be played by the Story Goal system (see <see cref="T:Nautilus.Handlers.StoryGoalHandler"/>) or manually through <see cref="M:PDALog.Add(System.String,System.Boolean)"/>.
            </summary>
            <param name="key">The key (unique identifier) for this entry. Also used to create the sound asset, so make sure this string is <i>truly</i> unique!</param>
            <param name="languageKey">The subtitles language key for this entry. Also see: <see cref="M:Nautilus.Handlers.LanguageHandler.SetLanguageLine(System.String,System.String,System.String)"/>.</param>
            <param name="fmodSound">The <see cref="T:Nautilus.FMod.Interfaces.IFModSound"/> instance that is used to create a custom sound. IFModSound instances have custom logic for playing sounds. that is accessed when this log entry is played.</param>
            <param name="icon">The icon that will be used in the Log tab for this entry. if unassigned, it will use the default log entry icon.</param>
        </member>
        <member name="M:Nautilus.Handlers.PDAHandler.AddEncyclopediaEntry(PDAEncyclopedia.EntryData)">
            <summary>
            Adds custom entry.
            </summary>
            <param name="entry">The <see cref="T:PDAEncyclopedia.EntryData"/> entry.</param>
        </member>
        <member name="M:Nautilus.Handlers.PDAHandler.AddEncyclopediaEntry(System.String,System.String,System.String,System.String,UnityEngine.Texture2D,UnityEngine.Sprite,FMODAsset,FMODAsset)">
            <summary>
            Registers a single encyclopedia entry into the game.
            </summary>
            <param name="key">Key (internal ID) of this PDA entry, primarily used for the language system.</param>
            <param name="path"><para>Path to this entry in the databank.</para>
            <para>To find examples of this string, open "Subnautica_Data\StreamingAssets\SNUnmanagedData\LanguageFiles\English.json" and search for "EncyPath".
            Remember to omit the "EncyPath_" prefix from these language keys. An example of a proper value is: "Lifeforms/Fauna/Leviathans".</para>
            <para>A list of all Databank paths can also be found in
            <see href="https://subnauticamodding.github.io/Nautilus/tutorials/databank-entries.html#creating-an-entry-path">this section</see>
            of Nautilus's documentation.</para>
            </param>
            <param name="title">Displayed title of the PDA entry in English. If set to null, you must implement your own translations. Language key is 'Ency_{<paramref name="key"/>}'.</param>
            <param name="desc">Displayed description of the PDA entry in English. If set to null, you must implement your own translations. Language key is 'EncyDesc_{<paramref name="key"/>}'.</param>
            <param name="image">Databank entry image. Can be null.</param>
            <param name="popupImage">Small popup image in the notification. Can be null.</param>
            <param name="unlockSound">Sound on unlock. Typical values are <see cref="P:Nautilus.Handlers.PDAHandler.UnlockBasic"/> and <see cref="P:Nautilus.Handlers.PDAHandler.UnlockImportant"/>. If unassigned, will have a default value of <see cref="P:Nautilus.Handlers.PDAHandler.UnlockBasic"/>.</param>
            <param name="voiceLog">Audio player that will be displayed inside this PDA entry, typically used for voice logs. Can be null.</param>
        </member>
        <member name="T:Nautilus.Handlers.PrefabHandler">
            <summary>
            A handler for registering prefabs into the game.
            </summary>
        </member>
        <member name="P:Nautilus.Handlers.PrefabHandler.Prefabs">
            <summary>
            A collection of custom prefabs to add to the game.
            </summary>
        </member>
        <member name="T:Nautilus.Handlers.PrefabCollectionExtensions">
            <summary>
            Represents extension methods for the <see cref="T:Nautilus.Handlers.PrefabCollection"/> class.
            </summary>
        </member>
        <member name="M:Nautilus.Handlers.PrefabCollectionExtensions.RegisterPrefab(Nautilus.Handlers.PrefabCollection,Nautilus.Assets.ICustomPrefab)">
            <summary>
            Registers a <see cref="T:Nautilus.Assets.CustomPrefab"/> into the game.
            </summary>
            <param name="collection">The collection to register to.</param>
            <param name="customPrefab">The custom prefab to register.</param>
        </member>
        <member name="M:Nautilus.Handlers.PrefabCollectionExtensions.UnregisterPrefab(Nautilus.Handlers.PrefabCollection,Nautilus.Assets.ICustomPrefab)">
            <summary>
            Unregisters a <see cref="T:Nautilus.Assets.CustomPrefab"/> from the game.
            </summary>
            <param name="collection">The collection to unregister from.</param>
            <param name="customPrefab">The custom prefab to unregister.</param>
        </member>
        <member name="T:Nautilus.Handlers.PrefabCollection">
            <summary>
            Represents a collection of <see cref="T:Nautilus.Assets.PrefabInfo"/> as keys and prefab factory as values.
            </summary>
        </member>
        <member name="M:Nautilus.Handlers.PrefabCollection.Add(Nautilus.Assets.PrefabInfo,Nautilus.Assets.PrefabFactoryAsync,Nautilus.Assets.PrefabPostProcessorAsync)">
            <summary>
            Adds a prefab info with the function that constructs the game object into the game.
            </summary>
            <param name="info">The prefab info to register.</param>
            <param name="prefabFactory">The function that constructs the game object for this prefab info.</param>
            <param name="postProcessor">The prefab post processor that will be invoked after Nautilus's prefab processing.</param>
        </member>
        <member name="M:Nautilus.Handlers.PrefabCollection.Remove(Nautilus.Assets.PrefabInfo)">
            <summary>
            Removes a prefab info from the game. This leads to unregistering the specified prefab info from the game.
            </summary>
            <param name="info">The prefab info to unregister.</param>
            <returns><see keyword="true"/> if the element is successfully found and removed; otherwise, <see keyword="false"/>.
            This method returns <see keyword="false"/> if the prefab info is not found.</returns>
        </member>
        <member name="M:Nautilus.Handlers.PrefabCollection.ContainsPrefabInfo(Nautilus.Assets.PrefabInfo)">
            <summary>
            Determines whether the provided prefab info is registered.
            </summary>
            <param name="info">The prefab info to look for</param>
            <returns><see langword="true"/> if found; otherwise, <see keyword="false"/>.</returns>
        </member>
        <member name="M:Nautilus.Handlers.PrefabCollection.TryGetPrefabForInfo(Nautilus.Assets.PrefabInfo,Nautilus.Assets.PrefabFactoryAsync@)">
            <summary>
            Gets the prefab factory associated with the provided info.
            </summary>
            <param name="info">The info of the prefab factory to get.</param>
            <param name="prefabFactory">The returned prefab factory. If nothing was found for the prefab info specified, this will be set to the default initialization instead.</param>
            <returns><see langword="true"/> if found; otherwise, <see keyword="false"/>.</returns>
        </member>
        <member name="M:Nautilus.Handlers.PrefabCollection.TryGetPostProcessorForInfo(Nautilus.Assets.PrefabInfo,Nautilus.Assets.PrefabPostProcessorAsync@)">
            <summary>
            Gets the prefab post processor associated with the provided info.
            </summary>
            <param name="info">The info of the post processor to get.</param>
            <param name="postProcessor">The returned post processor. If nothing was found for the prefab info specified, this will be set to the default initialization instead.</param>
            <returns><see langword="true"/> if found; otherwise, <see keyword="false"/>.</returns>
        </member>
        <member name="M:Nautilus.Handlers.PrefabCollection.TryGetInfoForClassId(System.String,Nautilus.Assets.PrefabInfo@)">
            <summary>
            Gets the prefab info associated with the provided class ID.
            </summary>
            <param name="classId">The class ID of the prefab info to get.</param>
            <param name="info">The returned prefab info. If nothing was found for the class ID specified, this will be set to the default initialization instead.</param>
            <returns>True if found; otherwise false.</returns>
        </member>
        <member name="M:Nautilus.Handlers.PrefabCollection.TryGetInfoForFileName(System.String,Nautilus.Assets.PrefabInfo@)">
            <summary>
            Gets the prefab info associated with the provided file name.
            </summary>
            <param name="fileName">The file name of the prefab info to get.</param>
            <param name="info">The returned prefab info. If nothing was found for the file name specified, this will be set to the default initialization instead.</param>
            <returns>True if found; otherwise false.</returns>
        </member>
        <member name="M:Nautilus.Handlers.PrefabCollection.TryGetInfoForTechType(TechType,Nautilus.Assets.PrefabInfo@)">
            <summary>
            Gets the prefab info associated with the provided tech type.
            </summary>
            <param name="techType">The tech type of the prefab info to get.</param>
            <param name="info">The returned prefab info. If nothing was found for the tech type specified, this will be set to the default initialization instead.</param>
            <returns>True if found; otherwise false.</returns>
        </member>
        <member name="T:Nautilus.Handlers.SaveDataHandler">
            <summary>
            A handler class for registering your <see cref="T:Nautilus.Json.SaveDataCache"/>.
            </summary>
        </member>
        <member name="M:Nautilus.Handlers.SaveDataHandler.RegisterSaveDataCache``1">
            <summary>
            Registers your <see cref="T:Nautilus.Json.SaveDataCache"/> to be automatically loaded and saved whenever the game is.
            </summary>
            <typeparam name="T">A class derived from <see cref="T:Nautilus.Json.SaveDataCache"/> to hold your save data.</typeparam>
            <returns>An instance of the <typeparamref name="T"/> : <see cref="T:Nautilus.Json.SaveDataCache"/> with values loaded
            from the json file on disk whenever a save slot is loaded.</returns>
        </member>
        <member name="T:Nautilus.Handlers.SpriteHandler">
            <summary>
            A handler class for adding custom sprites into the game.
            </summary>
        </member>
        <member name="M:Nautilus.Handlers.SpriteHandler.RegisterSprite(SpriteManager.Group,System.String,Atlas.Sprite)">
            <summary>
            Registers a new sprite to the game.
            </summary>
            <param name="group">The sprite group this sprite will be added to.</param>
            <param name="id">The sprite internal identifier.</param>
            <param name="sprite">The sprite to be added.</param>
        </member>
        <member name="M:Nautilus.Handlers.SpriteHandler.RegisterSprite(TechType,Atlas.Sprite)">
            <summary>
            Registers a new sprite to the game.
            </summary>
            <param name="type">The techtype paired to this sprite.</param>
            <param name="sprite">The sprite to be added.</param>
        </member>
        <member name="M:Nautilus.Handlers.SpriteHandler.RegisterSprite(SpriteManager.Group,System.String,UnityEngine.Sprite)">
            <summary>
            Registers a new sprite to the game.
            </summary>
            <param name="group">The sprite group this sprite will be added to.</param>
            <param name="id">The sprite internal identifier.</param>
            <param name="sprite">The sprite to be added.</param>
        </member>
        <member name="M:Nautilus.Handlers.SpriteHandler.RegisterSprite(TechType,UnityEngine.Sprite)">
            <summary>
            Registers a new sprite to the game.
            </summary>
            <param name="type">The techtype paired to this sprite.</param>
            <param name="sprite">The sprite to be added.</param>
        </member>
        <member name="M:Nautilus.Handlers.SpriteHandler.RegisterSprite(TechType,System.String)">
            <summary>
            Registers a new sprite to the game.
            </summary>
            <param name="type">The techtype paired to this sprite.</param>
            <param name="filePathToImage">The file path to image to be converted into a sprite.</param>
            <seealso cref="M:Nautilus.Utility.ImageUtils.LoadSpriteFromFile(System.String,UnityEngine.TextureFormat)" />
        </member>
        <member name="M:Nautilus.Handlers.SpriteHandler.RegisterSprite(TechType,System.String,UnityEngine.TextureFormat)">
            <summary>
            Registers a new sprite to the game.
            </summary>
            <param name="type">The techtype paired to this sprite.</param>
            <param name="filePathToImage">The file path to image to be converted into a sprite.</param>
            <param name="format"><para>The texture format. By default, this uses <see cref="F:UnityEngine.TextureFormat.BC7" />.</para>
            <para>https://docs.unity3d.com/ScriptReference/TextureFormat.BC7.html</para>
            <para>Don't change this unless you really know what you're doing.</para></param>
            <seealso cref="M:Nautilus.Utility.ImageUtils.LoadSpriteFromFile(System.String,UnityEngine.TextureFormat)" />
        </member>
        <member name="M:Nautilus.Handlers.SpriteHandler.RegisterSprite(SpriteManager.Group,System.String,System.String)">
            <summary>
            Registers a new sprite to the game.
            </summary>
            <param name="group">The sprite group.</param>
            <param name="id">The sprite internal identifier.</param>
            <param name="filePathToImage">The file path to image.</param>
            <seealso cref="M:Nautilus.Utility.ImageUtils.LoadSpriteFromFile(System.String,UnityEngine.TextureFormat)" />
        </member>
        <member name="M:Nautilus.Handlers.SpriteHandler.RegisterSprite(SpriteManager.Group,System.String,System.String,UnityEngine.TextureFormat)">
            <summary>
            Registers a new sprite to the game.
            </summary>
            <param name="group">The sprite group.</param>
            <param name="id">The sprite internal identifier.</param>
            <param name="filePathToImage">The file path to image.</param>
            <param name="format"><para>The texture format. By default, this uses <see cref="F:UnityEngine.TextureFormat.BC7" />.</para>
            <para>https://docs.unity3d.com/ScriptReference/TextureFormat.BC7.html</para>
            <para>Don't change this unless you really know what you're doing.</para></param>
            <seealso cref="M:Nautilus.Utility.ImageUtils.LoadSpriteFromFile(System.String,UnityEngine.TextureFormat)" />
        </member>
        <member name="T:Nautilus.Handlers.StoryGoalHandler">
            <summary>
            <para>A handler class for interacting with all of the major goal systems in Subnautica, which are essential for the's game progression.</para>
            <para>Allows for important game events to be triggered after a specified action is completed.</para>
            </summary>
        </member>
        <member name="M:Nautilus.Handlers.StoryGoalHandler.RegisterItemGoal(System.String,Story.GoalType,TechType,System.Single)">
            <summary>
            <para>Registers a goal that is completed when an object with the given TechType is picked up, equipped, or crafted through the Mobile Vehicle Bay.</para>
            <para><b>Important:</b> This method can be called <b>as many times as needed</b> to add different goals to the same TechType.</para>
            </summary>
            <param name="key">The unique identifier, required for all types of StoryGoals.</param>
            <param name="goalType">If assigned a value other than 'Story', this will determine the automatic response to being triggered. Can add a PDA log, Radio message or Databank entry.</param>
            <param name="delay">StoryGoal listeners will not be notified until this many seconds after the goal is completed.</param>
            <param name="techType">The TechType that causes this goal to trigger, when picked up, equipped or crafted through the Mobile Vehicle Bay.</param>
            <returns>The registered <see cref="T:Story.ItemGoal"/>.</returns>
        </member>
        <member name="M:Nautilus.Handlers.StoryGoalHandler.RegisterBiomeGoal(System.String,Story.GoalType,System.String,System.Single,System.Single)">
            <summary>
            Registers a goal that is completed when the player stays in a given biome for a specified period of time.
            </summary>
            <param name="key">The unique identifier, required for all types of StoryGoals.</param>
            <param name="goalType">If assigned a value other than 'Story', this will determine the automatic response to being triggered. Can add a PDA log, Radio message or Databank entry.</param>
            <param name="delay">StoryGoal listeners will not be notified until this many seconds after the goal is completed.</param>
            <param name="biomeName">The biome that must be entered to trigger this goal.</param>
            <param name="minStayDuration">The minimum amount of time the player must stay in the given biome.</param>
            <returns>The registered <see cref="T:Story.BiomeGoal"/>.</returns>
        </member>
        <member name="M:Nautilus.Handlers.StoryGoalHandler.RegisterLocationGoal(System.String,Story.GoalType,UnityEngine.Vector3,System.Single,System.Single,System.Single)">
            <summary>
            Registers a goal that is completed when the player stays within range of a certain position for a specified period of time.
            </summary>
            <param name="key">The unique identifier, required for all types of StoryGoals.</param>
            <param name="goalType">If assigned a value other than 'Story', this will determine the automatic response to being triggered. Can add a PDA log, Radio message or Databank entry.</param>
            <param name="delay">StoryGoal listeners will not be notified until this many seconds after the goal is completed.</param>
            <param name="position">The center of the sphere that must be occupied.</param>
            <param name="range">The radius of the sphere that must be occupied.</param>
            <param name="minStayDuration">The minimum amount of time the player must stay for this goal to be completed.</param>
            <returns>The registered <see cref="T:Story.LocationGoal"/>.</returns>
        </member>
        <member name="M:Nautilus.Handlers.StoryGoalHandler.RegisterCompoundGoal(System.String,Story.GoalType,System.Single,System.String[])">
            <summary>
            Registers a goal that is completed when all required "precondition" goals have been completed
            </summary>
            <param name="key">The unique identifier, required for all types of StoryGoals.</param>
            <param name="goalType">If assigned a value other than 'Story', this will determine the automatic response to being triggered. Can add a PDA log, Radio message or Databank entry.</param>
            <param name="delay">StoryGoal listeners will not be notified until this many seconds after the goal is completed.</param>
            <param name="requiredGoals">The list of all goals that must be completed before this goal is marked as complete.</param>
            <returns>The registered <see cref="T:Story.CompoundGoal"/>.</returns>
        </member>
        <member name="M:Nautilus.Handlers.StoryGoalHandler.RegisterOnGoalUnlockData(System.String,Story.UnlockBlueprintData[],Story.UnlockSignalData[],Story.UnlockItemData[],GameAchievements.Id[])">
            <summary>
            <para>Registers a new <see cref="T:Story.OnGoalUnlock"/> object for an existing goal. Handles complex actions that occur with the goal's completion.</para>
            <para><b>Important:</b> Since these are stored in a dictionary, only <b>one</b> <see cref="T:Story.OnGoalUnlock"/> object can be added for each specific goal key. Therefore, be careful when adding unlock data to base-game features.</para>
            </summary>
            <param name="goal">The goal that is associated with this action.</param>
            <param name="blueprints">Array of blueprints that are unlocked alongside the given goal. The class has no constructor, so make sure you assign every field properly.</param>
            <param name="signals">Array of signals that are unlocked alongside the given goal. The class has no constructor, so make sure you assign every field properly.</param>
            <param name="items">Array of items that are unlocked alongside the given goal. The class has no constructor, so make sure you assign every field properly.</param>
            <param name="achievements">Array of achievements that are unlocked alongside the given goal.</param>
            <returns>The registered <see cref="T:Story.OnGoalUnlock"/> object.</returns>
        </member>
        <member name="M:Nautilus.Handlers.StoryGoalHandler.RegisterCustomEvent(System.String,System.Action)">
            <summary>
            Registers a given <see cref="T:System.Action"/> to be performed when its associated goal is completed.
            </summary>
            <param name="key">The key of the goal that triggers the <paramref name="customEventCallback"/>.</param>
            <param name="customEventCallback">The method that is called when the associated goal is completed. The name of the goal will be passed as a parameter.</param>
        </member>
        <member name="M:Nautilus.Handlers.StoryGoalHandler.UnregisterCustomEvent(System.String,System.Action)">
            <summary>
            Unregisters a custom event.
            </summary>
            <param name="key">The key of the goal that triggers the <paramref name="customEventCallback"/>.</param>
            <param name="customEventCallback">The method to unregister.</param>
        </member>
        <member name="T:Nautilus.Handlers.SurvivalHandler">
            <summary>
            Handler class that relates to the <see cref="T:Survival"/> component. Allows the defining of oxygen or health gains when consuming specific items.
            </summary>
        </member>
        <member name="M:Nautilus.Handlers.SurvivalHandler.GiveOxygenOnConsume(TechType,System.Single,System.Boolean)">
            <summary>
            <para>makes the item gives oxygen on use.</para>
            </summary>
            <param name="techType">the TechType that you want to make it give oxygen on use</param>
            <param name="oxygenGiven">the oxygen amount the item gives</param>
            <param name="isEdible">set it to <see langword="true" /> if the item is edible and has the <see cref="T:Eatable"/> component attached to it. 
            <para>defaults to <see langword="false" /></para>
            </param>
        </member>
        <member name="M:Nautilus.Handlers.SurvivalHandler.GiveHealthOnConsume(TechType,System.Single,System.Boolean)">
            <summary>
            <para>makes the item Heal the player on consume.</para>
            </summary>
            <param name="techType">the TechType that you want it to heal back</param>
            <param name="healthBack">amount to heal the player</param>
            <param name="isEdible">set it to <see langword="true" /> if the item is edible and has the <see cref="T:Eatable"/> component attached to it. 
            <para>defaults to <see langword="false" /></para>
            </param>
        </member>
        <member name="T:Nautilus.Handlers.WorldEntityDatabaseHandler">
            <summary>
            A handler class for the <see cref="T:UWE.WorldEntityDatabase"/>. This class is essential for the game's Loot Distribution System to work properly.
            </summary>
        </member>
        <member name="M:Nautilus.Handlers.WorldEntityDatabaseHandler.AddCustomInfo(System.String,TechType,UnityEngine.Vector3,System.Boolean,LargeWorldEntity.CellLevel,EntitySlot.Type)">
            <summary>
            Adds in a custom <see cref="T:UWE.WorldEntityInfo"/> to the <see cref="T:UWE.WorldEntityDatabase"/> of the game.
            It contains information about the entity, like its <see cref="T:LargeWorldEntity.CellLevel"/>, its <see cref="T:EntitySlotData.EntitySlotType"/>, etc.
            </summary>
            <param name="classId">The classId of the entity.</param>
            <param name="techType">The <see cref="T:TechType"/> of the entity.</param>
            <param name="prefabZUp">Whether the prefab's Z-axis should be facing up, when spawned.</param>
            <param name="cellLevel">The <see cref="T:LargeWorldEntity.CellLevel"/> of the entity.</param>
            <param name="slotType">The <see cref="T:EntitySlot.Type"/> of the entity. Dictates which "slots" are suitable for this entity to spawn in. For e.g., most in-crate fragments have a <see cref="F:EntitySlot.Type.Small"/> slot type.</param>
            <param name="localScale">The scale that the entity's local scale is set to when spawned.</param>
        </member>
        <member name="M:Nautilus.Handlers.WorldEntityDatabaseHandler.AddCustomInfo(System.String,UWE.WorldEntityInfo)">
            <summary>
            Adds in a custom <see cref="T:UWE.WorldEntityInfo"/> to the <see cref="T:UWE.WorldEntityDatabase"/> of the game.
            It contains information about the entity, like its <see cref="T:LargeWorldEntity.CellLevel"/>, its <see cref="T:EntitySlot.Type"/>, etc.
            </summary>
            <param name="classId">The classID of the entity whose data you are adding in.</param>
            <param name="data">The <see cref="T:UWE.WorldEntityInfo"/> data. Data is stored in the fields of the class, so they must be populated when passed in.</param>
        </member>
        <member name="T:Nautilus.Initializer">
            <summary>
            WARNING: This class is for use only by BepInEx.
            </summary>
        </member>
        <member name="M:Nautilus.Initializer.#ctor">
            <summary>
            WARNING: This method is for use only by BepInEx.
            </summary>
        </member>
        <member name="T:Nautilus.Json.Attributes.FileNameAttribute">
            <summary>
            Attribute used to specify a file name for use with a <see cref="T:Nautilus.Json.JsonFile"/>.
            </summary>
        </member>
        <member name="P:Nautilus.Json.Attributes.FileNameAttribute.FileName">
            <summary>
            The filename.
            </summary>
        </member>
        <member name="M:Nautilus.Json.Attributes.FileNameAttribute.#ctor(System.String)">
            <summary>
            Used to specify the file name for a <see cref="T:Nautilus.Json.JsonFile"/>.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="T:Nautilus.Json.ConfigFile">
            <summary>
            A simple implementation of <see cref="T:Nautilus.Json.Interfaces.IJsonFile"/> for use with config files.
            </summary>
        </member>
        <member name="P:Nautilus.Json.ConfigFile.JsonFilePath">
            <summary>
            The file path at which the JSON file is accessible for reading and writing.
            </summary>
        </member>
        <member name="P:Nautilus.Json.ConfigFile.AlwaysIncludedJsonConverters">
            <summary>
            The <see cref="T:Newtonsoft.Json.JsonConverter"/>s that should always be used when reading/writing JSON data.
            </summary>
            <seealso cref="F:Nautilus.Json.ConfigFile.alwaysIncludedJsonConverters"/>
        </member>
        <member name="M:Nautilus.Json.ConfigFile.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Nautilus.Json.ConfigFile"/>, parsing the filename and subfolder from a
            <see cref="T:Nautilus.Json.ConfigFileAttribute"/> if declared, or with default values otherwise.
            </summary>
        </member>
        <member name="M:Nautilus.Json.ConfigFile.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Nautilus.Json.ConfigFile"/>.
            </summary>
            <param name="fileName">The name of the <see cref="T:Nautilus.Json.ConfigFile"/>, "config" by default.</param>
            <param name="subfolder">Optional subfolder for the <see cref="T:Nautilus.Json.ConfigFile"/>.</param>
            <example>
            <code>
            using Nautilus.Options;
            using UnityEngine;
            
            public class MyConfig : ConfigFile
            {
                public KeyCode ActivationKey { get; set; } = KeyCode.Escape;
                public MyConfig() : base("options", "Config Files") { }
                // The config file will be stored at the path "QMods\YourModName\Config Files\options.json"
            }
            </code>
            </example>
        </member>
        <member name="F:Nautilus.Json.ConfigFile.OnStartedLoading">
            <summary>
            An event that is invoked whenever the <see cref="T:Nautilus.Json.ConfigFile"/> is about to load data from disk.
            </summary>
        </member>
        <member name="F:Nautilus.Json.ConfigFile.OnFinishedLoading">
            <summary>
            An event that is invoked whenever the <see cref="T:Nautilus.Json.ConfigFile"/> has finished loading data from disk.
            </summary>
        </member>
        <member name="F:Nautilus.Json.ConfigFile.OnStartedSaving">
            <summary>
            An event that is invoked whenever the <see cref="T:Nautilus.Json.ConfigFile"/> is about to save data to disk.
            </summary>
        </member>
        <member name="F:Nautilus.Json.ConfigFile.OnFinishedSaving">
            <summary>
            An event that is invoked whenever the <see cref="T:Nautilus.Json.ConfigFile"/> has finished saving data to disk.
            </summary>
        </member>
        <member name="M:Nautilus.Json.ConfigFile.Load(System.Boolean)">
            <summary>
            Loads the JSON properties from the file on disk into the <see cref="T:Nautilus.Json.ConfigFile"/>.
            </summary>
            <param name="createFileIfNotExist">Whether a new JSON file should be created with default values if it does not
            already exist.</param>
            <seealso cref="M:Nautilus.Json.ConfigFile.Save"/>
            <seealso cref="M:Nautilus.Json.ConfigFile.LoadWithConverters(System.Boolean,Newtonsoft.Json.JsonConverter[])"/>
        </member>
        <member name="M:Nautilus.Json.ConfigFile.Save">
            <summary>
            Saves the current fields and properties of the <see cref="T:Nautilus.Json.ConfigFile"/> as JSON properties to the file on disk.
            </summary>
            <seealso cref="M:Nautilus.Json.ConfigFile.Load(System.Boolean)"/>
            <seealso cref="M:Nautilus.Json.ConfigFile.SaveWithConverters(Newtonsoft.Json.JsonConverter[])"/>
        </member>
        <member name="M:Nautilus.Json.ConfigFile.LoadWithConverters(System.Boolean,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Loads the JSON properties from the file on disk into the <see cref="T:Nautilus.Json.ConfigFile"/>.
            </summary>
            <param name="createFileIfNotExist">Whether a new JSON file should be created with default values if it does not
            already exist.</param>
            <param name="jsonConverters">Optional <see cref="T:Newtonsoft.Json.JsonConverter"/>s to be used for serialization.
            The <see cref="P:Nautilus.Json.ConfigFile.AlwaysIncludedJsonConverters"/> will always be used, regardless of whether you pass them.</param>
            <seealso cref="M:Nautilus.Json.ConfigFile.SaveWithConverters(Newtonsoft.Json.JsonConverter[])"/>
            <seealso cref="M:Nautilus.Json.ConfigFile.Load(System.Boolean)"/>
        </member>
        <member name="M:Nautilus.Json.ConfigFile.SaveWithConverters(Newtonsoft.Json.JsonConverter[])">
            <summary>
            Saves the current fields and properties of the <see cref="T:Nautilus.Json.ConfigFile"/> as JSON properties to the file on disk.
            </summary>
            <param name="jsonConverters">Optional <see cref="T:Newtonsoft.Json.JsonConverter"/>s to be used for deserialization.
            The <see cref="P:Nautilus.Json.ConfigFile.AlwaysIncludedJsonConverters"/> will always be used, regardless of whether you pass them.</param>
            <seealso cref="M:Nautilus.Json.ConfigFile.LoadWithConverters(System.Boolean,Newtonsoft.Json.JsonConverter[])"/>
            <seealso cref="M:Nautilus.Json.ConfigFile.Save"/>
        </member>
        <member name="T:Nautilus.Json.ConfigFileAttribute">
            <summary>
            Attribute used to specify the filename and subfolder for a <see cref="T:Nautilus.Json.ConfigFile"/>.
            </summary>
            <remarks>
            When used alongside the <see cref="M:Nautilus.Json.ConfigFile.#ctor(System.String,System.String)"/> constructor, this attribute is ignored.
            </remarks>
            <example>
            <code>
            using Nautilus.Json;
            
            [ConfigFile("options", "configs")]
            public class Config : ConfigFile
            {
                public float MyFloatValue;
            }
            </code>
            </example>
        </member>
        <member name="P:Nautilus.Json.ConfigFileAttribute.Filename">
            <summary>
            The filename to use for the <see cref="T:Nautilus.Json.ConfigFile"/>.
            </summary>
        </member>
        <member name="P:Nautilus.Json.ConfigFileAttribute.Subfolder">
            <summary>
            The subfolder within the mod's folder for the <see cref="T:Nautilus.Json.ConfigFile"/>.
            </summary>
        </member>
        <member name="M:Nautilus.Json.ConfigFileAttribute.#ctor(System.String)">
            <summary>
            Used to specify the filename for the <see cref="T:Nautilus.Json.ConfigFile"/>.
            </summary>
            <remarks>
            When used alongside the <see cref="M:Nautilus.Json.ConfigFile.#ctor(System.String,System.String)"/> constructor, this attribute is ignored.
            </remarks>
            <param name="filename">The filename to use for the <see cref="T:Nautilus.Json.ConfigFile"/>.</param>
        </member>
        <member name="T:Nautilus.Json.ConfigFileEventArgs">
            <summary>
            Contains basic information for a <see cref="T:Nautilus.Json.ConfigFile"/> event.
            </summary>
        </member>
        <member name="P:Nautilus.Json.ConfigFileEventArgs.Instance">
            <summary>
            The instance of the <see cref="T:Nautilus.Json.ConfigFile"/> this event pertains to.
            </summary>
        </member>
        <member name="M:Nautilus.Json.ConfigFileEventArgs.#ctor(Nautilus.Json.ConfigFile)">
            <summary>
            Instantiates a new <see cref="T:Nautilus.Json.ConfigFileEventArgs"/>.
            </summary>
            <param name="instance">The <see cref="T:Nautilus.Json.ConfigFile"/> instance the event pertains to.</param>
        </member>
        <member name="T:Nautilus.Json.Converters.ColorConverter">
            <summary>
            A Color json converter that simplifies the Color to only r,g,b,a serialization.
            </summary>
        </member>
        <member name="M:Nautilus.Json.Converters.ColorConverter.CanConvert(System.Type)">
            <summary>
            A method that determines when this converter should process.
            </summary>
            <param name="objectType">the current object type</param>
            <returns></returns>
        </member>
        <member name="M:Nautilus.Json.Converters.ColorConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            A method that tells Newtonsoft how to Serialize the current object.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="M:Nautilus.Json.Converters.ColorConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            A method that tells Newtonsoft how to Deserialize and read the current object.
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="T:Nautilus.Json.Converters.CustomEnumConverter">
            <summary>
            An Enum json converter that supports custom enum conversions.
            </summary>
        </member>
        <member name="M:Nautilus.Json.Converters.CustomEnumConverter.CanConvert(System.Type)">
            <summary>
            A method that determines when this converter should process.
            </summary>
            <param name="objectType">the current object type</param>
            <returns></returns>
        </member>
        <member name="M:Nautilus.Json.Converters.CustomEnumConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            A method that tells Newtonsoft how to Serialize the current object.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="M:Nautilus.Json.Converters.CustomEnumConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            A method that tells Newtonsoft how to Deserialize and read the current object.
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="T:Nautilus.Json.Converters.FloatConverter">
            <summary>
            A <see cref="T:Newtonsoft.Json.JsonConverter"/> for rounding floats or doubles to a given number of decimal places,
            trimming trailing 0s.
            </summary>
        </member>
        <member name="M:Nautilus.Json.Converters.FloatConverter.#ctor(System.Int32,System.MidpointRounding)">
            <summary>
            Creates a new <see cref="T:Nautilus.Json.Converters.FloatConverter"/>.
            </summary>
            <param name="decimalPlaces">The number of decimal places to round to, where -1 disables rounding.</param>
            <param name="mode">The rounding mode to use when rounding.</param>
            <seealso cref="T:System.MidpointRounding"/>
        </member>
        <member name="M:Nautilus.Json.Converters.FloatConverter.#ctor(System.Int32)">
            <summary>
            Creates a new <see cref="T:Nautilus.Json.Converters.FloatConverter"/>.
            </summary>
            <param name="decimalPlaces">The number of decimal places to round to, where -1 disables rounding.</param>
        </member>
        <member name="M:Nautilus.Json.Converters.FloatConverter.#ctor(System.MidpointRounding)">
            <summary>
            Creates a new <see cref="T:Nautilus.Json.Converters.FloatConverter"/>.
            </summary>
            <param name="mode">The rounding mode to use when rounding.</param>
        </member>
        <member name="M:Nautilus.Json.Converters.FloatConverter.#ctor">
            <summary>
            Creates a new <see cref="T:Nautilus.Json.Converters.FloatConverter"/>.
            </summary>
        </member>
        <member name="M:Nautilus.Json.Converters.FloatConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            The method for writing the <paramref name="value"/> data to the <paramref name="writer"/>.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="M:Nautilus.Json.Converters.FloatConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            The method for reading the <see cref="T:System.Single"/> or <see cref="T:System.Double"/> data from the <paramref name="reader"/>.
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Nautilus.Json.Converters.FloatConverter.CanConvert(System.Type)">
            <summary>
            The method for determining whether the current <paramref name="objectType"/> can be processed byt this
            <see cref="T:Newtonsoft.Json.JsonConverter"/>
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="T:Nautilus.Json.Converters.KeyCodeConverter">
            <summary>
            A <see cref="T:Newtonsoft.Json.JsonConverter"/> for handling <see cref="T:UnityEngine.KeyCode"/>s.
            </summary>
        </member>
        <member name="M:Nautilus.Json.Converters.KeyCodeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            The method for writing the <paramref name="value"/> data to the <paramref name="writer"/>.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="M:Nautilus.Json.Converters.KeyCodeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            The method for reading the <see cref="T:UnityEngine.KeyCode"/> data from the <paramref name="reader"/>.
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Nautilus.Json.Converters.KeyCodeConverter.CanConvert(System.Type)">
            <summary>
            The method for determining whether the current <paramref name="objectType"/> can be processed by this
            <see cref="T:Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="T:Nautilus.Json.Converters.QuaternionConverter">
            <summary>
            A Quaternion json converter that simplifies the Vector3 to only x,y,z serialization.
            </summary>
        </member>
        <member name="M:Nautilus.Json.Converters.QuaternionConverter.CanConvert(System.Type)">
            <summary>
            A method that determines when this converter should process.
            </summary>
            <param name="objectType">the current object type</param>
            <returns></returns>
        </member>
        <member name="M:Nautilus.Json.Converters.QuaternionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            A method that tells Newtonsoft how to Serialize the current object.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="M:Nautilus.Json.Converters.QuaternionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            A method that tells Newtonsoft how to Deserialize and read the current object.
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="T:Nautilus.Json.Converters.Vector2Converter">
            <summary>
            A Vector2 json converter that simplifies the Vector2 to only x,y serialization.
            </summary>
        </member>
        <member name="M:Nautilus.Json.Converters.Vector2Converter.CanConvert(System.Type)">
            <summary>
            A method that determines when this converter should process.
            </summary>
            <param name="objectType">the current object type</param>
            <returns></returns>
        </member>
        <member name="M:Nautilus.Json.Converters.Vector2Converter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            A method that tells Newtonsoft how to Serialize the current object.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="M:Nautilus.Json.Converters.Vector2Converter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            A method that tells Newtonsoft how to Deserialize and read the current object.
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="T:Nautilus.Json.Converters.Vector2IntConverter">
            <summary>
            A Vector2Int json converter that simplifies the Vector2Int to only x,y serialization.
            </summary>
        </member>
        <member name="M:Nautilus.Json.Converters.Vector2IntConverter.CanConvert(System.Type)">
            <summary>
            A method that determines when this converter should process.
            </summary>
            <param name="objectType">the current object type</param>
            <returns></returns>
        </member>
        <member name="M:Nautilus.Json.Converters.Vector2IntConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            A method that tells Newtonsoft how to Serialize the current object.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="M:Nautilus.Json.Converters.Vector2IntConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            A method that tells Newtonsoft how to Deserialize and read the current object.
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="T:Nautilus.Json.Converters.Vector3Converter">
            <summary>
            A Vector3 json converter that simplifies the Vector3 to only x,y,z serialization.
            </summary>
        </member>
        <member name="M:Nautilus.Json.Converters.Vector3Converter.CanConvert(System.Type)">
            <summary>
            A method that determines when this converter should process.
            </summary>
            <param name="objectType">the current object type</param>
            <returns></returns>
        </member>
        <member name="M:Nautilus.Json.Converters.Vector3Converter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            A method that tells Newtonsoft how to Serialize the current object.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="M:Nautilus.Json.Converters.Vector3Converter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            A method that tells Newtonsoft how to Deserialize and read the current object.
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="T:Nautilus.Json.Converters.Vector3IntConverter">
            <summary>
            A Vector3Int json converter that simplifies the Vector3Int to only x,y,z serialization.
            </summary>
        </member>
        <member name="M:Nautilus.Json.Converters.Vector3IntConverter.CanConvert(System.Type)">
            <summary>
            A method that determines when this converter should process.
            </summary>
            <param name="objectType">the current object type</param>
            <returns></returns>
        </member>
        <member name="M:Nautilus.Json.Converters.Vector3IntConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            A method that tells Newtonsoft how to Serialize the current object.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="M:Nautilus.Json.Converters.Vector3IntConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            A method that tells Newtonsoft how to Deserialize and read the current object.
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="T:Nautilus.Json.Converters.Vector4Converter">
            <summary>
            A Vector4 json converter that simplifies the Vector4 to only x,y,z,w serialization.
            </summary>
        </member>
        <member name="M:Nautilus.Json.Converters.Vector4Converter.CanConvert(System.Type)">
            <summary>
            A method that determines when this converter should process.
            </summary>
            <param name="objectType">the current object type</param>
            <returns></returns>
        </member>
        <member name="M:Nautilus.Json.Converters.Vector4Converter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            A method that tells Newtonsoft how to Serialize the current object.
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="M:Nautilus.Json.Converters.Vector4Converter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            A method that tells Newtonsoft how to Deserialize and read the current object.
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="T:Nautilus.Json.ExtensionMethods.JsonExtensions">
            <summary>
            Extension methods for parsing objects as JSON data.
            </summary>
        </member>
        <member name="M:Nautilus.Json.ExtensionMethods.JsonExtensions.LoadJson``1(``0,System.String,System.Boolean,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Loads the JSON properties from a file on disk into the <paramref name="jsonObject"/>.
            </summary>
            <typeparam name="T">The type of the <paramref name="jsonObject"/>.</typeparam>
            <param name="jsonObject">The object instance to load the properties into.</param>
            <param name="path">The file path to the JSON file to parse.</param>
            <param name="createIfNotExist">Whether a new JSON file should be created with default values if it does not
            already exist.</param>
            <param name="jsonConverters">The <see cref="T:Newtonsoft.Json.JsonConverter"/>s to be used for deserialization.</param>
            <seealso cref="M:Nautilus.Json.ExtensionMethods.JsonExtensions.SaveJson``1(``0,System.String,Newtonsoft.Json.JsonConverter[])"/>
        </member>
        <member name="M:Nautilus.Json.ExtensionMethods.JsonExtensions.SaveJson``1(``0,System.String,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Saves the fields and properties of the <paramref name="jsonObject"/> as JSON properties to the file on disk.
            </summary>
            <typeparam name="T">The type of the <paramref name="jsonObject"/>.</typeparam>
            <param name="jsonObject">The object instance to save the fields and properties from.</param>
            <param name="path">The file path at which to save the JSON file.</param>
            <param name="jsonConverters">The <see cref="T:Newtonsoft.Json.JsonConverter"/>s to be used for serialization.</param>
        </member>
        <member name="T:Nautilus.Json.Interfaces.IJsonFile">
            <summary>
            A simple interface for a JSON file framework.
            </summary>
        </member>
        <member name="P:Nautilus.Json.Interfaces.IJsonFile.JsonFilePath">
            <summary>
            The file path at which the JSON file is accessible for reading and writing.
            </summary>
        </member>
        <member name="P:Nautilus.Json.Interfaces.IJsonFile.AlwaysIncludedJsonConverters">
            <summary>
            The <see cref="T:Newtonsoft.Json.JsonConverter"/>s that should always be used when reading/writing JSON data.
            </summary>
        </member>
        <member name="M:Nautilus.Json.Interfaces.IJsonFile.Load(System.Boolean)">
            <summary>
            A method for loading the JSON properties from disk.
            </summary>
            <param name="createFileIfNotExist">Whether a new JSON file should be created with default values if it does not
            already exist.</param>
            <seealso cref="M:Nautilus.Json.Interfaces.IJsonFile.Save"/>
            <seealso cref="M:Nautilus.Json.Interfaces.IJsonFile.LoadWithConverters(System.Boolean,Newtonsoft.Json.JsonConverter[])"/>
        </member>
        <member name="M:Nautilus.Json.Interfaces.IJsonFile.Save">
            <summary>
            A method for saving the JSON properties to disk.
            </summary>
            <seealso cref="M:Nautilus.Json.Interfaces.IJsonFile.Load(System.Boolean)"/>
            <seealso cref="M:Nautilus.Json.Interfaces.IJsonFile.SaveWithConverters(Newtonsoft.Json.JsonConverter[])"/>
        </member>
        <member name="M:Nautilus.Json.Interfaces.IJsonFile.LoadWithConverters(System.Boolean,Newtonsoft.Json.JsonConverter[])">
            <summary>
            A method for loading the JSON properties from disk.
            </summary>
            <param name="createFileIfNotExist">Whether a new JSON file should be created with default values if it does not
            already exist.</param>
            <param name="jsonConverters">Optional <see cref="T:Newtonsoft.Json.JsonConverter"/>s to be used for
            deserialization.</param>
            <seealso cref="M:Nautilus.Json.Interfaces.IJsonFile.SaveWithConverters(Newtonsoft.Json.JsonConverter[])"/>
            <seealso cref="M:Nautilus.Json.Interfaces.IJsonFile.Load(System.Boolean)"/>
        </member>
        <member name="M:Nautilus.Json.Interfaces.IJsonFile.SaveWithConverters(Newtonsoft.Json.JsonConverter[])">
            <summary>
            A method for saving the JSON properties to disk.
            </summary>
            <param name="jsonConverters">Optional <see cref="T:Newtonsoft.Json.JsonConverter"/>s to be used for serialization.</param>
            <seealso cref="M:Nautilus.Json.Interfaces.IJsonFile.LoadWithConverters(System.Boolean,Newtonsoft.Json.JsonConverter[])"/>
            <seealso cref="M:Nautilus.Json.Interfaces.IJsonFile.Save"/>
        </member>
        <member name="T:Nautilus.Json.JsonFile">
            <summary>
            A simple abstract implementation of <see cref="T:Nautilus.Json.Interfaces.IJsonFile"/>.
            </summary>
        </member>
        <member name="P:Nautilus.Json.JsonFile.JsonFilePath">
            <summary>
            The file path at which the JSON file is accessible for reading and writing.
            </summary>
        </member>
        <member name="P:Nautilus.Json.JsonFile.AlwaysIncludedJsonConverters">
            <summary>
            The <see cref="T:Newtonsoft.Json.JsonConverter"/>s that should always be used when reading/writing JSON data.
            </summary>
            <seealso cref="F:Nautilus.Json.JsonFile.alwaysIncludedJsonConverters"/>
        </member>
        <member name="F:Nautilus.Json.JsonFile.OnStartedLoading">
            <summary>
            An event that is invoked whenever the <see cref="T:Nautilus.Json.JsonFile"/> is about to load data from disk.
            </summary>
        </member>
        <member name="F:Nautilus.Json.JsonFile.OnFinishedLoading">
            <summary>
            An event that is invoked whenever the <see cref="T:Nautilus.Json.JsonFile"/> has finished loading data from disk.
            </summary>
        </member>
        <member name="F:Nautilus.Json.JsonFile.OnStartedSaving">
            <summary>
            An event that is invoked whenever the <see cref="T:Nautilus.Json.JsonFile"/> is about to save data to disk.
            </summary>
        </member>
        <member name="F:Nautilus.Json.JsonFile.OnFinishedSaving">
            <summary>
            An event that is invoked whenever the <see cref="T:Nautilus.Json.JsonFile"/> has finished saving data to disk.
            </summary>
        </member>
        <member name="M:Nautilus.Json.JsonFile.Load(System.Boolean)">
            <summary>
            Loads the JSON properties from the file on disk into the <see cref="T:Nautilus.Json.JsonFile"/>.
            </summary>
            <param name="createFileIfNotExist">Whether a new JSON file should be created with default values if it does not
            already exist.</param>
            <seealso cref="M:Nautilus.Json.JsonFile.Save"/>
            <seealso cref="M:Nautilus.Json.JsonFile.LoadWithConverters(System.Boolean,Newtonsoft.Json.JsonConverter[])"/>
        </member>
        <member name="M:Nautilus.Json.JsonFile.Save">
            <summary>
            Saves the current fields and properties of the <see cref="T:Nautilus.Json.JsonFile"/> as JSON properties to the file on disk.
            </summary>
            <seealso cref="M:Nautilus.Json.JsonFile.Load(System.Boolean)"/>
            <seealso cref="M:Nautilus.Json.JsonFile.SaveWithConverters(Newtonsoft.Json.JsonConverter[])"/>
        </member>
        <member name="M:Nautilus.Json.JsonFile.LoadWithConverters(System.Boolean,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Loads the JSON properties from the file on disk into the <see cref="T:Nautilus.Json.JsonFile"/>.
            </summary>
            <param name="createFileIfNotExist">Whether a new JSON file should be created with default values if it does not
            already exist.</param>
            <param name="jsonConverters">Optional <see cref="T:Newtonsoft.Json.JsonConverter"/>s to be used for serialization.
            The <see cref="P:Nautilus.Json.JsonFile.AlwaysIncludedJsonConverters"/> will always be used, regardless of whether you pass them.</param>
            <seealso cref="M:Nautilus.Json.JsonFile.SaveWithConverters(Newtonsoft.Json.JsonConverter[])"/>
            <seealso cref="M:Nautilus.Json.JsonFile.Load(System.Boolean)"/>
        </member>
        <member name="M:Nautilus.Json.JsonFile.SaveWithConverters(Newtonsoft.Json.JsonConverter[])">
            <summary>
            Saves the current fields and properties of the <see cref="T:Nautilus.Json.JsonFile"/> as JSON properties to the file on disk.
            </summary>
            <param name="jsonConverters">Optional <see cref="T:Newtonsoft.Json.JsonConverter"/>s to be used for deserialization.
            The <see cref="P:Nautilus.Json.JsonFile.AlwaysIncludedJsonConverters"/> will always be used, regardless of whether you pass them.</param>
            <seealso cref="M:Nautilus.Json.JsonFile.LoadWithConverters(System.Boolean,Newtonsoft.Json.JsonConverter[])"/>
            <seealso cref="M:Nautilus.Json.JsonFile.Save"/>
        </member>
        <member name="T:Nautilus.Json.JsonFileEventArgs">
            <summary>
            Contains basic information for a <see cref="T:Nautilus.Json.JsonFile"/> event.
            </summary>
        </member>
        <member name="P:Nautilus.Json.JsonFileEventArgs.Instance">
            <summary>
            The instance of the <see cref="T:Nautilus.Json.JsonFile"/> this event pertains to.
            </summary>
        </member>
        <member name="M:Nautilus.Json.JsonFileEventArgs.#ctor(Nautilus.Json.JsonFile)">
            <summary>
            Instantiates a new <see cref="T:Nautilus.Json.JsonFileEventArgs"/>.
            </summary>
            <param name="instance">The <see cref="T:Nautilus.Json.JsonFile"/> instance the event pertains to.</param>
        </member>
        <member name="T:Nautilus.Json.SaveDataCache">
            <summary>
            An abstract implementation of <see cref="T:Nautilus.Json.Interfaces.IJsonFile"/> intended for use with caching per-save data.
            </summary>
        </member>
        <member name="P:Nautilus.Json.SaveDataCache.JsonFilePath">
            <summary>
            The file path at which the JSON file is accessible for reading and writing.
            </summary>
        </member>
        <member name="M:Nautilus.Json.SaveDataCache.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Nautilus.Json.SaveDataCache"/>, parsing the file name from <see cref="T:Nautilus.Json.Attributes.FileNameAttribute"/>
            if declared, or with default values otherwise.
            </summary>
        </member>
        <member name="M:Nautilus.Json.SaveDataCache.Load(System.Boolean)">
            <summary>
            Loads the JSON properties from the file on disk into the <see cref="T:Nautilus.Json.SaveDataCache"/>.
            </summary>
            <param name="createFileIfNotExist">Whether a new JSON file should be created with default values if it does not
            already exist.</param>
            <seealso cref="M:Nautilus.Json.SaveDataCache.Save"/>
            <seealso cref="M:Nautilus.Json.SaveDataCache.LoadWithConverters(System.Boolean,Newtonsoft.Json.JsonConverter[])"/>
            <exception cref="T:System.InvalidOperationException">Thrown when the player is not in-game.</exception>
        </member>
        <member name="M:Nautilus.Json.SaveDataCache.Save">
            <summary>
            Saves the current fields and properties of the <see cref="T:Nautilus.Json.SaveDataCache"/> as JSON properties to the file on disk.
            </summary>
            <seealso cref="M:Nautilus.Json.SaveDataCache.Load(System.Boolean)"/>
            <seealso cref="M:Nautilus.Json.SaveDataCache.SaveWithConverters(Newtonsoft.Json.JsonConverter[])"/>
            <exception cref="T:System.InvalidOperationException">Thrown when the player is not in-game.</exception>
        </member>
        <member name="M:Nautilus.Json.SaveDataCache.LoadWithConverters(System.Boolean,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Loads the JSON properties from the file on disk into the <see cref="T:Nautilus.Json.SaveDataCache"/>.
            </summary>
            <param name="createFileIfNotExist">Whether a new JSON file should be created with default values if it does not
            already exist.</param>
            <param name="jsonConverters">Optional <see cref="T:Newtonsoft.Json.JsonConverter"/>s to be used for serialization.
            The <see cref="P:Nautilus.Json.JsonFile.AlwaysIncludedJsonConverters"/> will always be used, regardless of whether you pass them.</param>
            <seealso cref="M:Nautilus.Json.SaveDataCache.SaveWithConverters(Newtonsoft.Json.JsonConverter[])"/>
            <seealso cref="M:Nautilus.Json.SaveDataCache.Load(System.Boolean)"/>
            <exception cref="T:System.InvalidOperationException">Thrown when the player is not in-game.</exception>
        </member>
        <member name="M:Nautilus.Json.SaveDataCache.SaveWithConverters(Newtonsoft.Json.JsonConverter[])">
            <summary>
            Saves the current fields and properties of the <see cref="T:Nautilus.Json.SaveDataCache"/> as JSON properties to the file on disk.
            </summary>
            <param name="jsonConverters">Optional <see cref="T:Newtonsoft.Json.JsonConverter"/>s to be used for deserialization.
            The <see cref="P:Nautilus.Json.JsonFile.AlwaysIncludedJsonConverters"/> will always be used, regardless of whether you pass them.</param>
            <seealso cref="M:Nautilus.Json.SaveDataCache.LoadWithConverters(System.Boolean,Newtonsoft.Json.JsonConverter[])"/>
            <seealso cref="M:Nautilus.Json.SaveDataCache.Save"/>
            <exception cref="T:System.InvalidOperationException">Thrown when the player is not in-game.</exception>
        </member>
        <member name="T:Nautilus.Options.Attributes.ButtonAttribute">
            <summary>
            Attribute used to signify the decorated method should be represented in the mod's options menu
            as a <see cref="T:Nautilus.Options.ModButtonOption"/>.
            When the button is clicked, the given method will run.
            </summary>
            <example>
            <code>
            using Nautilus.Json;
            using Nautilus.Options;
            using QModManager.Utility;
            
            [Menu("My Options Menu")]
            public class Config : ConfigFile
            {
                [Button("My Cool Button")]
                public static void MyCoolButton(object sender, ButtonClickedEventArgs e)
                {
                    Logger.Log(Logger.Level.Info, "Button was clicked!");
                    Logger.Log(Logger.Level.Info, e.Id.ToString());
                }
            }
            </code>
            </example>
            <seealso cref="T:Nautilus.Options.Attributes.MenuAttribute"/>
            <seealso cref="T:Nautilus.Options.ButtonClickedEventArgs"/>
            <seealso cref="T:Nautilus.Utility.InternalLogger"/>
            <seealso cref="T:Nautilus.Json.ConfigFile"/>
        </member>
        <member name="M:Nautilus.Options.Attributes.ButtonAttribute.#ctor(System.String)">
            <summary>
            Signifies the decorated method should be represented in the mod's options menu as a <see cref="T:Nautilus.Options.ModButtonOption"/>
            and sets its label.
            </summary>
            <param name="label">The label for the button. If none is set, the name of the method will be used.</param>
        </member>
        <member name="M:Nautilus.Options.Attributes.ButtonAttribute.#ctor">
            <summary>
            Signifies the decorated method should be represented in the mod's options menu as a <see cref="T:Nautilus.Options.ModButtonOption"/>.
            </summary>
        </member>
        <member name="T:Nautilus.Options.Attributes.ChoiceAttribute">
            <summary>
            Attribute used to signify the decorated member should be represented in the mod's options menu as a
            <see cref="T:Nautilus.Options.ModChoiceOption`1"/>. Works for either <see cref="T:System.Int32"/> index-based, <see cref="T:System.String"/>-based, or
            <see cref="T:System.Enum"/>-based members.
            </summary>
            <remarks>
            <see cref="T:System.Enum"/> choices can also be parsed from their values by merely omitting the <see cref="T:Nautilus.Options.Attributes.ChoiceAttribute"/>.
            </remarks>
            <example>
            <code>
            using Nautilus.Json;
            using Nautilus.Options;
            
            public enum CustomChoice { One, Two, Three }
            
            [Menu("My Options Menu")]
            public class Config : ConfigFile
            {
                [Choice("My index-based choice", "One", "Two", "Three")]
                public int MyIndexBasedChoice;
                
                [Choice]
                public CustomChoice MyEnumBasedChoice;
            }
            </code>
            </example>
            <seealso cref="T:Nautilus.Options.Attributes.MenuAttribute"/>
            <seealso cref="T:Nautilus.Options.ModChoiceOption`1"/>
            <seealso cref="T:Nautilus.Json.ConfigFile"/>
        </member>
        <member name="P:Nautilus.Options.Attributes.ChoiceAttribute.Options">
            <summary>
            The list of options that will be displayed.
            </summary>
        </member>
        <member name="M:Nautilus.Options.Attributes.ChoiceAttribute.#ctor(System.String,System.String[])">
            <summary>
            Attribute used to signify the decorated member should be represented in the mod's options menu as a
            <see cref="T:Nautilus.Options.ModChoiceOption`1"/>. Works for either <see cref="T:System.Int32"/> index-based, <see cref="T:System.String"/>-based, or
            <see cref="T:System.Enum"/>-based members.
            </summary>
            <remarks>
            <see cref="T:System.Enum"/> choices can also be parsed from their values by merely omitting the <paramref name="options"/>.
            </remarks>
            <param name="label">The label for the choice. If none is set, the name of the member will be used.</param>
            <param name="options">The list of options for the user to choose from.</param>
        </member>
        <member name="M:Nautilus.Options.Attributes.ChoiceAttribute.#ctor(System.String[])">
            <summary>
            Attribute used to signify the decorated member should be represented in the mod's options menu as a
            <see cref="T:Nautilus.Options.ModChoiceOption`1"/>. Works for either <see cref="T:System.Int32"/> index-based, <see cref="T:System.String"/>-based, or
            <see cref="T:System.Enum"/>-based members.
            </summary>
            <remarks>
            <see cref="T:System.Enum"/> choices can also be parsed from their values by merely omitting the <paramref name="options"/>.
            </remarks>
            <param name="options">The list of options for the user to choose from.</param>
        </member>
        <member name="M:Nautilus.Options.Attributes.ChoiceAttribute.#ctor">
            <summary>
            Attribute used to signify the decorated member should be represented in the mod's options menu as a
            <see cref="T:Nautilus.Options.ModChoiceOption`1"/>. Works for either <see cref="T:System.Int32"/> index-based, <see cref="T:System.String"/>-based, or
            <see cref="T:System.Enum"/>-based members.
            </summary>
        </member>
        <member name="T:Nautilus.Options.Attributes.ColorPickerAttribute">
            <summary>
            Attribute used to signify the decorated <see cref="T:UnityEngine.Color"/> should be represented in the mod's
            option menu as a <see cref="T:Nautilus.Options.ModColorOption"/>.
            </summary>
            <example>
            <code>
            using Nautilus.Json;
            using Nautilus.Options;
            
            [Menu("My Options Menu")]
            public class Config : ConfigFile
            {
                [ColorPicker("My Toggle")]
                public Color MyToggle;
            }
            </code>
            </example>
            <seealso cref="T:Nautilus.Options.Attributes.MenuAttribute"/>
            <seealso cref="T:Nautilus.Json.ConfigFile"/>
        </member>
        <member name="P:Nautilus.Options.Attributes.ColorPickerAttribute.Advanced">
            <summary>
            Which type of color picker to use.
            </summary>
        </member>
        <member name="M:Nautilus.Options.Attributes.ColorPickerAttribute.#ctor(System.String)">
            <summary>
            Signifies the decorated <see cref="T:UnityEngine.Color"/> should be represented in the mod's option menu
            as a <see cref="T:Nautilus.Options.ModColorOption"/>.
            </summary>
            <param name="label">The label for the toggle.</param>
        </member>
        <member name="M:Nautilus.Options.Attributes.ColorPickerAttribute.#ctor">
            <summary>
            Signifies the decorated <see cref="T:UnityEngine.Color"/> should be represented in the mod's option menu
            as a <see cref="T:Nautilus.Options.ModColorOption"/>.
            </summary>
        </member>
        <member name="P:Nautilus.Options.Attributes.ConfigFileMetadata`1.MenuAttribute">
            <summary>
            The <see cref="P:Nautilus.Options.Attributes.ConfigFileMetadata`1.MenuAttribute"/> relating to this <see cref="T:Nautilus.Options.ModOptions"/> menu.
            </summary>
        </member>
        <member name="P:Nautilus.Options.Attributes.ConfigFileMetadata`1.ModOptionAttributesMetadata">
            <summary>
            A dictionary of <see cref="T:Nautilus.Options.Attributes.ModOptionAttributeMetadata`1"/>, indexed by <see cref="P:Nautilus.Options.OptionItem.Id"/>.
            </summary>
        </member>
        <member name="M:Nautilus.Options.Attributes.ConfigFileMetadata`1.ProcessMetadata">
            <summary>
            Process metadata for members of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:Nautilus.Options.Attributes.ConfigFileMetadata`1.memberIsDeclaredInConfigFileSubclass(System.Reflection.MemberInfo)">
            <summary>
            Checks whether a given <see cref="T:System.Reflection.MemberInfo"/> is declared in any subclass of <see cref="T:Nautilus.Json.ConfigFile"/>.
            </summary>
            <param name="memberInfo">The <see cref="T:System.Reflection.MemberInfo"/> to check.</param>
            <returns>Whether the given <see cref="T:System.Reflection.MemberInfo"/> is declared in any subclass of <see cref="T:Nautilus.Json.ConfigFile"/>.</returns>
        </member>
        <member name="M:Nautilus.Options.Attributes.ConfigFileMetadata`1.memberIsNotIgnored(System.Reflection.MemberInfo)">
            <summary>
            Checks whether a given <see cref="T:System.Reflection.MemberInfo"/> should be ignored when generating the options menu, based on whether
            the member has a declared <see cref="T:Nautilus.Options.Attributes.IgnoreMemberAttribute"/>, or the <see cref="P:Nautilus.Options.Attributes.ConfigFileMetadata`1.MenuAttribute"/>'s
            <see cref="P:Nautilus.Options.Attributes.MenuAttribute.MemberProcessing"/> property.
            </summary>
            <param name="memberInfo">The <see cref="T:System.Reflection.MemberInfo"/> to check.</param>
            <returns>Whether the given <see cref="T:System.Reflection.MemberInfo"/> member should be ignored when generating the options menu.</returns>
        </member>
        <member name="M:Nautilus.Options.Attributes.ConfigFileMetadata`1.processFieldOrProperty(System.Reflection.MemberInfo,Nautilus.Options.Attributes.MemberType,System.Type)">
            <summary>
            Processes the given field or property and hands off to
            <see cref="M:Nautilus.Options.Attributes.ConfigFileMetadata`1.addModOptionMetadata``1(System.Reflection.MemberInfo,Nautilus.Options.Attributes.MemberType,System.Type)"/> to generate a <see cref="T:Nautilus.Options.Attributes.ModOptionAttributeMetadata`1"/>
            and add it to the <see cref="P:Nautilus.Options.Attributes.ConfigFileMetadata`1.ModOptionAttributesMetadata"/> dictionary.
            </summary>
            <param name="memberInfo">The <see cref="T:System.Reflection.MemberInfo"/> of the member.</param>
            <param name="memberType">The <see cref="T:Nautilus.Options.Attributes.MemberType"/> of the member.</param>
            <param name="underlyingType">The underlying <see cref="T:System.Type"/> of the member.</param>
        </member>
        <member name="M:Nautilus.Options.Attributes.ConfigFileMetadata`1.processMethod(System.Reflection.MethodInfo)">
            <summary>
            Processes the given method and hands off to <see cref="M:Nautilus.Options.Attributes.ConfigFileMetadata`1.addModOptionMetadata``1(System.Reflection.MemberInfo,Nautilus.Options.Attributes.MemberType,System.Type)"/>
            to generate a <see cref="T:Nautilus.Options.Attributes.ModOptionAttributeMetadata`1"/> and add it to the <see cref="P:Nautilus.Options.Attributes.ConfigFileMetadata`1.ModOptionAttributesMetadata"/> dictionary.
            </summary>
            <param name="methodInfo">The <see cref="T:System.Reflection.MethodInfo"/> of the method.</param>
        </member>
        <member name="M:Nautilus.Options.Attributes.ConfigFileMetadata`1.addModOptionMetadata``1(System.Reflection.MemberInfo,Nautilus.Options.Attributes.MemberType,System.Type)">
            <summary>
            Generates a <see cref="T:Nautilus.Options.Attributes.ModOptionAttributeMetadata`1"/> based on the member and its attributes, then adds it to the
            <see cref="P:Nautilus.Options.Attributes.ConfigFileMetadata`1.ModOptionAttributesMetadata"/> dictionary.
            </summary>
            <typeparam name="TAttribute">The type of the <see cref="T:Nautilus.Options.OptionItem"/> to generate for this member.</typeparam>
            <param name="memberInfo">The <see cref="T:System.Reflection.MemberInfo"/> of the member.</param>
            <param name="memberType">The <see cref="T:Nautilus.Options.Attributes.MemberType"/> of the member.</param>
            <param name="underlyingType">The underlying <see cref="T:System.Type"/> of the member.</param>
        </member>
        <member name="M:Nautilus.Options.Attributes.ConfigFileMetadata`1.GetEventMetadata``1(System.Reflection.MemberInfo)">
            <summary>
            Gets the metadata of every <typeparamref name="TAttribute"/> defined for a member.
            </summary>
            <typeparam name="TAttribute">
            The type of <see cref="T:Nautilus.Options.Attributes.ModOptionEventAttribute"/> attribute defined on the member to gather metadata for.
            </typeparam>
            <param name="memberInfo">The member to gather attribute metadata for.</param>
            <returns></returns>
        </member>
        <member name="M:Nautilus.Options.Attributes.ConfigFileMetadata`1.HandleButtonClick(System.Object,Nautilus.Options.ButtonClickedEventArgs)">
            <summary>
            Invokes the method for a given <see cref="T:Nautilus.Options.Attributes.ButtonAttribute"/> and passes parameters when the button is clicked.
            </summary>
            <param name="sender">The sender of the original button click event.</param>
            <param name="e">The <see cref="T:Nautilus.Options.ButtonClickedEventArgs"/> for the click event.</param>
        </member>
        <member name="M:Nautilus.Options.Attributes.ConfigFileMetadata`1.HandleChoiceChanged``1(System.Object,Nautilus.Options.ChoiceChangedEventArgs{``0})">
            <summary>
            Sets the value in the <see cref="P:Nautilus.Options.Attributes.ConfigFileMetadata`1.Config"/>, optionally saving the <see cref="P:Nautilus.Options.Attributes.ConfigFileMetadata`1.Config"/> to disk if the
            <see cref="F:Nautilus.Options.Attributes.MenuAttribute.SaveEvents.ChangeValue"/> flag is set, before passing off to
            <see cref="M:Nautilus.Options.Attributes.ConfigFileMetadata`1.InvokeOnChangeEvents``1(Nautilus.Options.Attributes.ModOptionAttributeMetadata{`0},System.Object,``0)"/>
            to invoke any methods specified with an <see cref="T:Nautilus.Options.Attributes.OnChangeAttribute"/>.
            </summary>
            <param name="sender">The sender of the original choice changed event.</param>
            <param name="e">The <see cref="T:Nautilus.Options.ChoiceChangedEventArgs`1"/> for the choice changed event.</param>
        </member>
        <member name="M:Nautilus.Options.Attributes.ConfigFileMetadata`1.HandleColorChanged(System.Object,Nautilus.Options.ColorChangedEventArgs)">
            <summary>
            Sets the value in the <see cref="P:Nautilus.Options.Attributes.ConfigFileMetadata`1.Config"/>, optionally saving the <see cref="P:Nautilus.Options.Attributes.ConfigFileMetadata`1.Config"/> to disk if the
            <see cref="F:Nautilus.Options.Attributes.MenuAttribute.SaveEvents.ChangeValue"/> flag is set, before passing off to
            <see cref="M:Nautilus.Options.Attributes.ConfigFileMetadata`1.InvokeOnChangeEvents``1(Nautilus.Options.Attributes.ModOptionAttributeMetadata{`0},System.Object,``0)"/>
            to invoke any methods specified with an <see cref="T:Nautilus.Options.Attributes.OnChangeAttribute"/>.
            </summary>
            <param name="sender">The sender of the original keybind changed event.</param>
            <param name="e">The <see cref="T:Nautilus.Options.ColorChangedEventArgs"/> for the keybind changed event.</param>
        </member>
        <member name="M:Nautilus.Options.Attributes.ConfigFileMetadata`1.HandleKeybindChanged(System.Object,Nautilus.Options.KeybindChangedEventArgs)">
            <summary>
            Sets the value in the <see cref="P:Nautilus.Options.Attributes.ConfigFileMetadata`1.Config"/>, optionally saving the <see cref="P:Nautilus.Options.Attributes.ConfigFileMetadata`1.Config"/> to disk if the
            <see cref="F:Nautilus.Options.Attributes.MenuAttribute.SaveEvents.ChangeValue"/> flag is set, before passing off to
            <see cref="M:Nautilus.Options.Attributes.ConfigFileMetadata`1.InvokeOnChangeEvents``1(Nautilus.Options.Attributes.ModOptionAttributeMetadata{`0},System.Object,``0)"/>
            to invoke any methods specified with an <see cref="T:Nautilus.Options.Attributes.OnChangeAttribute"/>.
            </summary>
            <param name="sender">The sender of the original keybind changed event.</param>
            <param name="e">The <see cref="T:Nautilus.Options.KeybindChangedEventArgs"/> for the keybind changed event.</param>
        </member>
        <member name="M:Nautilus.Options.Attributes.ConfigFileMetadata`1.HandleSliderChanged(System.Object,Nautilus.Options.SliderChangedEventArgs)">
            <summary>
            Sets the value in the <see cref="P:Nautilus.Options.Attributes.ConfigFileMetadata`1.Config"/>, optionally saving the <see cref="P:Nautilus.Options.Attributes.ConfigFileMetadata`1.Config"/> to disk if the
            <see cref="F:Nautilus.Options.Attributes.MenuAttribute.SaveEvents.ChangeValue"/> flag is set, before passing off to
            <see cref="M:Nautilus.Options.Attributes.ConfigFileMetadata`1.InvokeOnChangeEvents``1(Nautilus.Options.Attributes.ModOptionAttributeMetadata{`0},System.Object,``0)"/>
            to invoke any methods specified with an <see cref="T:Nautilus.Options.Attributes.OnChangeAttribute"/>.
            </summary>
            <param name="sender">The sender of the original slider changed event.</param>
            <param name="e">The <see cref="T:Nautilus.Options.SliderChangedEventArgs"/> for the slider changed event.</param>
        </member>
        <member name="M:Nautilus.Options.Attributes.ConfigFileMetadata`1.HandleToggleChanged(System.Object,Nautilus.Options.ToggleChangedEventArgs)">
            <summary>
            Sets the value in the <see cref="P:Nautilus.Options.Attributes.ConfigFileMetadata`1.Config"/>, optionally saving the <see cref="P:Nautilus.Options.Attributes.ConfigFileMetadata`1.Config"/> to disk if the
            <see cref="F:Nautilus.Options.Attributes.MenuAttribute.SaveEvents.ChangeValue"/> flag is set, before passing off to
            <see cref="M:Nautilus.Options.Attributes.ConfigFileMetadata`1.InvokeOnChangeEvents``1(Nautilus.Options.Attributes.ModOptionAttributeMetadata{`0},System.Object,``0)"/>
            to invoke any methods specified with an <see cref="T:Nautilus.Options.Attributes.OnChangeAttribute"/>.
            </summary>
            <param name="sender">The sender of the original toggle changed event.</param>
            <param name="e">The <see cref="T:Nautilus.Options.ToggleChangedEventArgs"/> for the toggle changed event.</param>
        </member>
        <member name="M:Nautilus.Options.Attributes.ConfigFileMetadata`1.HandleGameObjectCreated(System.Object,Nautilus.Options.GameObjectCreatedEventArgs)">
            <summary>
            Generates tooltips as required for each <see cref="T:Nautilus.Options.OptionItem"/>, before
            invoking any relevant method(s) specified with <see cref="T:Nautilus.Options.Attributes.OnGameObjectCreatedAttribute"/>(s) and passes
            parameters when a <see cref="T:UnityEngine.GameObject"/> is created in the options menu.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Nautilus.Options.Attributes.ConfigFileMetadata`1.InvokeOnChangeEvents(Nautilus.Options.Attributes.ModOptionAttributeMetadata{`0},System.Object)">
            <summary>
            Invokes the relevant method(s) specified with the <see cref="T:Nautilus.Options.Attributes.OnChangeAttribute"/>(s)
            and passes parameters when a value is changed when loaded from disk.
            </summary>
            <param name="modOptionMetadata">The metadata for the mod option.</param>
            <param name="sender">The sender of the event.</param>
        </member>
        <member name="M:Nautilus.Options.Attributes.ConfigFileMetadata`1.InvokeOnChangeEvents``1(Nautilus.Options.Attributes.ModOptionAttributeMetadata{`0},System.Object,``0)">
            <summary>
            Invokes the relevant method(s) specified with <see cref="T:Nautilus.Options.Attributes.OnChangeAttribute"/>(s)
            and passes parameters when a value is changed.
            </summary>
            <typeparam name="TSource">The type of the event args.</typeparam>
            <param name="modOptionMetadata">The metadata for the mod option.</param>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event args from the OnChange event.</param>
        </member>
        <member name="M:Nautilus.Options.Attributes.ConfigFileMetadata`1.InvokeEvent``1(Nautilus.Options.Attributes.MemberInfoMetadata{`0},System.Object,``0)">
            <summary>
            Invoke the relevant method specified by a <see cref="T:Nautilus.Options.Attributes.ModOptionEventAttribute"/>
            and passes relevant parameters.
            </summary>
            <typeparam name="TSource">The type of the event args.</typeparam>
            <param name="memberInfoMetadata">The metadata for the method.</param>
            <param name="sender">The sender of the event.</param>
            <param name="e">The event args from the event.</param>
        </member>
        <member name="T:Nautilus.Options.Attributes.IgnoreMemberAttribute">
            <summary>
            Attribute used to signify the given property, field or method should be ignored when generating your mod options menu.
            </summary>
            <remarks>
            By default, all members are ignored unless either they are decorated with a <see cref="T:Nautilus.Options.Attributes.ModOptionAttribute"/> derivative,
            or the <see cref="P:Nautilus.Options.Attributes.MenuAttribute.MemberProcessing"/> property is set to <see cref="F:Nautilus.Options.Attributes.MenuAttribute.Members.Implicit"/>.
            </remarks>
            <example>
            <code>
            using Nautilus.Json;
            using Nautilus.Options;
            
            [Menu("My Options Menu")]
            public class Config : ConfigFile
            {
                [Button("My Cool Button)]
                public static void MyCoolButton(object sender, ButtonClickedEventArgs e)
                {
                    Logger.Log(Logger.Level.Info, "Button was clicked!");
                    Logger.Log(Logger.Level.Info, e.Id.ToString());
                }
                
                [IgnoreMember]
                public int FieldNotDisplayedInMenu;
            }
            </code>
            </example>
            <seealso cref="T:Nautilus.Options.Attributes.MenuAttribute"/>
            <seealso cref="T:Nautilus.Options.Attributes.ButtonAttribute"/>
            <seealso cref="T:Nautilus.Json.ConfigFile"/>
            <seealso cref="P:Nautilus.Options.Attributes.MenuAttribute.MemberProcessing"/>
            <seealso cref="T:Nautilus.Options.Attributes.MenuAttribute.Members"/>
        </member>
        <member name="T:Nautilus.Options.Attributes.KeybindAttribute">
            <summary>
            Attribute used to signify the decorated <see cref="T:UnityEngine.KeyCode"/> should be represented in the mod's
            option menu as a <see cref="T:Nautilus.Options.ModKeybindOption"/>.
            </summary>
            <example>
            <code>
            using Nautilus.Json;
            using Nautilus.Options;
            using UnityEngine;
            
            [Menu("My Options Menu")]
            public class Config : ConfigFile
            {
                [Keybind("My Keybind")]
                public KeyCode MyKeybind;
            }
            </code>
            </example>
            <seealso cref="T:Nautilus.Options.Attributes.MenuAttribute"/>
            <seealso cref="T:Nautilus.Json.ConfigFile"/>
        </member>
        <member name="M:Nautilus.Options.Attributes.KeybindAttribute.#ctor(System.String)">
            <summary>
            Signifies the decorated <see cref="T:UnityEngine.KeyCode"/> should be represented in the mod's option menu
            as a <see cref="T:Nautilus.Options.ModKeybindOption"/>.
            </summary>
            <param name="label">The label for the keybind. If none is set, the name of the member will be used.</param>
        </member>
        <member name="M:Nautilus.Options.Attributes.KeybindAttribute.#ctor">
            <summary>
            Signifies the decorated <see cref="T:UnityEngine.KeyCode"/> should be represented in the mod's option menu
            as a <see cref="T:Nautilus.Options.ModKeybindOption"/>.
            </summary>
        </member>
        <member name="M:Nautilus.Options.Attributes.MemberInfoMetadata`1.GetValue``1(`0)">
            <summary>
            Uses the stored metadata to get the current value of the member.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="config">The config to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Nautilus.Options.Attributes.MemberInfoMetadata`1.GetValue(`0)">
            <summary>
            Uses the stored metadata to get the current value of the member.
            </summary>
            <param name="config">The config to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Nautilus.Options.Attributes.MemberInfoMetadata`1.SetValue``1(`0,``0)">
            <summary>
            Uses the stored metadata to set the current value of the member.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="config">The config the set the value in.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Nautilus.Options.Attributes.MemberInfoMetadata`1.ParseMethodParameterTypes(System.Reflection.MethodInfo)">
            <summary>
            Stores the <see cref="T:System.Type"/> of each parameter of a method to the
            <see cref="F:Nautilus.Options.Attributes.MemberInfoMetadata`1.MethodParameterTypes"/> array.
            </summary>
            <param name="methodInfo"><see cref="T:System.Reflection.MethodInfo"/> of the method to parse.</param>
        </member>
        <member name="M:Nautilus.Options.Attributes.MemberInfoMetadata`1.InvokeMethod(`0,System.Object[])">
            <summary>
            Use the stored metadata to invoke the method.
            </summary>
            <param name="config">The config in which the method.</param>
            <param name="arguments">An array of arguments to pass to the method.</param>
        </member>
        <member name="T:Nautilus.Options.Attributes.MenuAttribute">
             <summary>
             Attribute used to signify a <see cref="T:Nautilus.Options.ModOptions"/> menu should be automatically generated from a
             <see cref="T:Nautilus.Json.ConfigFile"/>, as well as specifying options for handling the <see cref="T:Nautilus.Json.ConfigFile"/>
             and <see cref="T:Nautilus.Options.ModOptions"/> menu.
             </summary>
             <example>
             <code>
             using Nautilus.Json;
             using Nautilus.Options;
             using QModManager.Utility;
             using UnityEngine;
             
             [Menu("Nautilus Example Mod")]
             public class Config : ConfigFile
             {
                 [Choice("My index-based choice", "Choice 1", "Choice 2", "Choice 3", Tooltip = "A simple tooltip")]
                 [OnChange(nameof(MyGenericValueChangedEvent))]
                 public int ChoiceIndex;
            
                 [Choice("My enum-based choice"), OnChange(nameof(MyGenericValueChangedEvent))]
                 public CustomChoice ChoiceEnum;
             
                 [Keybind("My keybind"), OnChange(nameof(MyGenericValueChangedEvent))]
                 public KeyCode KeybindKey;
             
                 [Slider("My slider", 0, 50, DefaultValue = 25, Format = "{0:F2}"), OnChange(nameof(MyGenericValueChangedEvent))]
                 public float SliderValue;
             
                 [Toggle("My checkbox"), OnChange(nameof(MyCheckboxToggleEvent)), OnChange(nameof(MyGenericValueChangedEvent))]
                 public bool ToggleValue;
             
                 [Button("My button")]
                 public void MyButtonClickEvent(ButtonClickedEventArgs e)
                 {
                     Logger.Log(Logger.Level.Info, "Button was clicked!");
                     Logger.Log(Logger.Level.Info, $"{e.Id}");
                 }
             
                 public void MyCheckboxToggleEvent(ToggleChangedEventArgs e)
                 {
                     Logger.Log(Logger.Level.Info, "Checkbox value was changed!");
                     Logger.Log(Logger.Level.Info, $"{e.Value}");
                 }
             
                 private void MyGenericValueChangedEvent(ModOptionEventArgs e)
                 {
                     Logger.Log(Logger.Level.Info, "Generic value changed!");
                     Logger.Log(Logger.Level.Info, $"{e.Id}: {e.GetType()}");
             
                     switch (e)
                     {
                         case KeybindChangedEventArgs keybindChangedEventArgs:
                             Logger.Log(Logger.Level.Info, keybindChangedEventArgs.KeyName);
                             break;
                         case ChoiceChangedEventArgs choiceChangedEventArgs:
                             Logger.Log(Logger.Level.Info, choiceChangedEventArgs.Value);
                             break;
                         case SliderChangedEventArgs sliderChangedEventArgs:
                             Logger.Log(Logger.Level.Info, sliderChangedEventArgs.Value.ToString());
                             break;
                         case ToggleChangedEventArgs toggleChangedEventArgs:
                             Logger.Log(Logger.Level.Info, toggleChangedEventArgs.Value.ToString());
                             break;
                     }
                  }
             }
             </code>
             </example>
             <seealso cref="T:Nautilus.Options.Attributes.ChoiceAttribute"/>
             <seealso cref="T:Nautilus.Options.Attributes.OnChangeAttribute"/>
             <seealso cref="T:Nautilus.Options.Attributes.KeybindAttribute"/>
             <seealso cref="T:Nautilus.Options.Attributes.SliderAttribute"/>
             <seealso cref="T:Nautilus.Options.Attributes.ToggleAttribute"/>
             <seealso cref="T:Nautilus.Options.Attributes.ColorPickerAttribute"/>
             <seealso cref="T:Nautilus.Options.Attributes.ButtonAttribute"/>
             <seealso cref="T:Nautilus.Options.ModOptions"/>
             <seealso cref="T:Nautilus.Json.ConfigFile"/>
             <seealso cref="T:Nautilus.Utility.InternalLogger"/>
        </member>
        <member name="T:Nautilus.Options.Attributes.MenuAttribute.SaveEvents">
            <summary>
            Specifies after which events the config file should be saved to disk automatically.
            </summary>
            <remarks>
            This enumeration has a <see cref="T:System.FlagsAttribute"/> that allows a bitwise combination of its member values.
            </remarks>
        </member>
        <member name="F:Nautilus.Options.Attributes.MenuAttribute.SaveEvents.None">
            <summary>
            Never automatically save.
            </summary>
        </member>
        <member name="F:Nautilus.Options.Attributes.MenuAttribute.SaveEvents.ChangeValue">
            <summary>
            Save whenever any value is changed.
            </summary>
        </member>
        <member name="F:Nautilus.Options.Attributes.MenuAttribute.SaveEvents.SaveGame">
            <summary>
            Save when the player saves the game.
            </summary>
        </member>
        <member name="F:Nautilus.Options.Attributes.MenuAttribute.SaveEvents.QuitGame">
            <summary>
            Save when the player quits the game.
            </summary>
        </member>
        <member name="T:Nautilus.Options.Attributes.MenuAttribute.LoadEvents">
            <summary>
            Specifies after which events the config file should be loaded from disk automatically.
            </summary>
            <remarks>
            This enumeration has a <see cref="T:System.FlagsAttribute"/> that allows a bitwise combination of its member values.
            </remarks>
        </member>
        <member name="F:Nautilus.Options.Attributes.MenuAttribute.LoadEvents.None">
            <summary>
            Never automatically load.
            </summary>
        </member>
        <member name="F:Nautilus.Options.Attributes.MenuAttribute.LoadEvents.MenuRegistered">
            <summary>
            Load when the menu is registered to Nautilus via <see cref="M:Nautilus.Handlers.OptionsPanelHandler.RegisterModOptions``1"/>.
            </summary>
            <remarks>
            In normal usage, this option is equivalent to loading when the game is launched.
            </remarks>
        </member>
        <member name="F:Nautilus.Options.Attributes.MenuAttribute.LoadEvents.MenuOpened">
            <summary>
            Load when the menu is opened by the player.
            </summary>
            <remarks>
            Useful for allowing players to edit their config files manually without restarting the game for their changes to take effect.
            </remarks>
        </member>
        <member name="T:Nautilus.Options.Attributes.MenuAttribute.Members">
            <summary>
            Specifies which members of the <see cref="T:Nautilus.Json.ConfigFile"/> will be parsed and added to the menu.
            </summary>
        </member>
        <member name="F:Nautilus.Options.Attributes.MenuAttribute.Members.Explicit">
            <summary>
            Only <see langword="public"/> members decorated with a <see cref="T:Nautilus.Options.Attributes.ModOptionAttribute"/> derivative such as 
            <see cref="T:Nautilus.Options.Attributes.SliderAttribute"/>, <see cref="T:Nautilus.Options.Attributes.ChoiceAttribute"/> etc. will be processed.
            </summary>
        </member>
        <member name="F:Nautilus.Options.Attributes.MenuAttribute.Members.Implicit">
            <summary>
            All <see langword="public"/> members will be processed, and where they are not decorated, a default attribute
            will be generated for them.
            </summary>
        </member>
        <member name="P:Nautilus.Options.Attributes.MenuAttribute.Name">
            <summary>
            The display name for the generated options menu.
            </summary>
        </member>
        <member name="P:Nautilus.Options.Attributes.MenuAttribute.SaveOn">
            <summary>
            The events after which the config file will be saved to disk automatically.
            Defaults to <see cref="F:Nautilus.Options.Attributes.MenuAttribute.SaveEvents.ChangeValue"/>.
            </summary>
            <seealso cref="T:Nautilus.Options.Attributes.MenuAttribute.SaveEvents"/>
            <seealso cref="P:Nautilus.Options.Attributes.MenuAttribute.LoadOn"/>
        </member>
        <member name="P:Nautilus.Options.Attributes.MenuAttribute.LoadOn">
            <summary>
            The events after which the config file will be loaded from disk automatically.
            Defaults to <see cref="F:Nautilus.Options.Attributes.MenuAttribute.LoadEvents.MenuRegistered"/>.
            </summary>
            <seealso cref="T:Nautilus.Options.Attributes.MenuAttribute.LoadEvents"/>
            <seealso cref="P:Nautilus.Options.Attributes.MenuAttribute.SaveOn"/>
        </member>
        <member name="P:Nautilus.Options.Attributes.MenuAttribute.MemberProcessing">
            <summary>
            How members of the <see cref="T:Nautilus.Json.ConfigFile"/> will be processed.
            Defaults to <see cref="F:Nautilus.Options.Attributes.MenuAttribute.Members.Explicit"/>, so that only <see langword="public"/> decorated members will be processed.
            </summary>
            <seealso cref="T:Nautilus.Options.Attributes.MenuAttribute.Members"/>
        </member>
        <member name="M:Nautilus.Options.Attributes.MenuAttribute.#ctor(System.String)">
            <summary>
            Signifies a <see cref="T:Nautilus.Options.ModOptions"/> menu should be automatically generated from a <see cref="T:Nautilus.Json.ConfigFile"/>.
            </summary>
            <param name="name">The display name for the generated options menu.</param>
        </member>
        <member name="T:Nautilus.Options.Attributes.ModOptionAttribute">
            <summary>
            Abstract base attribute used to signify the decorated public member should generate a <see cref="T:Nautilus.Options.OptionItem"/>
            in a mod's options menu.
            </summary>
        </member>
        <member name="P:Nautilus.Options.Attributes.ModOptionAttribute.Label">
            <summary>
            The label to use when displaying the field in the mod's options menu. If <see cref="P:Nautilus.Options.Attributes.ModOptionAttribute.LabelLanguageId"/> is set, this
            will be ignored.
            </summary>
        </member>
        <member name="P:Nautilus.Options.Attributes.ModOptionAttribute.Id">
            <summary>
            The Id to be used for the field in the mod's option menu. If none is specified, one will be automatically generated when
            your <see cref="T:Nautilus.Json.ConfigFile"/> is registered to the <see cref="T:Nautilus.Handlers.OptionsPanelHandler"/>. This means it will
            change every time the game is launched, but is guaranteed to be unique. If you would like to specify an Id to use for
            internal comparisons, you can do so here.
            </summary>
        </member>
        <member name="P:Nautilus.Options.Attributes.ModOptionAttribute.Order">
            <summary>
            The order in which to display fields in the mod's option menu, in ascending order. If none is specified, the order will be
            automatically set.
            </summary>
        </member>
        <member name="P:Nautilus.Options.Attributes.ModOptionAttribute.Tooltip">
            <summary>
            An optional tooltip to display for the field. If <see cref="P:Nautilus.Options.Attributes.ModOptionAttribute.TooltipLanguageId"/> is set, this will be ignored.
            </summary>
        </member>
        <member name="P:Nautilus.Options.Attributes.ModOptionAttribute.LabelLanguageId">
            <summary>
            An optional id to be parsed with <see cref="M:Language.Get(System.String)"/> for the label, allowing for custom language-based strings
            via the <see cref="T:Nautilus.Handlers.LanguageHandler"/> API. If this is set, it will take precedence.
            </summary>
            <seealso cref="M:Nautilus.Handlers.LanguageHandler.SetLanguageLine(System.String,System.String,System.String)"/>
            <seealso cref="M:Language.Get(System.String)"/>
        </member>
        <member name="P:Nautilus.Options.Attributes.ModOptionAttribute.TooltipLanguageId">
            <summary>
            An optional id to be parsed with <see cref="M:Language.Get(System.String)"/> for the tooltip, allowing for custom lanaguage-based strings
            via the <see cref="T:Nautilus.Handlers.LanguageHandler"/> API. If this is set, it will take precedence.
            </summary>
        </member>
        <member name="M:Nautilus.Options.Attributes.ModOptionAttribute.#ctor(System.String)">
            <summary>
            Signifies the decorated member should be represented in the mod's options menu as a <see cref="T:Nautilus.Options.OptionItem"/>
            with an optional label.
            </summary>
            <param name="label">The label to display. If none is set, the name of the member will be used. If <see cref="P:Nautilus.Options.Attributes.ModOptionAttribute.LabelLanguageId"/>
            is set, this will be ignored.</param>
        </member>
        <member name="T:Nautilus.Options.Attributes.ModOptionEventAttribute">
            <summary>
            Abstract base attribute used to signify a method to call whenever the derivative event is invoked for the decorated member.
            </summary>
            <remarks>
            The method must be a member of the same class.
            </remarks>
        </member>
        <member name="P:Nautilus.Options.Attributes.ModOptionEventAttribute.MethodName">
            <summary>
            The name of the method to invoke.
            </summary>
        </member>
        <member name="M:Nautilus.Options.Attributes.ModOptionEventAttribute.#ctor(System.String)">
            <summary>
            Signifies a method to call whenever the derivative event is invoked for the decorated member.
            </summary>
            <remarks>
            The method must be a member of the same class.
            </remarks>
            <param name="methodName">The name of the method within the same class to invoke.</param>
        </member>
        <member name="T:Nautilus.Options.Attributes.OnChangeAttribute">
            <summary>
            Attribute used to signify a method to call whenever the decorated member's value changes.
            </summary>
            <remarks>
            The method must be a member of the same class. Can be specified mutliple times to call multiple methods.
            <para>
            The specified method can take the following parameters in any order:<br/>
            - <see cref="T:System.Object"/> sender: The sender of the event<br/>
            - <see cref="T:System.EventArgs"/> eventArgs: The generalized event arguments of the event<br/>
            - <see cref="T:Nautilus.Options.ChoiceChangedEventArgs`1"/> choiceChangedEventArgs: Only when the member corresponds to a
              <see cref="T:Nautilus.Options.ModChoiceOption`1"/><br/>
            - <see cref="T:Nautilus.Options.KeybindChangedEventArgs"/> keybindChangedEventArgs: Only when the member correspends to a
              <see cref="T:Nautilus.Options.ModKeybindOption"/><br/>
            - <see cref="T:Nautilus.Options.SliderChangedEventArgs"/> sliderChangedEventArgs: Only when the member corresponds to a
              <see cref="T:Nautilus.Options.ModSliderOption"/><br/>
            - <see cref="T:Nautilus.Options.ToggleChangedEventArgs"/> toggleChangedEventArgs: Only when the member corresponds to a
              <see cref="T:Nautilus.Options.ModToggleOption"/>
            </para>
            </remarks>
            <example>
            <code>
            using Nautilus.Json;
            using Nautilus.Options;
            using QModManager.Utility;
            using UnityEngine;
            
            [Menu("Nautilus Example Mod")]
            public class Config : ConfigFile
            {
                [Toggle("My checkbox"), OnChange(nameof(MyCheckboxToggleEvent)), OnChange(nameof(MyGenericValueChangedEvent))]
                public bool ToggleValue;
                
                public void MyCheckboxToggleEvent(ToggleChangedEventArgs e)
                {
                    Logger.Log(Logger.Level.Info, "Checkbox value was changed!");
                    Logger.Log(Logger.Level.Info, $"{e.Value}");
                }
            
                private void MyGenericValueChangedEvent(ModOptionEventArgs e)
                {
                    Logger.Log(Logger.Level.Info, "Generic value changed!");
                    Logger.Log(Logger.Level.Info, $"{e.Id}: {e.GetType()}");
            
                    switch (e)
                    {
                        case KeybindChangedEventArgs keybindChangedEventArgs:
                            Logger.Log(Logger.Level.Info, keybindChangedEventArgs.KeyName);
                            break;
                        case ChoiceChangedEventArgs choiceChangedEventArgs:
                            Logger.Log(Logger.Level.Info, choiceChangedEventArgs.Value);
                            break;
                        case SliderChangedEventArgs sliderChangedEventArgs:
                            Logger.Log(Logger.Level.Info, sliderChangedEventArgs.Value.ToString());
                            break;
                        case ToggleChangedEventArgs toggleChangedEventArgs:
                            Logger.Log(Logger.Level.Info, toggleChangedEventArgs.Value.ToString());
                            break;
                    }
                 }
            </code>
            </example>
            <seealso cref="T:Nautilus.Options.Attributes.MenuAttribute"/>
            <seealso cref="T:Nautilus.Options.Attributes.ToggleAttribute"/>
            <seealso cref="T:System.EventArgs"/>
            <seealso cref="T:Nautilus.Options.ChoiceChangedEventArgs`1"/>
            <seealso cref="T:Nautilus.Options.KeybindChangedEventArgs"/>
            <seealso cref="T:Nautilus.Options.SliderChangedEventArgs"/>
            <seealso cref="T:Nautilus.Options.ToggleChangedEventArgs"/>
            <seealso cref="T:Nautilus.Json.ConfigFile"/>
            <seealso cref="T:Nautilus.Options.Attributes.OnGameObjectCreatedAttribute"/>
            <seealso cref="T:Nautilus.Utility.InternalLogger"/>
        </member>
        <member name="M:Nautilus.Options.Attributes.OnChangeAttribute.#ctor(System.String)">
            <summary>
            Signifies a method to call whenever the decorated member's value changes.
            </summary>
            <remarks>
            The method must be a member of the same class.
            </remarks>
            <param name="methodName">The name of the method within the same class to invoke.</param>
        </member>
        <member name="T:Nautilus.Options.Attributes.OnGameObjectCreatedAttribute">
            <summary>
            Attribute used to signify a method to call whenever the <see cref="T:UnityEngine.GameObject"/> for the 
            <see cref="T:Nautilus.Options.OptionItem"/> corresponding to the decorated member is created.
            </summary>
            <remarks>
            The method must be a member of the same class. Can be specified multiple times to call multiple methods.
            <para>
            The specified method can optionally take the following parameters in any order:<br/>
            - <see cref="T:System.Object"/> sender: The sender of the event<br/>
            - <see cref="T:System.EventArgs"/> eventArgs: The generalized event arguments of the event<br/>
            - <see cref="T:Nautilus.Options.GameObjectCreatedEventArgs"/> gameObjectCreatedEventArgs: The <see cref="T:Nautilus.Options.GameObjectCreatedEventArgs"/>
              for the event
            </para>
            </remarks>
            <example>
            <code>
            using Nautilus.Json;
            using Nautilus.Options;
            using QModManager.Utility;
            using UnityEngine;
            
            [Menu("Nautilus Example Mod")]
            public class Config : ConfigFile
            {
                [Toggle("My checkbox"), OnGameObjectCreated(nameof(MyGameObjectCreatedEvent))]
                public bool ToggleValue;
            
                private void MyGameObjectCreatedEvent(GameObjectCreatedEventArgs e)
               {
                   Logger.Log(Logger.Level.Info, "GameObject was created");
                   Logger.Log(Logger.Level.Info, $"{e.Id}: {e.GameObject}");
               }
            }
            </code>
            </example>
            <seealso cref="T:Nautilus.Options.Attributes.MenuAttribute"/>
            <seealso cref="T:Nautilus.Options.Attributes.ToggleAttribute"/>
            <seealso cref="T:System.EventArgs"/>
            <seealso cref="T:Nautilus.Options.GameObjectCreatedEventArgs"/>
            <seealso cref="T:Nautilus.Options.Attributes.OnChangeAttribute"/>
            <seealso cref="T:Nautilus.Utility.InternalLogger"/>
        </member>
        <member name="M:Nautilus.Options.Attributes.OnGameObjectCreatedAttribute.#ctor(System.String)">
            <summary>
            Signifies a method to call whenever the <see cref="T:UnityEngine.GameObject"/> for the 
            <see cref="T:Nautilus.Options.OptionItem"/> corresponding to the decorated member is created.
            </summary>
            <remarks>
            The method must be a member of the same class.
            </remarks>
            <param name="methodName">The name of the method within the same class to invoke.</param>
        </member>
        <member name="T:Nautilus.Options.Attributes.OptionsMenuBuilder`1">
            <summary>
            An internal derivative of <see cref="T:Nautilus.Options.ModOptions"/> for use in auto-generating a menu based on attributes
            declared in a <see cref="T:Nautilus.Json.ConfigFile"/>.
            </summary>
            <typeparam name="T">The type of the class derived from <see cref="T:Nautilus.Json.ConfigFile"/> to use for
            loading to/saving from disk.</typeparam>
        </member>
        <member name="M:Nautilus.Options.Attributes.OptionsMenuBuilder`1.#ctor">
            <summary>
            Instantiates a new <see cref="T:Nautilus.Options.Attributes.OptionsMenuBuilder`1"/>, generating <see cref="T:Nautilus.Options.OptionItem"/>s by parsing the fields,
            properties and methods declared in the class.
            </summary>
        </member>
        <member name="M:Nautilus.Options.Attributes.OptionsMenuBuilder`1.BuildModOptions(uGUI_TabbedControlsPanel,System.Int32,System.Collections.Generic.IReadOnlyCollection{Nautilus.Options.OptionItem})">
            <summary>
            Adds options to the menu based on the <see cref="P:Nautilus.Options.Attributes.OptionsMenuBuilder`1.ConfigFileMetadata"/>.
            </summary>
        </member>
        <member name="M:Nautilus.Options.Attributes.OptionsMenuBuilder`1.BuildModButtonOption(System.String,System.String,Nautilus.Options.Attributes.MemberInfoMetadata{`0})">
            <summary>
            Adds a <see cref="T:Nautilus.Options.ModButtonOption"/> to the <see cref="T:Nautilus.Options.ModOptions"/> menu.
            </summary>
            <param name="id"></param>
            <param name="label"></param>
            <param name="memberInfoMetadata">The metadata of the corresponding member.</param>
        </member>
        <member name="M:Nautilus.Options.Attributes.OptionsMenuBuilder`1.BuildModChoiceOption(System.String,System.String,Nautilus.Options.Attributes.MemberInfoMetadata{`0},Nautilus.Options.Attributes.ChoiceAttribute)">
            <summary>
            Adds a <see cref="T:Nautilus.Options.ModChoiceOption`1"/> to the <see cref="T:Nautilus.Options.ModOptions"/> menu.
            </summary>
            <param name="id"></param>
            <param name="label"></param>
            <param name="memberInfoMetadata">The metadata of the corresponding member.</param>
            <param name="choiceAttribute">The defined or generated <see cref="T:Nautilus.Options.Attributes.ChoiceAttribute"/> of the member.</param>
        </member>
        <member name="M:Nautilus.Options.Attributes.OptionsMenuBuilder`1.BuildModColorOption(System.String,System.String,Nautilus.Options.Attributes.MemberInfoMetadata{`0},Nautilus.Options.Attributes.ColorPickerAttribute)">
            <summary>
            Adds a <see cref="T:Nautilus.Options.ModColorOption"/> to the <see cref="T:Nautilus.Options.ModOptions"/> menu.
            </summary>
            <param name="id"></param>
            <param name="label"></param>
            <param name="memberInfoMetadata">The metadata of the corresponding member.</param>
            <param name="colorAttribute">The defined or generated <see cref="T:Nautilus.Options.Attributes.ColorPickerAttribute"/> of the member.</param>
        </member>
        <member name="M:Nautilus.Options.Attributes.OptionsMenuBuilder`1.BuildModKeybindOption(System.String,System.String,Nautilus.Options.Attributes.MemberInfoMetadata{`0})">
            <summary>
            Adds a <see cref="T:Nautilus.Options.ModKeybindOption"/> to the <see cref="T:Nautilus.Options.ModOptions"/> menu.
            </summary>
            <param name="id"></param>
            <param name="label"></param>
            <param name="memberInfoMetadata">The metadata of the corresponding member.</param>
        </member>
        <member name="M:Nautilus.Options.Attributes.OptionsMenuBuilder`1.BuildModSliderOption(System.String,System.String,Nautilus.Options.Attributes.MemberInfoMetadata{`0},Nautilus.Options.Attributes.SliderAttribute)">
            <summary>
            Adds a <see cref="T:Nautilus.Options.ModSliderOption"/> to the <see cref="T:Nautilus.Options.ModOptions"/> menu.
            </summary>
            <param name="id"></param>
            <param name="label"></param>
            <param name="memberInfoMetadata">The metadata of the corresponding member.</param>
            <param name="sliderAttribute">The defined or generated <see cref="T:Nautilus.Options.Attributes.SliderAttribute"/> of the member.</param>
        </member>
        <member name="M:Nautilus.Options.Attributes.OptionsMenuBuilder`1.BuildModToggleOption(System.String,System.String,Nautilus.Options.Attributes.MemberInfoMetadata{`0})">
            <summary>
            Adds a <see cref="T:Nautilus.Options.ModToggleOption"/> to the <see cref="T:Nautilus.Options.ModOptions"/> menu.
            </summary>
            <param name="id"></param>
            <param name="label"></param>
            <param name="memberInfoMetadata">The metadata of the corresponding member.</param>
        </member>
        <member name="T:Nautilus.Options.Attributes.SliderAttribute">
            <summary>
            Attribute used to signify the specified <see cref="T:System.Single"/>, <see cref="T:System.Double"/> or <see cref="T:System.Int32"/> should be represented
            in the mod's option menu as a <see cref="T:Nautilus.Options.ModSliderOption"/>.
            </summary>
            <example>
            <code>
            using Nautilus.Json;
            using Nautilus.Options;
            
            [Menu("My Options Menu")]
            public class Config : ConfigFile
            {
                [Slider("My Slider", 0, 50, DefaultValue = 25, Format = "{0:F2}")]
                public float MySlider;
            }
            </code>
            </example>
            <seealso cref="T:Nautilus.Options.Attributes.MenuAttribute"/>
            <seealso cref="T:Nautilus.Json.ConfigFile"/>
        </member>
        <member name="P:Nautilus.Options.Attributes.SliderAttribute.Min">
            <summary>
            The minimum value of the slider.
            </summary>
        </member>
        <member name="P:Nautilus.Options.Attributes.SliderAttribute.Max">
            <summary>
            The maximum value of the slider.
            </summary>
        </member>
        <member name="P:Nautilus.Options.Attributes.SliderAttribute.DefaultValue">
            <summary>
            The default value of the slider.
            </summary>
        </member>
        <member name="P:Nautilus.Options.Attributes.SliderAttribute.Format">
            <summary>
            The format to use when displaying the value, e.g. "{0:F2}" or "{0:F0} %"
            </summary>
        </member>
        <member name="P:Nautilus.Options.Attributes.SliderAttribute.Step">
            <summary>
            The step to apply to the slider (ie. round to nearest)
            </summary>
        </member>
        <member name="M:Nautilus.Options.Attributes.SliderAttribute.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Signifies the specified <see cref="T:System.Single"/>, <see cref="T:System.Double"/> or <see cref="T:System.Int32"/> should be represented in the mod's
            options menu as a <see cref="T:Nautilus.Options.ModSliderOption"/>.
            </summary>
            <param name="label">The label for the slider. If none is set, the name of the method will be used.</param>
            <param name="min">The minimum value of the slider.</param>
            <param name="max">The maximum value of the slider.</param>
        </member>
        <member name="M:Nautilus.Options.Attributes.SliderAttribute.#ctor(System.Single,System.Single)">
            <summary>
            Signifies the specified <see cref="T:System.Single"/>, <see cref="T:System.Double"/> or <see cref="T:System.Int32"/> should be represented in the mod's
            options menu as a <see cref="T:Nautilus.Options.ModSliderOption"/>.
            </summary>
            <param name="min">The minimum value of the slider.</param>
            <param name="max">The maximum value of the slider.</param>
        </member>
        <member name="M:Nautilus.Options.Attributes.SliderAttribute.#ctor(System.String)">
            <summary>
            Signifies the specified <see cref="T:System.Single"/>, <see cref="T:System.Double"/> or <see cref="T:System.Int32"/> should be represented in the mod's
            options menu as a <see cref="T:Nautilus.Options.ModSliderOption"/>.
            </summary>
            <param name="label">The label for the slider. If none is set, the name of the method will be used.</param>
        </member>
        <member name="M:Nautilus.Options.Attributes.SliderAttribute.#ctor">
            <summary>
            Signifies the specified <see cref="T:System.Single"/>, <see cref="T:System.Double"/> or <see cref="T:System.Int32"/> should be represented in the mod's
            options menu as a <see cref="T:Nautilus.Options.ModSliderOption"/>.
            </summary>
        </member>
        <member name="T:Nautilus.Options.Attributes.ToggleAttribute">
            <summary>
            Attribute used to signify the decorated <see cref="T:System.Boolean"/> should be represented in the mod's
            option menu as a <see cref="T:Nautilus.Options.ModToggleOption"/>.
            </summary>
            <example>
            <code>
            using Nautilus.Json;
            using Nautilus.Options;
            
            [Menu("My Options Menu")]
            public class Config : ConfigFile
            {
                [Toggle("My Toggle")]
                public bool MyToggle;
            }
            </code>
            </example>
            <seealso cref="T:Nautilus.Options.Attributes.MenuAttribute"/>
            <seealso cref="T:Nautilus.Json.ConfigFile"/>
        </member>
        <member name="M:Nautilus.Options.Attributes.ToggleAttribute.#ctor(System.String)">
            <summary>
            Signifies the decorated <see cref="T:System.Boolean"/> should be represented in the mod's option menu
            as a <see cref="T:Nautilus.Options.ModToggleOption"/>.
            </summary>
            <param name="label">The label for the toggle.</param>
        </member>
        <member name="M:Nautilus.Options.Attributes.ToggleAttribute.#ctor">
            <summary>
            Signifies the decorated <see cref="T:System.Boolean"/> should be represented in the mod's option menu
            as a <see cref="T:Nautilus.Options.ModToggleOption"/>.
            </summary>
        </member>
        <member name="T:Nautilus.Options.ConfigEntryExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nautilus.Options.ConfigEntryExtensions.ToModToggleOption(BepInEx.Configuration.ConfigEntry{System.Boolean})">
            <summary>
            Converts a Bepinex ConfigEntry/<int/> into a ModSliderOption that will update the value when the slider changes.
            </summary>
            <param name="configEntry">A </param>
            <returns><see cref="T:Nautilus.Options.ModToggleOption"/></returns>
        </member>
        <member name="M:Nautilus.Options.ConfigEntryExtensions.ToModSliderOption(BepInEx.Configuration.ConfigEntry{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32)">
            <summary>
            Converts a Bepinex ConfigEntry/<int/> into a ModSliderOption that will update the value when the slider changes.
            </summary>
            <param name="configEntry">A </param>
            <param name="minValue">Sets the lowest allowed value of the slider. default: 0 </param>
            <param name="maxValue">Sets the highest allowed value of the slider. default: 100</param>
            <param name="step">The snapping value of the slider. Minimum value: 1, Default value: 1</param>
            <returns><see cref="T:Nautilus.Options.ModSliderOption"/></returns>
        </member>
        <member name="M:Nautilus.Options.ConfigEntryExtensions.ToModSliderOption(BepInEx.Configuration.ConfigEntry{System.Single},System.Nullable{System.Single},System.Nullable{System.Single},System.Single,System.String)">
            <summary>
            Converts a Bepinex ConfigEntry/<float/> into a ModSliderOption that will update the value when the slider changes.
            </summary>
            <param name="configEntry">A </param>
            <param name="minValue">Sets the lowest allowed value of the slider. default: 0f</param>
            <param name="maxValue">Sets the highest allowed value of the slider. default: 1f</param>
            <param name="step">The snapping value of the slider. Minimum value: 0.0001f, Default  0.01f</param>
            <param name="floatFormat">The formatting string used on the float value. Default value: "{0:F2}" shows 2 decimals</param>
            <returns><see cref="T:Nautilus.Options.ModSliderOption"/></returns>
        </member>
        <member name="M:Nautilus.Options.ConfigEntryExtensions.ToModSliderOptions(BepInEx.Configuration.ConfigEntry{UnityEngine.Vector2},System.Single,System.Single,System.Single,System.String)">
            <summary>
            Converts a Bepinex ConfigEntry/<Vector2/> into 2 ModSliderOption that will update the value when the slider changes.
            </summary>
            <param name="configEntry">A </param>
            <param name="minValue">Sets the lowest allowed value of the slider. default: 0f</param>
            <param name="maxValue">Sets the highest allowed value of the slider. default: 1f</param>
            <param name="step">The snapping value of the slider. Minimum value: 0.01f</param>
            <param name="floatFormat">The formatting string used on the float value. Default value: "{0:F2}" shows 2 decimals</param>
            <returns><see cref="T:Nautilus.Options.ModSliderOption"/></returns>
        </member>
        <member name="M:Nautilus.Options.ConfigEntryExtensions.ToModSliderOptions(BepInEx.Configuration.ConfigEntry{UnityEngine.Vector3},System.Single,System.Single,System.Single,System.String)">
            <summary>
            Converts a Bepinex ConfigEntry/<Vector3/> into 3 ModSliderOption that will update the value when the slider changes.
            </summary>
            <param name="configEntry">A </param>
            <param name="minValue">Sets the lowest allowed value of the slider. default: 0f</param>
            <param name="maxValue">Sets the highest allowed value of the slider. default: 1f</param>
            <param name="step">The snapping value of the slider. Minimum value: 0.01f</param>
            <param name="floatFormat">The formatting string used on the float value. Default value: "{0:F2}" shows 2 decimals</param>
            <returns><see cref="T:Nautilus.Options.ModSliderOption"/></returns>
        </member>
        <member name="M:Nautilus.Options.ConfigEntryExtensions.ToModSliderOptions(BepInEx.Configuration.ConfigEntry{UnityEngine.Vector4},System.Single,System.Single,System.Single,System.String)">
            <summary>
            Converts a Bepinex ConfigEntry/<Vector4/> into 4 ModSliderOption that will update the value when the slider changes.
            </summary>
            <param name="configEntry">A </param>
            <param name="minValue">Sets the lowest allowed value of the slider. default: 0f</param>
            <param name="maxValue">Sets the highest allowed value of the slider. default: 1f</param>
            <param name="step">The snapping value of the slider. Minimum value: 0.01f</param>
            <param name="floatFormat">The formatting string used on the float value. Default value: "{0:F2}" shows 2 decimals</param>
            <returns><see cref="T:Nautilus.Options.ModSliderOption"/></returns>
        </member>
        <member name="M:Nautilus.Options.ConfigEntryExtensions.ToModColorOption(BepInEx.Configuration.ConfigEntry{UnityEngine.Color},System.Boolean)">
            <summary>
            Converts a Bepinex ConfigEntry/<Color/> into 4 ModSliderOption that will update the value when the slider changes.
            </summary>
            <param name="configEntry">A bepinex config entry</param>
            <param name="basic">Whether to use the basic or advanced color picker</param>
            <remarks>Does not support use of <see cref="T:BepInEx.Configuration.AcceptableValueList`1"/>.</remarks>
            <returns><see cref="T:Nautilus.Options.ModColorOption"/></returns>
        </member>
        <member name="M:Nautilus.Options.ConfigEntryExtensions.ToModKeybindOption(BepInEx.Configuration.ConfigEntry{UnityEngine.KeyCode})">
            <summary>
            Converts a Bepinex ConfigEntry/<KeyCode/> into a ModKeyBindOption that will update the value when the keybind changes.
            </summary>
            <param name="configEntry">A </param>
            <returns><see cref="T:Nautilus.Options.ModKeybindOption"/></returns>
        </member>
        <member name="M:Nautilus.Options.ConfigEntryExtensions.ToModChoiceOption``1(BepInEx.Configuration.ConfigEntry{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts an Enum ConfigEntry into a ModChoiceOption that will update the value when the choice changes.
            </summary>
            <param name="configEntry">A </param>
            <param name="options">Array of valid options if not using the whole Enum</param>
            <returns><see cref="T:Nautilus.Options.ModKeybindOption"/></returns>
        </member>
        <member name="M:Nautilus.Options.ConfigEntryExtensions.ToModChoiceOption``1(BepInEx.Configuration.ConfigEntry{``0},``0[])">
            <summary>
            Converts a ConfigEntry into a ModChoiceOption that will update the value when the choice changes.
            </summary>
            <param name="configEntry">A </param>
            <param name="options"></param>
            <returns><see cref="T:Nautilus.Options.ModKeybindOption"/></returns>
        </member>
        <member name="T:Nautilus.Options.ButtonClickedEventArgs">
            <summary>
            Contains all the information about a button click event.
            </summary>
        </member>
        <member name="M:Nautilus.Options.ButtonClickedEventArgs.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Nautilus.Options.ButtonClickedEventArgs"/>.
            </summary>
            <param name="id">The ID of the <see cref="T:Nautilus.Options.ModButtonOption"/> that was clicked.</param>
        </member>
        <member name="T:Nautilus.Options.ModButtonOption">
            <summary>
            A mod option class for handling a button that can be clicked.
            </summary>
        </member>
        <member name="E:Nautilus.Options.ModButtonOption.OnPressed">
            <summary>
            The event that is called whenever an option is changed.
            </summary>
        </member>
        <member name="P:Nautilus.Options.ModButtonOption.Tooltip">
            <summary>
            The tooltip to show when hovering over the option.
            </summary>
        </member>
        <member name="M:Nautilus.Options.ModButtonOption.GetDelegates">
            <summary>
            Gets the Invocation List for the OnPressed event or returns null if none present.
            </summary>
        </member>
        <member name="M:Nautilus.Options.ModButtonOption.AddToPanel(uGUI_TabbedControlsPanel,System.Int32)">
            <summary>
            The base method for adding an object to the options panel
            </summary>
            <param name="panel">The panel to add the option to.</param>
            <param name="tabIndex">Where in the panel to add the option.</param>
        </member>
        <member name="M:Nautilus.Options.ModButtonOption.Create(System.String,System.String,System.Action{Nautilus.Options.ButtonClickedEventArgs},System.String)">
            <summary>
            Creates a new <see cref="T:Nautilus.Options.ModButtonOption"/> for handling a button that can be clicked.
            </summary>
            <param name="id">The internal ID of this option.</param>
            <param name="label">The display text to show on the in-game menus.</param>
            <param name="onPressed"> Action to trigger when button is pressed. Can leave as Null and then add events using the OnPressed += method;</param>
            <param name="tooltip">The tooltip to show when hovering over the option.</param>
        </member>
        <member name="P:Nautilus.Options.ModButtonOption.AdjusterComponent">
            <summary>
            The Adjuster for this <see cref="T:Nautilus.Options.OptionItem"/>.
            </summary>
        </member>
        <member name="T:Nautilus.Options.ChoiceChangedEventArgs`1">
            <summary>
            Contains all the information about a choice changed event.
            </summary>
        </member>
        <member name="P:Nautilus.Options.ChoiceChangedEventArgs`1.Index">
            <summary>
            The new index for the <see cref="T:Nautilus.Options.ModChoiceOption`1"/>.
            </summary>
        </member>
        <member name="M:Nautilus.Options.ChoiceChangedEventArgs`1.#ctor(System.String,System.Int32,`0)">
            <summary>
            Constructs a new <see cref="T:Nautilus.Options.ChoiceChangedEventArgs`1"/>.
            </summary>
            <param name="id">The ID of the <see cref="T:Nautilus.Options.ModChoiceOption`1"/> that was changed.</param>
            <param name="index">The new index for the <see cref="T:Nautilus.Options.ModChoiceOption`1"/>.</param>
            <param name="value">The value of the <see cref="T:Nautilus.Options.ModChoiceOption`1"/> as a string.</param>
        </member>
        <member name="T:Nautilus.Options.ModChoiceOption`1">
            <summary>
            A mod option class for handling an option that can select one item from a list of values.
            </summary>
        </member>
        <member name="P:Nautilus.Options.ModChoiceOption`1.Choice">
            <summary>
            The actual <see cref="T:uGUI_Choice"/> when the menu is open.
            </summary>
        </member>
        <member name="P:Nautilus.Options.ModChoiceOption`1.Options">
            <summary>
            The array of readable string options to choose between in the <see cref="T:Nautilus.Options.ModChoiceOption`1"/>.
            </summary>
        </member>
        <member name="P:Nautilus.Options.ModChoiceOption`1.Index">
            <summary>
            The currently selected index among the options array.
            </summary>
        </member>
        <member name="P:Nautilus.Options.ModChoiceOption`1.Tooltip">
            <summary>
            The tooltip to show when hovering over the option.
            </summary>
        </member>
        <member name="M:Nautilus.Options.ModChoiceOption`1.AddToPanel(uGUI_TabbedControlsPanel,System.Int32)">
            <summary>
            The base method for adding an object to the options panel
            </summary>
            <param name="panel">The panel to add the option to.</param>
            <param name="tabIndex">Where in the panel to add the option.</param>
        </member>
        <member name="M:Nautilus.Options.ModChoiceOption`1.Create(System.String,System.String,`0[],System.Int32,System.String)">
            <summary>
            Adds a new <see cref="T:Nautilus.Options.ModChoiceOption`1"/> to this instance.
            </summary>
            <param name="id">The internal ID for the choice option.</param>
            <param name="label">The display text to use in the in-game menu.</param>
            <param name="options">The collection of available values.</param>
            <param name="index">The starting value.</param>
            <param name="tooltip">The tooltip to show when hovering over the option.</param>
        </member>
        <member name="M:Nautilus.Options.ModChoiceOption`1.Create(System.String,System.String,`0[],`0,System.String)">
            <summary>
            Adds a new <see cref="T:Nautilus.Options.ModChoiceOption`1"/> to this instance.
            </summary>
            <param name="id">The internal ID for the choice option.</param>
            <param name="label">The display text to use in the in-game menu.</param>
            <param name="options">The collection of available values.</param>
            <param name="value">The starting value.</param>
            <param name="tooltip">The tooltip to show when hovering over the option.</param>
        </member>
        <member name="P:Nautilus.Options.ModChoiceOption`1.AdjusterComponent">
            <summary>
            The Adjuster for this <see cref="T:Nautilus.Options.OptionItem"/>.
            </summary>
        </member>
        <member name="T:Nautilus.Options.ColorChangedEventArgs">
            <summary>
            Contains all the information about a color changed event.
            </summary>
        </member>
        <member name="M:Nautilus.Options.ColorChangedEventArgs.#ctor(System.String,UnityEngine.Color)">
            <summary>
            Constructs a new <see cref="T:Nautilus.Options.ToggleChangedEventArgs"/>.
            </summary>
            <param name="id">The ID of the <see cref="T:Nautilus.Options.ModColorOption"/> that was changed.</param>
            <param name="value">The new value for the <see cref="T:Nautilus.Options.ModColorOption"/>.</param>
        </member>
        <member name="T:Nautilus.Options.ModColorOption">
            <summary>
            A basic mod option class for handling an option that can be any <seealso cref="T:UnityEngine.Color"/>.
            </summary>
        </member>
        <member name="P:Nautilus.Options.ModColorOption.Advanced">
            <summary>
            Whether to use an advanced UI
            </summary>
        </member>
        <member name="P:Nautilus.Options.ModColorOption.Tooltip">
            <summary>
            The tooltip to show when hovering over the option's items.
            </summary>
        </member>
        <member name="M:Nautilus.Options.ModColorOption.AddToPanel(uGUI_TabbedControlsPanel,System.Int32)">
            <summary>
            The base method for adding an object to the options panel
            </summary>
            <param name="panel">The panel to add the option to.</param>
            <param name="tabIndex">Where in the panel to add the option.</param>
        </member>
        <member name="M:Nautilus.Options.ModColorOption.Create(System.String,System.String,UnityEngine.Color,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:Nautilus.Options.ModColorOption"/> instance.
            </summary>
            <param name="id">The internal ID for the Color option.</param>
            <param name="label">The display text to use in the in-game menu.</param>
            <param name="value">The starting value.</param>
            <param name="advanced">Whether to use an advanced display.</param>
            <param name="tooltip">The tooltip to show when hovering over the options.</param>
        </member>
        <member name="M:Nautilus.Options.ModColorOption.Create(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Nautilus.Options.ModColorOption"/> instance.
            </summary>
            <param name="id">The internal ID for the Color option.</param>
            <param name="label">The display text to use in the in-game menu.</param>
        </member>
        <member name="P:Nautilus.Options.ModColorOption.AdjusterComponent">
            <summary>
            The Adjuster for this <see cref="T:Nautilus.Options.OptionItem"/>.
            </summary>
        </member>
        <member name="T:Nautilus.Options.KeybindChangedEventArgs">
            <summary>
            Contains all the information about a keybind changed event.
            </summary>
        </member>
        <member name="M:Nautilus.Options.KeybindChangedEventArgs.#ctor(System.String,UnityEngine.KeyCode)">
            <summary>
            Constructs a new <see cref="T:Nautilus.Options.KeybindChangedEventArgs"/>.
            </summary>
            <param name="id">The ID of the <see cref="T:Nautilus.Options.ModKeybindOption"/> that was changed.</param>
            <param name="key">The new value for the <see cref="T:Nautilus.Options.ModKeybindOption"/>.</param>
        </member>
        <member name="T:Nautilus.Options.ModKeybindOption">
            <summary>
            A mod option class for handling an option that is a keybind.
            </summary>
        </member>
        <member name="P:Nautilus.Options.ModKeybindOption.Device">
            <summary>
            The currently select input source device for the <see cref="T:Nautilus.Options.ModKeybindOption"/>.
            </summary>
        </member>
        <member name="P:Nautilus.Options.ModKeybindOption.Tooltip">
            <summary>
            The tooltip to show when hovering over the option.
            </summary>
        </member>
        <member name="M:Nautilus.Options.ModKeybindOption.Create(System.String,System.String,GameInput.Device,UnityEngine.KeyCode,System.String)">
            <summary>
            Creates a new <see cref="T:Nautilus.Options.ModKeybindOption"/> for handling an option that is a keybind.
            </summary>
            <param name="id">The internal ID for the toggle option.</param>
            <param name="label">The display text to use in the in-game menu.</param>
            <param name="device">The device name.</param>
            <param name="key">The starting keybind value.</param>
            <param name="tooltip">The tooltip to show when hovering over the option.</param>
        </member>
        <member name="M:Nautilus.Options.ModKeybindOption.Create(System.String,System.String,GameInput.Device,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Nautilus.Options.ModKeybindOption"/> for handling an option that is a keybind.
            </summary>
            <param name="id">The internal ID for the toggle option.</param>
            <param name="label">The display text to use in the in-game menu.</param>
            <param name="device">The device name.</param>
            <param name="key">The starting keybind value.</param>
            /// <param name="tooltip">The tooltip to show when hovering over the option.</param>
        </member>
        <member name="M:Nautilus.Options.ModKeybindOption.AddToPanel(uGUI_TabbedControlsPanel,System.Int32)">
            <summary>
            The base method for adding an object to the options panel
            </summary>
            <param name="panel">The panel to add the option to.</param>
            <param name="tabIndex">Where in the panel to add the option.</param>
        </member>
        <member name="P:Nautilus.Options.ModKeybindOption.AdjusterComponent">
            <summary>
            The Adjuster for this <see cref="T:Nautilus.Options.OptionItem"/>.
            </summary>
        </member>
        <member name="T:Nautilus.Options.ModOptions">
            <summary>
            Abstract class that provides the framework for your mod's in-game configuration options.
            </summary>
        </member>
        <member name="F:Nautilus.Options.ModOptions.Name">
            <summary>
            The name of this set of configuration options.
            </summary>
        </member>
        <member name="P:Nautilus.Options.ModOptions.Options">
            <summary>
            Obtains the <see cref="T:Nautilus.Options.OptionItem"/>s that belong to this instance. Can be null.
            </summary>
        </member>
        <member name="M:Nautilus.Options.ModOptions.AddItem(Nautilus.Options.OptionItem)">
            <summary>
            <para>Attaches a <see cref="T:Nautilus.Options.OptionItem"/> to the options menu.</para>
            </summary>
            <param name="option">The <see cref="T:Nautilus.Options.OptionItem"/> to add to the options menu.</param>
        </member>
        <member name="M:Nautilus.Options.ModOptions.RemoveItem(System.String)">
            <summary>
            <para>Attaches a <see cref="T:Nautilus.Options.OptionItem"/> to the options menu.</para>
            </summary>
            <param name="id">The id of the <see cref="T:Nautilus.Options.OptionItem"/> to remove from the options menu.</param>
        </member>
        <member name="M:Nautilus.Options.ModOptions.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:Nautilus.Options.ModOptions"/>.
            </summary>
            <param name="name">The name that will display above this section of options in the in-game menu.</param>
        </member>
        <member name="M:Nautilus.Options.ModOptions.BuildModOptions(uGUI_TabbedControlsPanel,System.Int32,System.Collections.Generic.IReadOnlyCollection{Nautilus.Options.OptionItem})">
            <summary>
            Builds up the configuration the options.
            </summary>
        </member>
        <member name="E:Nautilus.Options.ModOptions.OnChanged">
            <summary>
            The event that is called whenever an option is changed.
            </summary>
        </member>
        <member name="M:Nautilus.Options.ModOptions.GetDelegates">
            <summary>
            Gets the Invocation List for the OnChanged event or returns null if none present.
            </summary>
        </member>
        <member name="M:Nautilus.Options.ModOptions.OnChange``2(System.String,``0)">
            <summary>
            Notifies an option change to all subscribed event handlers.
            </summary>
            <param name="id"></param>
            <param name="value"></param>
        </member>
        <member name="E:Nautilus.Options.ModOptions.GameObjectCreated">
            <summary> The event that is called whenever a game object created for the option </summary>
        </member>
        <member name="T:Nautilus.Options.GameObjectCreatedEventArgs">
            <summary> Contains all the information about a created game object event </summary>
        </member>
        <member name="M:Nautilus.Options.GameObjectCreatedEventArgs.#ctor(System.String,UnityEngine.GameObject)">
            <summary> Constructs a new <see cref="T:Nautilus.Options.GameObjectCreatedEventArgs"/> </summary>
            <param name="id"> The ID of the <see cref="T:Nautilus.Options.OptionItem"/> for which game object was created </param>
            <param name="gameObject"> New game object for the <see cref="T:Nautilus.Options.OptionItem"/> </param>
        </member>
        <member name="T:Nautilus.Options.ModOption`2">
            <summary>
            The common generic-typed abstract class to all mod options.
            </summary>
        </member>
        <member name="P:Nautilus.Options.ModOption`2.Value">
            <summary>
            The value for the <see cref="T:Nautilus.Options.ModOption`2"/>.
            </summary>
        </member>
        <member name="E:Nautilus.Options.ModOption`2.OnChanged">
            <summary>
            The event that is called whenever an option is changed.
            </summary>
        </member>
        <member name="M:Nautilus.Options.ModOption`2.GetDelegates">
            <summary>
            Gets the Invocation List for the OnChanged event or returns null if none present.
            </summary>
        </member>
        <member name="M:Nautilus.Options.ModOption`2.OnChange(System.String,`0)">
            <summary>
            Notifies an option change to all subscribed event handlers.
            </summary>
            <param name="id"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nautilus.Options.ModOption`2.#ctor(System.String,System.String,`0)">
            <summary>
            Base constructor for all typed mod options.
            </summary>
            <param name="label">The display text to show on the in-game menus.</param>
            <param name="id">The internal ID if this option.</param>
            <param name="value">The typed value of the <see cref="T:Nautilus.Options.OptionItem"/></param>
        </member>
        <member name="T:Nautilus.Options.OptionItem">
            <summary>
            The common abstract class to all items in the mod options page.
            </summary>
        </member>
        <member name="P:Nautilus.Options.OptionItem.Id">
            <summary>
            The internal ID that identifies this option.
            </summary>
        </member>
        <member name="P:Nautilus.Options.OptionItem.Label">
            <summary>
            The display text to be shown for this option in the in-game menus.
            </summary>
        </member>
        <member name="P:Nautilus.Options.OptionItem.OptionGameObject">
            <summary> UI GameObject for this option </summary>
        </member>
        <member name="F:Nautilus.Options.OptionItem.parentOptions">
            <summary> Parent <see cref="T:Nautilus.Options.ModOptions"/> for this option </summary>
        </member>
        <member name="M:Nautilus.Options.OptionItem.AddToPanel(uGUI_TabbedControlsPanel,System.Int32)">
            <summary>
            The base method for adding an object to the options panel
            </summary>
            <param name="panel">The panel to add the option to.</param>
            <param name="tabIndex">Where in the panel to add the option.</param>
        </member>
        <member name="M:Nautilus.Options.OptionItem.#ctor(System.String,System.String)">
            <summary>
            Base constructor for all items in the options.
            </summary>
            <param name="label">The display text to show on the in-game menus.</param>
            <param name="id">The internal ID if this option.</param>
        </member>
        <member name="P:Nautilus.Options.OptionItem.AdjusterComponent">
            <summary>
            The Adjuster for this <see cref="T:Nautilus.Options.OptionItem"/>.
            </summary>
        </member>
        <member name="T:Nautilus.Options.OptionItem.ModOptionAdjust">
            <summary>
            The base 'adjuster' component to prevent UI elements overlapping
            </summary>
        </member>
        <member name="P:Nautilus.Options.OptionItem.ModOptionAdjust.CaptionWidth">
            <summary>
            The width of the caption for the component
            </summary>
        </member>
        <member name="P:Nautilus.Options.OptionItem.ModOptionAdjust.isMainMenu">
            <summary>
            Whether we are in the main menu or in game in the options
            </summary>
        </member>
        <member name="M:Nautilus.Options.OptionItem.ModOptionAdjust.SetVec2x(UnityEngine.Vector2,System.Single)">
            <summary>
            Sets the X coordinate of a <see cref="T:UnityEngine.Vector2"/>.
            </summary>
            <param name="vec">The <see cref="T:UnityEngine.Vector2"/> to set the value on.</param>
            <param name="val">The value to set to the x coordinate.</param>
            <returns></returns>
        </member>
        <member name="M:Nautilus.Options.OptionItem.ModOptionAdjust.Awake">
            <summary>
            The function called after this <see cref="T:UnityEngine.MonoBehaviour"/> is awakened.
            </summary>
        </member>
        <member name="M:Nautilus.Options.OptionItem.ModOptionAdjust.SetCaptionGameObject(System.String,System.Single)">
            <summary>
            Creates and adds a caption to this GameObject
            </summary>
            <param name="gameObjectPath"></param>
            <param name="minWidth"></param>
        </member>
        <member name="T:Nautilus.Options.SliderChangedEventArgs">
            <summary>
            Contains all the information about a slider changed event.
            </summary>
        </member>
        <member name="M:Nautilus.Options.SliderChangedEventArgs.#ctor(System.String,System.Single)">
            <summary>
            Constructs a new <see cref="T:Nautilus.Options.SliderChangedEventArgs"/>.
            </summary>
            <param name="id">The ID of the <see cref="T:Nautilus.Options.ModSliderOption"/> that was changed.</param>
            <param name="value">The new value for the <see cref="T:Nautilus.Options.ModSliderOption"/>.</param>
        </member>
        <member name="T:Nautilus.Options.ModSliderOption">
            <summary>
            A mod option class for handling an option that can have any floating point value between a minimum and maximum.
            </summary>
        </member>
        <member name="P:Nautilus.Options.ModSliderOption.MinValue">
            <summary>
            The minimum value of the <see cref="T:Nautilus.Options.ModSliderOption"/>.
            </summary>
        </member>
        <member name="P:Nautilus.Options.ModSliderOption.MaxValue">
            <summary>
            The maximum value of the <see cref="T:Nautilus.Options.ModSliderOption"/>.
            </summary>
        </member>
        <member name="P:Nautilus.Options.ModSliderOption.DefaultValue">
            <summary>
            The default value of the <see cref="T:Nautilus.Options.ModSliderOption"/>.
            Showed on the slider by small gray circle. Slider's handle will snap to the default value near it.
            </summary>
        </member>
        <member name="P:Nautilus.Options.ModSliderOption.Step">
            <summary>
            The step value of the <see cref="T:Nautilus.Options.ModSliderOption"/> defaults to 1.
            </summary>
        </member>
        <member name="P:Nautilus.Options.ModSliderOption.ValueFormat">
            <summary> Float Format for value field (<see cref="M:Nautilus.Options.ModSliderOption.Create(System.String,System.String,System.Single,System.Single,System.Single,System.Nullable{System.Single},System.String,System.Single,System.String)"/>) </summary>
        </member>
        <member name="P:Nautilus.Options.ModSliderOption.Tooltip">
            <summary>
            The tooltip to show when hovering over the option.
            </summary>
        </member>
        <member name="M:Nautilus.Options.ModSliderOption.AddToPanel(uGUI_TabbedControlsPanel,System.Int32)">
            <summary>
            The base method for adding an object to the options panel
            </summary>
            <param name="panel">The panel to add the option to.</param>
            <param name="tabIndex">Where in the panel to add the option.</param>
        </member>
        <member name="M:Nautilus.Options.ModSliderOption.Create(System.String,System.String,System.Single,System.Single,System.Single,System.Nullable{System.Single},System.String,System.Single,System.String)">
            <summary>
            Creates a new <see cref="T:Nautilus.Options.ModSliderOption"/> to this instance.
            </summary>
            <param name="id">The internal ID for the slider option.</param>
            <param name="label">The display text to use in the in-game menu.</param>
            <param name="minValue">The minimum value for the range.</param>
            <param name="maxValue">The maximum value for the range.</param>
            <param name="value">The starting value.</param>
            <param name="defaultValue">The default value for the slider. If this is null then 'value' used as default.   uses value</param>
            <param name="step">Step for the slider, ie. round to nearest X.   defaults to 1</param>
            <param name="tooltip">The tooltip to show when hovering over the option. defaults to no tooltip.</param>
            <param name="valueFormat"> format for values when labelMode is set to <see cref="F:SliderLabelMode.Float"/>, e.g. "{0:F2}" for 2 decimals or "{0:F0} for no decimals %"
            (more on this <see href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings">here</see>)</param>
        </member>
        <member name="T:Nautilus.Options.ModSliderOption.SliderValue">
            <summary>
            Component for customizing slider's value behaviour.
            If you need more complex behaviour than just custom value format then you can inherit this component 
            and add it to "Slider" game object in OnGameObjectCreated event (see <see cref="M:Nautilus.Options.ModSliderOption.AddToPanel(uGUI_TabbedControlsPanel,System.Int32)"/> for details on adding component)
            You can override value converters <see cref="M:Nautilus.Options.ModSliderOption.SliderValue.ConvertToDisplayValue(System.Single)"/> and <see cref="M:Nautilus.Options.ModSliderOption.SliderValue.ConvertToSliderValue(System.Single)"/>,
            in that case internal range for slider will be changed to [0.0f : 1.0f] and you can control displayed value with these converters
            (also this value will be passed to <see cref="M:Nautilus.Options.ModOptions.OnChange``2(System.String,``0)"/> event)
            </summary>
        </member>
        <member name="F:Nautilus.Options.ModSliderOption.SliderValue.label">
            <summary> The value label of the <see cref="T:Nautilus.Options.ModSliderOption.SliderValue"/> </summary>
        </member>
        <member name="F:Nautilus.Options.ModSliderOption.SliderValue.slider">
            <summary> The slider controlling this <see cref="T:Nautilus.Options.ModSliderOption.SliderValue"/> </summary>
        </member>
        <member name="F:Nautilus.Options.ModSliderOption.SliderValue.minValue">
            <summary>
            The minimum value of the <see cref="T:Nautilus.Options.ModSliderOption.SliderValue"/>.
            In case of custom value converters it can be not equal to internal minimum value for slider
            </summary>
        </member>
        <member name="F:Nautilus.Options.ModSliderOption.SliderValue.maxValue">
            <summary>
            The maximum value of the <see cref="T:Nautilus.Options.ModSliderOption.SliderValue"/>.
            In case of custom value converters it can be not equal to internal maximum value for slider
            </summary>
        </member>
        <member name="P:Nautilus.Options.ModSliderOption.SliderValue.ValueFormat">
            <summary> Custom value format property. Set it right after adding component to game object for proper behaviour </summary>
        </member>
        <member name="F:Nautilus.Options.ModSliderOption.SliderValue.valueFormat">
            <summary> Custom value format </summary>
        </member>
        <member name="F:Nautilus.Options.ModSliderOption.SliderValue.Step">
            <summary> Step for the slider </summary>
        </member>
        <member name="P:Nautilus.Options.ModSliderOption.SliderValue.ValueWidth">
            <summary>
            Width for value text field. Used by <see cref="T:Nautilus.Options.ModSliderOption.SliderOptionAdjust"/> to adjust label width.
            It is calculated in <see cref="M:Nautilus.Options.ModSliderOption.SliderValue.UpdateValueWidth"/>, but you can override this property.
            </summary>
        </member>
        <member name="M:Nautilus.Options.ModSliderOption.SliderValue.InitConverters">
            <summary> Override this if you need to initialize custom value converters </summary>
        </member>
        <member name="M:Nautilus.Options.ModSliderOption.SliderValue.ConvertToDisplayValue(System.Single)">
            <summary> Converts internal slider value [0.0f : 1.0f] to displayed value </summary>
        </member>
        <member name="M:Nautilus.Options.ModSliderOption.SliderValue.ConvertToSliderValue(System.Single)">
            <summary> Converts displayed value to internal slider value [0.0f : 1.0f] </summary>
        </member>
        <member name="M:Nautilus.Options.ModSliderOption.SliderValue.Awake">
            <summary> Component initialization. If you overriding this, make sure that you calling base.Awake() </summary>
        </member>
        <member name="M:Nautilus.Options.ModSliderOption.SliderValue.Start">
            <summary> <see cref="T:UnityEngine.MonoBehaviour"/>.Start() </summary>
        </member>
        <member name="M:Nautilus.Options.ModSliderOption.SliderValue.UpdateValueWidth">
            <summary>
            Method for calculating necessary label's width. Creates temporary label and compares widths of min and max values,
            then sets <see cref="P:Nautilus.Options.ModSliderOption.SliderValue.ValueWidth"/> to the wider. Be aware that in case of using custom converters some intermediate value may be wider than min/max values.
            </summary>
        </member>
        <member name="M:Nautilus.Options.ModSliderOption.SliderValue.OnValueChanged(System.Single)">
            <summary> Called when user changes slider value </summary>
        </member>
        <member name="M:Nautilus.Options.ModSliderOption.SliderValue.UpdateLabel">
            <summary>
            Updates label's text with formatted and converted slider's value.
            Override this if you need even more control on slider's value behaviour.
            </summary>
        </member>
        <member name="P:Nautilus.Options.ModSliderOption.AdjusterComponent">
            <summary>
            The Adjuster for this <see cref="T:Nautilus.Options.OptionItem"/>.
            </summary>
        </member>
        <member name="T:Nautilus.Options.ToggleChangedEventArgs">
            <summary>
            Contains all the information about a toggle changed event.
            </summary>
        </member>
        <member name="M:Nautilus.Options.ToggleChangedEventArgs.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new <see cref="T:Nautilus.Options.ToggleChangedEventArgs"/>.
            </summary>
            <param name="id">The ID of the <see cref="T:Nautilus.Options.ModToggleOption"/> that was changed.</param>
            <param name="value">The new value for the <see cref="T:Nautilus.Options.ModToggleOption"/>.</param>
        </member>
        <member name="T:Nautilus.Options.ModToggleOption">
            <summary>
            A mod option class for handling an option that can be either ON or OFF.
            </summary>
        </member>
        <member name="P:Nautilus.Options.ModToggleOption.Tooltip">
            <summary>
            The tooltip to show when hovering over the option.
            </summary>
        </member>
        <member name="M:Nautilus.Options.ModToggleOption.AddToPanel(uGUI_TabbedControlsPanel,System.Int32)">
            <summary>
            The base method for adding an object to the options panel
            </summary>
            <param name="panel">The panel to add the option to.</param>
            <param name="tabIndex">Where in the panel to add the option.</param>
        </member>
        <member name="M:Nautilus.Options.ModToggleOption.Create(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Adds a new <see cref="T:Nautilus.Options.ModToggleOption"/> to this instance.
            </summary>
            <param name="id">The internal ID for the toggle option.</param>
            <param name="label">The display text to use in the in-game menu.</param>
            <param name="value">The starting value.</param>
            <param name="tooltip">The tooltip to show when hovering over the option. defaults to no tooltip.</param>
        </member>
        <member name="P:Nautilus.Options.ModToggleOption.AdjusterComponent">
            <summary>
            The Adjuster for this <see cref="T:Nautilus.Options.OptionItem"/>.
            </summary>
        </member>
        <member name="T:Nautilus.Options.OptionEventArgs">
            <summary>
            Interface for event arguments for a <see cref="T:Nautilus.Options.OptionItem"/>.
            </summary>
        </member>
        <member name="P:Nautilus.Options.OptionEventArgs.Id">
            <summary>
            The ID of the <see cref="T:Nautilus.Options.OptionItem"/> this event corresponds to.
            </summary>
        </member>
        <member name="M:Nautilus.Options.OptionEventArgs.#ctor(System.String)">
            <summary>
            Instantiates a new <see cref="T:Nautilus.Options.OptionEventArgs"/> for handling an event from a <see cref="T:Nautilus.Options.OptionItem"/>.
            </summary>
            <param name="id">The internal ID of the item.</param>
        </member>
        <member name="T:Nautilus.Options.ConfigOptionEventArgs`1">
            <summary>
            Interface for event arguments for a <see cref="T:Nautilus.Options.OptionItem"/>.
            </summary>
        </member>
        <member name="P:Nautilus.Options.ConfigOptionEventArgs`1.Value">
            <summary>
            The typed Value of the <see cref="T:Nautilus.Options.OptionItem"/> this event corresponds to.
            </summary>
        </member>
        <member name="M:Nautilus.Options.ConfigOptionEventArgs`1.#ctor(System.String,`0)">
            <summary>
            Instantiates a new <see cref="T:Nautilus.Options.ConfigOptionEventArgs`1"/> for handling an event from a <see cref="T:Nautilus.Options.OptionItem"/>.
            </summary>
            <param name="id">The internal ID of the option.</param>
            <param name="value">The new value of the option.</param>
        </member>
        <member name="M:Nautilus.Patchers.ConsoleCommandsPatcher.AddCustomCommand(System.String,System.Reflection.MethodInfo,System.Boolean,System.Object)">
            <summary>
            Adds a custom console command from a target method/delegate.
            </summary>
            <param name="command">The command string that a user should enter.</param>
            <param name="targetMethod">The targeted method.</param>
            <param name="isDelegate">Whether the method is a delegate.</param>
            <param name="instance">The instance the method belongs to.</param>
        </member>
        <member name="M:Nautilus.Patchers.ConsoleCommandsPatcher.ParseCustomCommands(System.Type)">
            <summary>
            Searches the given <paramref name="type"/> for methods decorated with the <see cref="T:Nautilus.Commands.ConsoleCommandAttribute"/> and
            passes them on to <see cref="M:Nautilus.Patchers.ConsoleCommandsPatcher.AddCustomCommand(System.String,System.Reflection.MethodInfo,System.Boolean,System.Object)"/>.
            </summary>
            <param name="type">The type within which to search.</param>
        </member>
        <member name="M:Nautilus.Patchers.ConsoleCommandsPatcher.DevConsole_Submit_Prefix(System.String,System.Boolean@)">
            <summary>
            Harmony patch on the <see cref="T:DevConsole"/> to intercept user submissions.
            </summary>
            <param name="value">The submitted value.</param>
            <param name="__result">Original result of the method, used to determine whether or not the string will be added to the
            <see cref="F:DevConsole.history"/>.</param>
            <returns>Whether or not to let the original method run.</returns>
        </member>
        <member name="M:Nautilus.Patchers.ConsoleCommandsPatcher.DevConsole_OnSubmit_Postfix(System.Boolean@)">
            <summary>
            Forces history to always be saved in the command line, regardless of whether it was successful or not.
            </summary>
            <param name="__result"></param>
        </member>
        <member name="M:Nautilus.Patchers.ConsoleCommandsPatcher.HandleCommand(System.String)">
            <summary>
            Attempts to handle a user command.
            </summary>
            <param name="input">The command input.</param>
            <returns>Whether we have handled the command. Will return <see langword="true"/> if the command is in our list of
            watched commands, whether or not the parameters were valid.</returns>
        </member>
        <member name="M:Nautilus.Patchers.ConsoleCommandsPatcher.LogAndAnnounce(System.String,BepInEx.Logging.LogLevel)">
            <summary>
            Logs the message after stripping XML tags (colors), but announces to the user with XML tags intact.
            </summary>
            <param name="message">The message.</param>
            <param name="level">Log level.</param>
        </member>
        <member name="F:Nautilus.Patchers.ItemActionPatcher.CustomMiddleClickItemAction">
            <summary>
            A constant <see cref="T:ItemAction"/> value to represent a custom middle click item action
            </summary>
        </member>
        <member name="F:Nautilus.Patchers.ItemActionPatcher.CustomLeftClickItemAction">
            <summary>
            A constant <see cref="T:ItemAction"/> value to represent a custom left click item action
            </summary>
        </member>
        <member name="T:Nautilus.Utility.AssetBundleLoadingUtils">
            <summary>
            Utilities related to loading Asset Bundles.
            </summary>
        </member>
        <member name="M:Nautilus.Utility.AssetBundleLoadingUtils.LoadFromAssetsFolder(System.Reflection.Assembly,System.String)">
            <summary>
            Loads an <see cref="T:UnityEngine.AssetBundle"/> from the the mod's Assets folder. Expects a folder named Assets to exist in the same folder as the Assembly,
            and expects this folder to contain an asset bundle with the same name as defined in the <paramref name="assetBundleFileName"/> parameter.
            </summary>
            <param name="modAssembly">The mod assembly, in the same folder that contains the Assets folder. See <see cref="M:System.Reflection.Assembly.GetExecutingAssembly"/>.</param>
            <param name="assetBundleFileName">The name of the Asset Bundle file in your Assets folder, i.e. "deextinctionassets" or "gargantuanassets".
            These typically do not have a file extension.</param>
        </member>
        <member name="M:Nautilus.Utility.AssetBundleLoadingUtils.LoadFromModFolder(System.Reflection.Assembly,System.String)">
            <summary>
            Loads an <see cref="T:UnityEngine.AssetBundle"/> from a given path. Expects an asset bundle to exist at <paramref name="pathToBundle"/> (relative to the containing folder of the DLL).
            </summary>
            <param name="modAssembly">The mod assembly used to find the mod's folder. See <see cref="M:System.Reflection.Assembly.GetExecutingAssembly"/>.</param>
            <param name="pathToBundle">The relative path to the Asset Bundle file from your plugin folder, i.e. "Assets/deextinctionassets" or "Assets/AssetBundles/gargantuanassets". See <see cref="M:System.IO.Path.Combine(System.String,System.String)"/> for creating the path.
            These typically do not have a file extension.</param>
            <seealso cref="M:UnityEngine.AssetBundle.LoadFromFile(System.String)"/>
        </member>
        <member name="T:Nautilus.Utility.AudioUtils">
            <summary>
            Utilities pertaining to the use and creation of custom <see cref="T:FMOD.Sound"/> objects, alongside other audio-specific functionality. Also see the <see cref="T:Nautilus.Handlers.CustomSoundHandler"/>.
            </summary>
        </member>
        <member name="F:Nautilus.Utility.AudioUtils.StandardSoundModes_3D">
            <summary>
            3D sounds
            </summary>
        </member>
        <member name="F:Nautilus.Utility.AudioUtils.StandardSoundModes_2D">
            <summary>
            2D sounds
            </summary>
        </member>
        <member name="F:Nautilus.Utility.AudioUtils.StandardSoundModes_Stream">
            <summary>
            For music, PDA voices and any 2D sounds that can have more than one instance at a time.
            </summary>
        </member>
        <member name="M:Nautilus.Utility.AudioUtils.CreateSound(System.String,FMOD.MODE)">
            <summary>
            Creates a <see cref="T:FMOD.Sound"/> instance from a path. Can be stored and later used with <see cref="M:Nautilus.Utility.AudioUtils.TryPlaySound(FMOD.Sound,FMOD.Studio.Bus,FMOD.Channel@)"/>
            </summary>
            <param name="path">The path of the sound. Relative to the base game folder.</param>
            <param name="mode"></param>
            <returns>The <see cref="T:FMOD.Sound"/> instance</returns>
        </member>
        <member name="M:Nautilus.Utility.AudioUtils.CreateSound(UnityEngine.AudioClip,FMOD.MODE)">
            <summary>
            Creates a <see cref="T:FMOD.Sound"/> instance from an <see cref="T:UnityEngine.AudioClip"/>. Can be stored and later used with <see cref="M:Nautilus.Utility.AudioUtils.TryPlaySound(FMOD.Sound,FMOD.Studio.Bus,FMOD.Channel@)"/>
            </summary>
            <param name="audio">the AudioClip to make a Sound instance of.</param>
            <param name="mode"></param>
            <returns>The <see cref="T:FMOD.Sound"/> instance.</returns>
        </member>
        <member name="M:Nautilus.Utility.AudioUtils.CreateSounds(System.Collections.Generic.IEnumerable{UnityEngine.AudioClip},FMOD.MODE)">
            <summary>
            Creates an FMOD <see cref="T:FMOD.Sound"/> collection from an <see cref="T:UnityEngine.AudioClip"/> collection.
            </summary>
            <param name="clips">AudioClips to create from.</param>
            <param name="mode">The mode to set the sound to</param>
            <returns>A collection of FMOD Sounds.</returns>
        </member>
        <member name="M:Nautilus.Utility.AudioUtils.CreateSounds(System.Collections.Generic.IEnumerable{System.String},FMOD.MODE)">
            <summary>
            Converts a sound paths collection to an FMOD <see cref="T:FMOD.Sound"/> collection.
            </summary>
            <param name="soundPaths">Sound paths to create from. Relative to the base game folder</param>
            <param name="mode">The mode to set the sound to</param>
            <returns>A collection of FMOD Sounds.</returns>
        </member>
        <member name="M:Nautilus.Utility.AudioUtils.TryPlaySound(FMOD.Sound,System.String,FMOD.Channel@)">
            <summary>
            Plays a <see cref="T:FMOD.Sound"/> on the specified <see cref="T:FMOD.Studio.Bus"/>.
            </summary>
            <param name="sound">The sound which should be played.</param>
            <param name="busPath">The path to the bus to play the sound on.</param>
            <param name="channel">The channel on which the sound was created.</param>
            <returns>If the sound was reported as played.</returns>
        </member>
        <member name="M:Nautilus.Utility.AudioUtils.TryPlaySound(FMOD.Sound,FMOD.Studio.Bus,FMOD.Channel@)">
            <summary>
            Plays a <see cref="T:FMOD.Sound"/> on the specified <see cref="T:FMOD.Studio.Bus"/>.
            </summary>
            <param name="sound">The sound which should be played.</param>
            <param name="bus">The bus to play the sound on.</param>
            <param name="channel">The channel on which the sound was created.</param>
            <returns>If the sound was reported as played.</returns>
        </member>
        <member name="M:Nautilus.Utility.AudioUtils.GetFmodAsset(System.String,System.String)">
            <summary>
            <para>Returns a new <see cref="T:FMODAsset"/> with the given parameters. An FMODAsset is a data object that is required for various audio-related classes and methods, since it holds references to internal sound IDs.</para>
            <para>A list of vanilla sound paths for SN1 can also be viewed at this URL: <see href="https://github.com/SubnauticaModding/Nautilus/tree/master/Nautilus/Documentation/resources/SN1-FMODEvents.txt"/>.</para>
            <para>The best way to assign a "path" to a custom sound asset is through <see cref="M:Nautilus.Handlers.CustomSoundHandler.RegisterCustomSound(System.String,FMOD.Sound,System.String)"/>.</para>
            </summary>
            <param name="path">
            <para>An FMOD Event's 'path' is the part read by most audio systems within Subnautica.</para>
            <para>For custom sounds, should be identical to the ID passed into the methods when creating sounds with the <see cref="T:Nautilus.Handlers.CustomSoundHandler"/> class.</para>
            <para>For vanilla sounds, please refer to the list of all sound events.</para>
            </param>
            <param name="id">The internal sound ID, typically unused but occasionally required. Will be set as <paramref name="path"/> if unassigned.</param>
            <returns></returns>
        </member>
        <member name="T:Nautilus.Utility.AudioUtils.BusPaths">
            <summary>
            A list of the relevant FMOD bus paths the game uses.
            </summary>
        </member>
        <member name="F:Nautilus.Utility.AudioUtils.BusPaths.UnderwaterCreatures">
            <summary>
            Used for underwater creature SFXs. Tied to the master volume.
            </summary>
        </member>
        <member name="F:Nautilus.Utility.AudioUtils.BusPaths.SurfaceCreatures">
            <summary>
            Used for surface creature SFXs that dont get muted when at the surface of the ocean. Tied to the master volume.
            </summary>
        </member>
        <member name="F:Nautilus.Utility.AudioUtils.BusPaths.PDAVoice">
            <summary>
            Used for PDA voices. Tied to the voice volume.
            </summary>
        </member>
        <member name="F:Nautilus.Utility.AudioUtils.BusPaths.VoiceOvers">
            <summary>
            Used for encyclopedia VOs. Tied to the voice volume.
            </summary>
        </member>
        <member name="F:Nautilus.Utility.AudioUtils.BusPaths.Music">
            <summary>
            Used for main music. Tied to the music volume.
            </summary>
        </member>
        <member name="F:Nautilus.Utility.AudioUtils.BusPaths.EnvironmentalMusic">
            <summary>
            Used for environmental music. Tied to the music volume.
            </summary>
        </member>
        <member name="F:Nautilus.Utility.AudioUtils.BusPaths.UnderwaterAmbient">
            <summary>
            Used for underwater ambience SFXs. Tied to the ambient volume.
            </summary>
        </member>
        <member name="F:Nautilus.Utility.AudioUtils.BusPaths.SurfaceAmbient">
            <summary>
            Used for ambience SFXs that dont get muted when at the surface of the ocean. Tied to the ambient volume.
            </summary>
        </member>
        <member name="F:Nautilus.Utility.AudioUtils.BusPaths.PlayerSFXs">
            <summary>
            Used for player and hand-held tools SFXs. Tied to the master volume.
            </summary>
        </member>
        <member name="T:Nautilus.Utility.BasicText">
            <summary>
            <para>
            Places a simple text object on the screen and keeps it there until either hidden (or a designated fade-to-black timer has passed). 
            By default uses the same font/size/color as the "Press Any Button To Begin" message at the beginning of the game, and appears 
            centered about 1/3 down the screen, but all parameters can be reconfigured.
            </para>
            </summary>
            <example>
            SIMPLE USAGE EXAMPLE:
            <code>
            BasicText message = new BasicText();
            message.ShowMessage("This Message Will Fade In 10 Seconds", 10);
            </code>
            
            COMPLEX USAGE EXAMPLE:
            <code>
            BasicText message = new BasicText(TextAnchor.UpperLeft); // Note many other properties could also be set as constructor parameters
            message.setColor(Color.red); // Set Color
            message.setSize(20);         // Set Font Size
            message.setLoc(200, 400);    // Set x/y position (0,0 is center of screen)
            message.setFontStyle(FontStyle.Bold); // Bold 
            message.ShowMessage("This message stays on screen until hidden"); // Display message; if fadeout seconds not specified, it just keeps showing
            ... // other things happen, time goes by
            message.Hide(); // Hides the message
            </code>
            </example>
        </member>
        <member name="M:Nautilus.Utility.BasicText.#ctor">
            <summary>
            Creates a new instances of <see cref="T:Nautilus.Utility.BasicText"/> with all default options.
            </summary>
        </member>
        <member name="M:Nautilus.Utility.BasicText.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instances of <see cref="T:Nautilus.Utility.BasicText"/> at the specified origin point.
            </summary>
            <param name="set_x">The x coordinate to set</param>
            <param name="set_y">The y coordinate to set</param>
        </member>
        <member name="M:Nautilus.Utility.BasicText.#ctor(TMPro.TextAlignmentOptions)">
            <summary>
            Creates a new instances of <see cref="T:Nautilus.Utility.BasicText"/> at a specified <see cref="T:UnityEngine.TextAnchor"/>.
            </summary>
            <param name="useAlign">The text anchor to align to</param>
        </member>
        <member name="M:Nautilus.Utility.BasicText.#ctor(UnityEngine.Color)">
            <summary>
            Creates a new instances of <see cref="T:Nautilus.Utility.BasicText"/> with a specified <see cref="T:UnityEngine.Color"/>.
            </summary>
            <param name="useColor">The text color to use</param>
        </member>
        <member name="M:Nautilus.Utility.BasicText.#ctor(System.Int32)">
            <summary>
            Creates a new instances of <see cref="T:Nautilus.Utility.BasicText"/> with a specified size.
            </summary>
            <param name="useSize">The text size to uset</param>
        </member>
        <member name="M:Nautilus.Utility.BasicText.#ctor(System.Int32,UnityEngine.Color)">
            <summary>
            Creates a new instances of <see cref="T:Nautilus.Utility.BasicText"/> with a specified size and <see cref="T:UnityEngine.Color"/>.
            </summary>
            <param name="useSize">The text size to use</param>
            <param name="useColor">The text color to use</param>
        </member>
        <member name="M:Nautilus.Utility.BasicText.#ctor(System.Int32,TMPro.TextAlignmentOptions)">
            <summary>
            Creates a new instances of <see cref="T:Nautilus.Utility.BasicText"/> with a specified size and <see cref="T:UnityEngine.TextAnchor"/>.
            </summary>
            <param name="useSize">The text size to use</param>
            <param name="useAlign">The text anchor to align to</param>
        </member>
        <member name="M:Nautilus.Utility.BasicText.#ctor(System.Int32,UnityEngine.Color,TMPro.TextAlignmentOptions)">
            <summary>
            Creates a new instances of <see cref="T:Nautilus.Utility.BasicText"/> with a specified size, <see cref="T:UnityEngine.Color"/>, and <see cref="T:UnityEngine.TextAnchor"/>.
            </summary>
            <param name="useSize">The text size to use</param>
            <param name="useColor">The text color to use</param>
            <param name="useAlign">The text anchor to align to</param>
        </member>
        <member name="M:Nautilus.Utility.BasicText.#ctor(System.Int32,System.Int32,System.Int32,UnityEngine.Color,TMPro.TextAlignmentOptions)">
            <summary>
            Creates a new instances of <see cref="T:Nautilus.Utility.BasicText"/> with a specified origin point, size, <see cref="T:UnityEngine.Color"/>, and <see cref="T:UnityEngine.TextAnchor"/>.
            </summary>
            <param name="set_x">The x coordinate to set</param>
            <param name="set_y">The y coordinate to set</param>
            <param name="useSize">The text size to use</param>
            <param name="useColor">The text color to use</param>
            <param name="useAlign">The text anchor to align to</param>
        </member>
        <member name="M:Nautilus.Utility.BasicText.#ctor(System.Int32,System.Int32,System.Int32,UnityEngine.Color)">
            <summary>
            Creates a new instances of <see cref="T:Nautilus.Utility.BasicText"/> with a specified origin point, size, and <see cref="T:UnityEngine.Color"/>.
            </summary>
            <param name="set_x">The x coordinate to set</param>
            <param name="set_y">The y coordinate to set</param>
            <param name="useSize">The text size to use</param>
            <param name="useColor">The text color to use</param>
        </member>
        <member name="M:Nautilus.Utility.BasicText.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instances of <see cref="T:Nautilus.Utility.BasicText"/> with a specified origin point and size.
            </summary>
            <param name="set_x">The x coordinate to set</param>
            <param name="set_y">The y coordinate to set</param>
            <param name="useSize">The text size to use</param>
        </member>
        <member name="M:Nautilus.Utility.BasicText.ShowMessage(System.String)">
            <summary>
            Shows our text item, with no schedule fade (i.e. indefinitely)
            </summary>
            <param name="s">The text to display</param>
        </member>
        <member name="M:Nautilus.Utility.BasicText.ShowMessage(System.String,System.Single)">
            <summary>
            Shows our text item, fading after a specified number of seconds (or stays on indefinitely if 0 seconds)
            </summary>
            <param name="s">The text to display</param>
            <param name="seconds">The duration to hold before fading</param>
        </member>
        <member name="M:Nautilus.Utility.BasicText.Hide">
            <summary>
            Hides our text item if it is displaying.
            </summary>
        </member>
        <member name="M:Nautilus.Utility.BasicText.GetText">
            <summary>
            Returns our current text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nautilus.Utility.BasicText.SetLocation(System.Single,System.Single)">
            <summary>
            Sets screen display location (position relative to the actual text is determined by the alignment)
            </summary>
            <param name="set_x">The x coordinate to set</param>
            <param name="set_y">The y coordinate to set</param>
        </member>
        <member name="M:Nautilus.Utility.BasicText.SetColor(UnityEngine.Color)">
            <summary>
            Sets the text color
            </summary>
            <param name="useColor">The text color to use</param>
        </member>
        <member name="M:Nautilus.Utility.BasicText.ClearColor">
            <summary>
            Resets to using "cloned" color of Subnautica default.
            </summary>
        </member>
        <member name="M:Nautilus.Utility.BasicText.SetSize(System.Int32)">
            <summary>
            Sets the font size.
            </summary>
            <param name="useSize">The text size to use</param>
        </member>
        <member name="M:Nautilus.Utility.BasicText.ClearSize">
            <summary>
            Resets to using "cloned" size of Subnautica default.
            </summary>
        </member>
        <member name="M:Nautilus.Utility.BasicText.SetFont(TMPro.TMP_FontAsset)">
            <summary>
            Sets the font 
            </summary>
            <param name="useFont">The font to render the text as.</param>
        </member>
        <member name="M:Nautilus.Utility.BasicText.ClearFont">
            <summary>
            Resets to using "cloned" font of Subnautica default.
            </summary>
        </member>
        <member name="M:Nautilus.Utility.BasicText.SetFontStyle(TMPro.FontStyles)">
            <summary>
            Sets the font style.
            </summary>
            <param name="useStyle">The text font style to use</param>
        </member>
        <member name="M:Nautilus.Utility.BasicText.ClearFontStyle">
            <summary>
            Resets to using "cloned" font style of Subnautica default.
            </summary>
        </member>
        <member name="M:Nautilus.Utility.BasicText.SetAlign(TMPro.TextAlignmentOptions)">
            <summary>
            Sets the text anchor.
            </summary>
            <param name="useAlign">The text anchor to align to</param>
        </member>
        <member name="M:Nautilus.Utility.BasicText.ClearAlign">
            <summary>
            Resets to using "cloned" font style of Subnautica default
            </summary>
        </member>
        <member name="M:Nautilus.Utility.BasicText.DoAlignment">
            <summary>
            Computes proper transform position based on alignment and size of text.
            </summary>
        </member>
        <member name="M:Nautilus.Utility.BasicText.InitializeText">
            <summary>
            Sets up all of our objects/components, when we are ready to actually display text for the first time.
            </summary>
        </member>
        <member name="T:Nautilus.Utility.ExtBannedIdManager">
            <summary>
            This class is tasked with checking external txt files for banned IDs that are not to be isssued when patching in new enum entries.
            </summary>
        </member>
        <member name="M:Nautilus.Utility.ExtBannedIdManager.GetBannedIdsFor(System.String,System.Collections.Generic.IList{System.Int32}[])">
            <summary>
            Gets the banned ids, reported by the external files, for the specified enum.
            </summary>
            <param name="enumName">Name of the enum.</param>
            <param name="combineWith">Any previously known banned IDs for this enum can be combined into the final list.</param>
            <returns>An <see cref="T:System.Collections.IEnumerable"/> of banned indexes not to be issued for new entries of the specified enum.</returns>
        </member>
        <member name="M:Nautilus.Utility.ExtBannedIdManager.GetBannedIdsFor(System.String)">
            <summary>
            Gets the banned ids, reported by the external files, for the specified enum.
            </summary>
            <param name="enumName">Name of the enum.</param>
            <returns>An <see cref="T:System.Collections.IEnumerable"/> of banned indexes not to be issued for new entries of the specified enum.</returns>
        </member>
        <member name="T:Nautilus.Utility.FontUtils">
            <summary>
            <para>Contains references to frequently used Font Assets for use in the <see cref="T:TMPro.TextMeshProUGUI"/> component, which is the preferred component for rendering text.</para>
            <para>The fonts referenced in this class should not be expected to exist until after the Main Menu scene has been loaded and both the <see cref="T:uGUI"/> and <see cref="T:uGUI_MainMenu"/> components have been initialized.</para>
            </summary>
        </member>
        <member name="P:Nautilus.Utility.FontUtils.Aller_Rg">
            <summary>
            Returns the regular version of the Aller font, referred to internally as 'Aller_Rg SDF'.
            </summary>
        </member>
        <member name="P:Nautilus.Utility.FontUtils.Aller_W_Bd">
            <summary>
            Returns a bold alternative of the Aller font, referred to internally as 'Aller_W_Bd SDF'.
            </summary>
        </member>
        <member name="M:Nautilus.Utility.FontUtils.SetFontInChildren(UnityEngine.GameObject,TMPro.TMP_FontAsset)">
            <summary>
            Applies the given font to every <see cref="T:TMPro.TextMeshProUGUI"/> component within <paramref name="rootGameObject"/> and its children (recursive).
            </summary>
            <param name="rootGameObject">The parent of all affected <see cref="T:TMPro.TextMeshProUGUI"/> componentss.</param>
            <param name="font">The Font Asset to be applied.</param>
        </member>
        <member name="T:Nautilus.Utility.ImageUtils">
            <summary>
            A collection of image loading utility methods that can create Unity objects from image files at runtime.
            </summary>
        </member>
        <member name="M:Nautilus.Utility.ImageUtils.LoadTextureFromFile(System.String,UnityEngine.TextureFormat)">
            <summary>
            Creates a new <see cref="T:UnityEngine.Texture2D" /> from an image file.
            </summary>
            <param name="filePathToImage">The path to the image file.</param>
            <param name="format">
            <para>The texture format. By default, this uses <see cref="F:UnityEngine.TextureFormat.BC7" />.</para>
            <para>https://docs.unity3d.com/ScriptReference/TextureFormat.BC7.html</para>
            <para>Don't change this unless you really know what you're doing.</para>
            </param>
            <returns>Will return a new <see cref="T:UnityEngine.Texture2D"/> instance if the file exists; Otherwise returns null.</returns>
            <remarks>
            Ripped from: https://github.com/RandyKnapp/SubnauticaModSystem/blob/master/SubnauticaModSystem/Common/Utility/ImageUtils.cs
            </remarks>
        </member>
        <member name="M:Nautilus.Utility.ImageUtils.LoadSpriteFromFile(System.String,UnityEngine.TextureFormat)">
            <summary>
            Creates a new <see cref="T:Atlas.Sprite" /> from an image file.
            </summary>
            <param name="filePathToImage">The path to the image file.</param>
            <param name="format">
            The texture format. By default, this uses <see cref="F:UnityEngine.TextureFormat.BC7" />.<br/>
            https://docs.unity3d.com/ScriptReference/TextureFormat.BC7.html <br/>
            Don't change this unless you really know what you're doing.
            </param>
            <returns>Will return a new <see cref="T:Atlas.Sprite"/> instance if the file exists; Otherwise returns null.</returns>
        </member>
        <member name="M:Nautilus.Utility.ImageUtils.LoadSpriteFromTexture(UnityEngine.Texture2D)">
            <summary>
            Creates a new <see cref="T:Atlas.Sprite" /> from an image file.
            </summary>
            <param name="texture2D">The 2D texture to convert into a sprite.</param>
            <returns>
            Will return a new <see cref="T:Atlas.Sprite" /> instance using the provided texture.
            </returns>
        </member>
        <member name="T:Nautilus.Utility.IOUtilities">
            <summary>
            Utilities for files and paths.
            </summary>
        </member>
        <member name="M:Nautilus.Utility.IOUtilities.Combine(System.String,System.String,System.String[])">
            <summary>
            Works like <see cref="M:System.IO.Path.Combine(System.String,System.String)"/>, but can have more than 2 paths
            </summary>
            <param name="one"></param>
            <param name="two"></param>
            <param name="rest"></param>
            <returns></returns>
        </member>
        <member name="T:Nautilus.Utility.ItemStorageHelper">
            <summary>
            A utility class that offers additional info about <see cref="T:ItemsContainer"/> instances.
            </summary>
            <seealso cref="T:StorageHelper" />
        </member>
        <member name="M:Nautilus.Utility.ItemStorageHelper.HasRoomForCached(ItemsContainer,System.Int32,System.Int32)">
            <summary>
            Using the cached container info, determines whether the specified container has room for an item of the specified size.
            </summary>
            <param name="container">The container to check.</param>
            <param name="width">The item width.</param>
            <param name="height">The item height.</param>
            <returns>
              <c>true</c> if there is room for the item in the container,; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nautilus.Utility.ItemStorageHelper.HasRoomForCached(ItemsContainer,Vector2int)">
            <summary>
            Using the cached container info, determines whether the specified container has room for an item of the specified size.
            </summary>
            <param name="container">The container to check.</param>
            <param name="itemSize">Size of the item.</param>
            <returns>
              <c>true</c> if there is room for the item in the container,; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nautilus.Utility.ItemStorageHelper.IsEmpty(ItemsContainer)">
            <summary>
            Determines whether the specified container is empty.
            </summary>
            <param name="container">The items container to check.</param>
            <returns>
              <c>true</c> if the specified container is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nautilus.Utility.ItemStorageHelper.IsFull(ItemsContainer)">
            <summary>
            Determines whether the specified container is full.
            </summary>
            <param name="container">The items container to check.</param>
            <returns>
              <c>true</c> if the specified container is full; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nautilus.Utility.ItemStorageHelper.GetTotalSlots(ItemsContainer)">
            <summary>
            The totals number of 1x1 slots in the container, as calculated by the container's width and height.
            </summary>
            <param name="container">The container.</param>
            <returns></returns>
        </member>
        <member name="M:Nautilus.Utility.ItemStorageHelper.GetStorageLabel(ItemsContainer)">
            <summary>
            Get the inernal label for the storage container.
            </summary>
            <param name="container">The container.</param>
            <returns>
            The label used and displayed in-game for the container.
            </returns>
        </member>
        <member name="M:Nautilus.Utility.ItemStorageHelper.GetAllowedTechTypes(ItemsContainer)">
            <summary>
            Gets the set of techtypes allowed in this container. This set can be altered.
            If the set is null or empty, then all items can be added.
            </summary>
            <param name="container">The container to check.</param>
            <returns>
            The collection of techtypes allowed in the container.
            </returns>
        </member>
        <member name="T:Nautilus.Utility.JsonUtils">
            <summary>
            A collection of utilities for interacting with JSON files.
            </summary>
        </member>
        <member name="M:Nautilus.Utility.JsonUtils.Load``1(System.String,System.Boolean,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Create an instance of <typeparamref name="T"/>, populated with data from the JSON file at the given 
            <paramref name="path"/>.
            </summary>
            <typeparam name="T">The type of object to initialise and populate with JSON data.</typeparam>
            <param name="path">The path on disk at which the JSON file can be found.</param>
            <param name="createFileIfNotExist">Whether a new JSON file should be created with default values if it does not 
            already exist.</param>
            <param name="jsonConverters">An array of <see cref="T:Newtonsoft.Json.JsonConverter"/>s to be used for deserialization.</param>
            <returns>The <typeparamref name="T"/> instance populated with data from the JSON file at
            <paramref name="path"/>, or default values if it cannot be found or an error is encountered while parsing the
            file.</returns>
            <seealso cref="M:Nautilus.Utility.JsonUtils.Load``1(``0,System.String,System.Boolean,Newtonsoft.Json.JsonConverter[])"/>
            <seealso cref="M:Nautilus.Utility.JsonUtils.Save``1(``0,System.String,Newtonsoft.Json.JsonConverter[])"/>
        </member>
        <member name="M:Nautilus.Utility.JsonUtils.Load``1(``0,System.String,System.Boolean,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Loads data from the JSON file at <paramref name="path"/> into the <paramref name="jsonObject"/>.
            </summary>
            <typeparam name="T">The type of <paramref name="jsonObject"/> to populate with JSON data.</typeparam>
            <param name="jsonObject">The <typeparamref name="T"/> instance to popular with JSON data.</param>
            <param name="path">The path on disk at which the JSON file can be found.</param>
            <param name="createFileIfNotExist">Whether a new JSON file should be created with default values if it does not
            already exist.</param>
            <param name="jsonConverters">An array of <see cref="T:Newtonsoft.Json.JsonConverter"/>s to be used for deserialization.</param>
            <seealso cref="M:Nautilus.Utility.JsonUtils.Load``1(System.String,System.Boolean,Newtonsoft.Json.JsonConverter[])"/>
            <seealso cref="M:Nautilus.Utility.JsonUtils.Save``1(``0,System.String,Newtonsoft.Json.JsonConverter[])"/>
        </member>
        <member name="M:Nautilus.Utility.JsonUtils.Save``1(``0,System.String,Newtonsoft.Json.JsonConverter[])">
            <summary>
            Saves the <paramref name="jsonObject"/> parsed as JSON data to the JSON file at <paramref name="path"/>,
            creating it if it does not exist.
            </summary>
            <typeparam name="T">The type of <paramref name="jsonObject"/> to parse into JSON data.</typeparam>
            <param name="jsonObject">The <typeparamref name="T"/> instance to parse into JSON data.</param>
            <param name="path">The path on disk at which to store the JSON file.</param>
            <param name="jsonConverters">An array of <see cref="T:Newtonsoft.Json.JsonConverter"/>s to be used for serialization.</param>
            <seealso cref="M:Nautilus.Utility.JsonUtils.Load``1(``0,System.String,System.Boolean,Newtonsoft.Json.JsonConverter[])"/>
            <seealso cref="M:Nautilus.Utility.JsonUtils.Load``1(System.String,System.Boolean,Newtonsoft.Json.JsonConverter[])"/>
        </member>
        <member name="T:Nautilus.Utility.KeyCodeUtils">
            <summary>
            A collection of <see cref="T:UnityEngine.KeyCode"/> related utility methods.
            </summary>
        </member>
        <member name="M:Nautilus.Utility.KeyCodeUtils.KeyCodeToString(UnityEngine.KeyCode)">
            <summary>
            Turn a <seealso cref="T:UnityEngine.KeyCode"/> into a <seealso cref="T:System.String"/>
            </summary>
            <param name="keyCode"></param>
            <returns></returns>
        </member>
        <member name="M:Nautilus.Utility.KeyCodeUtils.GetDisplayTextForKeyCode(UnityEngine.KeyCode)">
            <summary>
            Get the UI display text for KeyCode input using uGUI.buttonCharacters.
            Supports most key inputs, including controller and mouse buttons.
            </summary>
            <param name="keyCode"></param>
            <returns></returns>
        </member>
        <member name="M:Nautilus.Utility.KeyCodeUtils.StringToKeyCode(System.String)">
            <summary>
            Turn a <seealso cref="T:System.String"/> into a <seealso cref="T:UnityEngine.KeyCode"/>
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Nautilus.Utility.KeyCodeUtils.GetKeyDown(UnityEngine.KeyCode)">
            <summary>
            Check this is the first frame a key has been pressed
            </summary>
            <param name="keyCode"></param>
            <returns>True during the first frame a key has been pressed, otherwise false</returns>
            <seealso cref="T:UnityEngine.KeyCode"/>
            <seealso cref="M:Nautilus.Utility.KeyCodeUtils.GetKeyDown(System.String)"/>
        </member>
        <member name="M:Nautilus.Utility.KeyCodeUtils.GetKeyDown(System.String)">
            <summary>
            Check this is the first frame a key has been pressed.
            </summary>
            <param name="s"></param>
            <returns>True during the first frame a key has been pressed, otherwise false</returns>
            <seealso cref="M:Nautilus.Utility.KeyCodeUtils.GetKeyDown(UnityEngine.KeyCode)"/>
        </member>
        <member name="M:Nautilus.Utility.KeyCodeUtils.GetKeyHeld(UnityEngine.KeyCode)">
            <summary>
            Check a key is currently held down
            </summary>
            <param name="keyCode"></param>
            <returns>True every frame a key is held down, otherwise false</returns>
            <seealso cref="T:UnityEngine.KeyCode"/>
            <seealso cref="M:Nautilus.Utility.KeyCodeUtils.GetKeyHeld(System.String)"/>
        </member>
        <member name="M:Nautilus.Utility.KeyCodeUtils.GetKeyHeld(System.String)">
            <summary>
            Check a key is currently held down
            </summary>
            <param name="s"></param>
            <returns>True every frame a key is held down, otherwise false</returns>
            <seealso cref="M:Nautilus.Utility.KeyCodeUtils.GetKeyHeld(UnityEngine.KeyCode)"/>
        </member>
        <member name="M:Nautilus.Utility.KeyCodeUtils.GetKeyHeldTime(UnityEngine.KeyCode)">
            <summary>
            Check how long a key has been held down
            </summary>
            <param name="keyCode"></param>
            <returns></returns>
            <seealso cref="T:UnityEngine.KeyCode"/>
            <seealso cref="M:Nautilus.Utility.KeyCodeUtils.GetKeyHeldTime(System.String)"/>
        </member>
        <member name="M:Nautilus.Utility.KeyCodeUtils.GetKeyHeldTime(System.String)">
            <summary>
            Check how long a key has been held down
            </summary>
            <param name="s"></param>
            <returns></returns>
            <seealso cref="M:Nautilus.Utility.KeyCodeUtils.GetKeyHeldTime(UnityEngine.KeyCode)"/>
        </member>
        <member name="M:Nautilus.Utility.KeyCodeUtils.GetKeyUp(UnityEngine.KeyCode)">
            <summary>
            Check this is the frame a key has been released
            </summary>
            <param name="keyCode"></param>
            <returns>True during the first frame a key has been released, otherwise false</returns>
            <seealso cref="T:UnityEngine.KeyCode"/>
            <seealso cref="M:Nautilus.Utility.KeyCodeUtils.GetKeyUp(System.String)"/>
        </member>
        <member name="M:Nautilus.Utility.KeyCodeUtils.GetKeyUp(System.String)">
            <summary>
            Check this is the first frame a key has been released
            </summary>
            <param name="s"></param>
            <returns>True during the first frame a key has been released, otherwise false</returns>
            <seealso cref="M:Nautilus.Utility.KeyCodeUtils.GetKeyUp(UnityEngine.KeyCode)"/>
        </member>
        <member name="M:Nautilus.Utility.KeyCodeUtils.GetAnalogValueForKey(UnityEngine.KeyCode)">
            <summary>
            Gets the analog value for a <seealso cref="T:UnityEngine.KeyCode"/> following the same logic as
            <seealso cref="M:GameInput.GetAnalogValueForButton(GameInput.Button)"/>
            </summary>
            <param name="keyCode"></param>
            <returns>1f while a key is being held, otherwise 0f</returns>
            <seealso cref="T:UnityEngine.KeyCode"/>
            <seealso cref="M:Nautilus.Utility.KeyCodeUtils.GetAnalogValueForKey(System.String)"/>
        </member>
        <member name="M:Nautilus.Utility.KeyCodeUtils.GetAnalogValueForKey(System.String)">
            <summary>
            Gets the analog value for a key by <seealso cref="T:System.String"/> value, following the same logic as
            <seealso cref="M:GameInput.GetAnalogValueForButton(GameInput.Button)"/>
            </summary>
            <param name="s"></param>
            <returns>1f while a key is being held, otherwise 0f</returns>
            <seealso cref="M:Nautilus.Utility.KeyCodeUtils.GetAnalogValueForKey(UnityEngine.KeyCode)"/>
        </member>
        <member name="T:Nautilus.Utility.MaterialModifiers.ColorModifier">
            <summary>
            Basic material modifier that sets the <see cref="P:UnityEngine.Material.color"/> property on all materials.
            </summary>
        </member>
        <member name="M:Nautilus.Utility.MaterialModifiers.ColorModifier.#ctor(UnityEngine.Color)">
            <summary>
            Sets the <see cref="P:UnityEngine.Material.color"/> property on all materials.
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:Nautilus.Utility.MaterialModifiers.ColorModifier.EditMaterial(UnityEngine.Material,UnityEngine.Renderer,System.Int32,Nautilus.Utility.MaterialUtils.MaterialType)">
            <summary>
            Applies the color changes to the material.
            </summary>
        </member>
        <member name="T:Nautilus.Utility.MaterialModifiers.MaterialModifier">
            <summary>
            Base class for material modifiers. Can be overriden to implement custom behaviour.
            </summary>
        </member>
        <member name="M:Nautilus.Utility.MaterialModifiers.MaterialModifier.EditMaterial(UnityEngine.Material,UnityEngine.Renderer,System.Int32,Nautilus.Utility.MaterialUtils.MaterialType)">
            <summary>
            Method called after all other material conversions have finished.
            </summary>
            <param name="material">The material being modified.</param>
            <param name="renderer">The renderer using the <paramref name="material"/>.</param>
            <param name="materialIndex">The index of the given <paramref name="material"/> in its <see cref="T:UnityEngine.Renderer"/>.</param>
            <param name="materialType">The type of material that this can be expected to be. Determined in <see cref="M:Nautilus.Utility.MaterialUtils.ApplySNShaders(UnityEngine.GameObject,System.Single,System.Single,System.Single,Nautilus.Utility.MaterialModifiers.MaterialModifier[])"/> based on specific keywords.</param>
        </member>
        <member name="M:Nautilus.Utility.MaterialModifiers.MaterialModifier.BlockShaderConversion(UnityEngine.Material,UnityEngine.Renderer,Nautilus.Utility.MaterialUtils.MaterialType)">
            <summary>
            Method called before any shader conversions and material modifiers are applied. By default returns false.<br/>
            If <see langword="true"/> is returned from ANY MaterialModifier, the shader of <paramref name="material"/> will <i>not</i> be converted to MarmosetUBER. However, all modifiers will still be applied normally.
            </summary>
            <param name="material">The material being evalauted.</param>
            <param name="renderer">The renderer using the <paramref name="material"/>.</param>
            <param name="materialType">The type of material that this can be expected to be. Determined in <see cref="M:Nautilus.Utility.MaterialUtils.ApplySNShaders(UnityEngine.GameObject,System.Single,System.Single,System.Single,Nautilus.Utility.MaterialModifiers.MaterialModifier[])"/> based on specific keywords.</param>
            <returns></returns>
        </member>
        <member name="T:Nautilus.Utility.MaterialUtils">
            <summary>
            Utilities related to Materials and Shaders.
            </summary>
        </member>
        <member name="P:Nautilus.Utility.MaterialUtils.IsReady">
            <summary>
            Only returns true once all relevant materials/shaders have been loaded by the MaterialUtils class and are safe to be used.
            </summary>
        </member>
        <member name="T:Nautilus.Utility.MaterialUtils.Shaders">
            <summary>
            Contains references to various Shaders.
            </summary>
        </member>
        <member name="P:Nautilus.Utility.MaterialUtils.Shaders.MarmosetUBER">
            <summary>
            The <see cref="T:UnityEngine.Shader"/> that is used for most materials in the game.
            </summary>
        </member>
        <member name="P:Nautilus.Utility.MaterialUtils.Shaders.ParticlesUBER">
            <summary>
            The <see cref="T:UnityEngine.Shader"/> that is used for most particle systems.
            </summary>
        </member>
        <member name="P:Nautilus.Utility.MaterialUtils.Shaders.IonCube">
            <summary>
            The <see cref="T:UnityEngine.Shader"/> that is used for Ion Cubes.
            </summary>
        </member>
        <member name="T:Nautilus.Utility.MaterialUtils.MaterialType">
            <summary>
            Enum for some generic types of Materials.
            </summary>
        </member>
        <member name="F:Nautilus.Utility.MaterialUtils.MaterialType.Opaque">
            <summary>
            Solid material with no transparency.
            </summary>
        </member>
        <member name="F:Nautilus.Utility.MaterialUtils.MaterialType.Transparent">
            <summary>
            See-through material.
            </summary>
        </member>
        <member name="F:Nautilus.Utility.MaterialUtils.MaterialType.Cutout">
            <summary>
            Transparent pixels on the texture are not renderered. Useful for decals.
            </summary>
        </member>
        <member name="F:Nautilus.Utility.MaterialUtils.kOpaqueRenderQueue">
            <summary>
            Render queue used by opaque objects.
            </summary>
        </member>
        <member name="F:Nautilus.Utility.MaterialUtils.kTransparencyRenderQueue">
            <summary>
            Render queue used by transparent objects.
            </summary>
        </member>
        <member name="M:Nautilus.Utility.MaterialUtils.ApplySNShaders(UnityEngine.GameObject,System.Single,System.Single,System.Single,Nautilus.Utility.MaterialModifiers.MaterialModifier[])">
            <summary>
            <para>Applies the necessary settings for Subnautica's standard shader (<see cref="P:Nautilus.Utility.MaterialUtils.Shaders.MarmosetUBER"/>) to the passed <see cref="T:UnityEngine.GameObject"/>.</para>
            <para><b>The specific changes to each material are influenced by certain (case-insensitive) keywords in their asset names:</b>
            <br/>"TRANSPARENT": Enables transparency.
            <br/>"CUTOUT": Enables alpha clipping.</para>
            </summary>
            <param name="gameObject">The <see cref="T:UnityEngine.GameObject"/> to apply the shaders to (includes all children).</param>
            <param name="shininess">'_Shininess' value of the shader. Recommended range of 1.0f-8.0f.</param>
            <param name="specularIntensity">'_SpecularInt' value of the shader. Values around 1f are recommended.</param>
            <param name="glowStrength">'_GlowStrength' and '_GlowStrengthNight' value of the shader. Should not be absurdly high.</param>
            <param name="modifiers">Optional array of classes that inherit from the <see cref="T:Nautilus.Utility.MaterialModifiers.MaterialModifier"/> class. This allows for extensive customization of the method. Called in ascending order on every material.</param>
        </member>
        <member name="M:Nautilus.Utility.MaterialUtils.ApplyUBERShader(UnityEngine.Material,System.Single,System.Single,System.Single,Nautilus.Utility.MaterialUtils.MaterialType)">
            <summary>
            Applies the <see cref="P:Nautilus.Utility.MaterialUtils.Shaders.MarmosetUBER"/> Shader to the given material.
            </summary>
            <param name="material">The material to apply changes to.</param>
            <param name="shininess">'_Shininess' value of the shader. Recommended range of 1.0f-8.0f.</param>
            <param name="specularIntensity">'_SpecularInt' value of the shader. Values around 1f are recommended.</param>
            <param name="glowStrength">'_GlowStrength' and '_GlowStrengthNight' value of the shader. Should not be absurdly high.</param>
            <param name="materialType">Controls various settings including alpha clipping and transparency.</param>
        </member>
        <member name="M:Nautilus.Utility.MaterialUtils.SetMaterialTransparent(UnityEngine.Material,System.Boolean)">
            <summary>
            Toggle the transparency on a material.
            </summary>
            <param name="material"></param>
            <param name="transparent"></param>
            <returns></returns>
        </member>
        <member name="M:Nautilus.Utility.MaterialUtils.SetMaterialCutout(UnityEngine.Material,System.Boolean)">
            <summary>
            Toggle alpha clipping on a material. Incompatbile with transparency.
            </summary>
            <param name="material"></param>
            <param name="cutout"></param>
            <returns></returns>
        </member>
        <member name="P:Nautilus.Utility.MaterialUtils.IonCubeMaterial">
            <summary>
            Gets the default Ion Cube Material.
            </summary>
        </member>
        <member name="P:Nautilus.Utility.MaterialUtils.PrecursorGlassMaterial">
            <summary>
            Gets the Precursor Glass Material.
            </summary>
        </member>
        <member name="P:Nautilus.Utility.MaterialUtils.StasisFieldMaterial">
            <summary>
            Gets the Stasis Rifle's ball Material.
            </summary>
        </member>
        <member name="P:Nautilus.Utility.MaterialUtils.ForceFieldMaterial">
            <summary>
            Gets the Precursor Force Field Material.
            </summary>
        </member>
        <member name="P:Nautilus.Utility.MaterialUtils.AirWaterBarrierMaterial">
            <summary>
            Gets the Material used by Alien Bases for the transition between water and air.
            </summary>
        </member>
        <member name="P:Nautilus.Utility.MaterialUtils.GhostMaterial">
            <summary>
            Gets the material used by unfinished constructions.
            </summary>
        </member>
        <member name="T:Nautilus.Utility.ModMessages.BasicModMessageReader">
            <summary>
            Basic implementation of the abstract <see cref="T:Nautilus.Utility.ModMessages.ModMessageReader"/> that runs an action when a message with the given subject is received.
            </summary>
        </member>
        <member name="M:Nautilus.Utility.ModMessages.BasicModMessageReader.#ctor(System.String,System.Action{System.Object[]})">
            <summary>
            Creates a message reader that runs the given <paramref name="action"/> when a message with the given <paramref name="subject"/> is received.
            </summary>
            <param name="subject">The subject that this reader is looking for.</param>
            <param name="action">The action that is run for any message with the given <paramref name="subject"/>.</param>
        </member>
        <member name="M:Nautilus.Utility.ModMessages.BasicModMessageReader.OnReceiveMessage(Nautilus.Utility.ModMessages.ModMessage)">
            <inheritdoc/>
        </member>
        <member name="T:Nautilus.Utility.ModMessages.ModInbox">
            <summary>
            An object with an address. Receives mail and allows it to be read at any time. Any held messages (messages sent before this inbox was created) will not be read
            until the <see cref="M:Nautilus.Utility.ModMessages.ModInbox.ReadAnyHeldMessages"/> method is called.
            </summary>
        </member>
        <member name="P:Nautilus.Utility.ModMessages.ModInbox.Address">
            <summary>
            The address of this inbox. Conventionally should match the mod's GUID.
            </summary>
        </member>
        <member name="P:Nautilus.Utility.ModMessages.ModInbox.IsAcceptingMessages">
            <summary>
            If <see langword="false"/>, this inbox will not automatically read messages and will instead put any received messages on hold. If you are setting this property to
            <see langword="true"/> at a later time, you still need to call <see cref="M:Nautilus.Utility.ModMessages.ModInbox.ReadAnyHeldMessages"/> to catch up.
            </summary>
        </member>
        <member name="P:Nautilus.Utility.ModMessages.ModInbox.AcceptsGlobalMessages">
            <summary>
            Determines whether this inbox can receive global messages or not.
            </summary>
        </member>
        <member name="M:Nautilus.Utility.ModMessages.ModInbox.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructs an inbox with the given <paramref name="address"/>.
            </summary>
            <param name="address">The address of this inbox. Other mods will use this string to contact this mod. Conventionally should match the mod's GUID. This parameter should NOT be
            changed if any other mod is already using it!</param>
            <param name="acceptsGlobalMessages">Determines whether this inbox can receive global messages or not.</param>
            <param name="acceptingAllMessages">If <see langword="false"/>, this inbox will not automatically read messages and will instead put any received messages on hold.</param>
        </member>
        <member name="M:Nautilus.Utility.ModMessages.ModInbox.AddMessageReader(Nautilus.Utility.ModMessages.ModMessageReader)">
            <summary>
            Adds an object that reads and handles any received messages.
            </summary>
            <param name="reader">The instance of the <see cref="T:Nautilus.Utility.ModMessages.ModMessageReader"/> to register.</param>
        </member>
        <member name="M:Nautilus.Utility.ModMessages.ModInbox.ReadAnyHeldMessages">
            <summary>
            Reads any messages that were sent to this address before the inbox was created. This will NOT do anything if <see cref="P:Nautilus.Utility.ModMessages.ModInbox.IsAcceptingMessages"/> is <see langword="false"/>!!!
            </summary>
        </member>
        <member name="T:Nautilus.Utility.ModMessages.ModMessage">
            <summary>
            An instance of a message that is either sent instantly or held until received.
            </summary>
        </member>
        <member name="P:Nautilus.Utility.ModMessages.ModMessage.Recipient">
            <summary>
            The address of the <see cref="T:Nautilus.Utility.ModMessages.ModInbox"/> that the message will go to. In C# terms, this is analogous to the class name.
            </summary>
        </member>
        <member name="P:Nautilus.Utility.ModMessages.ModMessage.Subject">
            <summary>
            The subject of the message. Determines the purpose of a message. In C# terms, this is analogous to the method name.
            </summary>
        </member>
        <member name="P:Nautilus.Utility.ModMessages.ModMessage.Contents">
            <summary>
            Any arbitrary data sent through the message. Optional. In C# terms, this is analogous to the method's parameters.
            </summary>
        </member>
        <member name="M:Nautilus.Utility.ModMessages.ModMessage.#ctor(System.String,System.String,System.Object[])">
            <summary>
            Creates an instance of a message.
            </summary>
            <param name="recipient">The address of the <see cref="T:Nautilus.Utility.ModMessages.ModInbox"/> that the message will go to. In C# terms, this is analogous to the class name.</param>
            <param name="subject">The subject of the message. Determines the purpose of a message. In C# terms, this is analogous to the method name.</param>
            <param name="contents">Any arbitrary data sent through the message. Optional. In C# terms, this is analogous to the method's parameters.</param>
        </member>
        <member name="T:Nautilus.Utility.ModMessages.ModMessageReader">
            <summary>
            The base class of any object that receives mod messages and handles them.
            </summary>
        </member>
        <member name="M:Nautilus.Utility.ModMessages.ModMessageReader.OnReceiveMessage(Nautilus.Utility.ModMessages.ModMessage)">
            <summary>
            Called when any message is received.
            </summary>
        </member>
        <member name="M:Nautilus.Utility.ModMessages.ModMessageReader.TryHandleDataRequest(Nautilus.Utility.ModMessages.ModMessage,System.Object@)">
            <summary>
            Called when data is requested. Similar to a normal message, but has a return value. Unlike normal messages, data requests can NOT be held.
            </summary>
            <param name="message">The basic message data for this request.</param>
            <param name="returnValue">The object that is returned from this method, if any. Otherwise should be <see langword="default"/>.</param>
            <returns>True if this method is willing to respond to the message's particular subject, false otherwise. If TRUE is returned, all other readers will be ignored.</returns>
        </member>
        <member name="T:Nautilus.Utility.ModMessages.ModMessageSystem">
            <summary>
            A messaging system for cross-mod communication with <see cref="T:Nautilus.Utility.ModMessages.ModInbox"/> instances. Allows for ultra-soft dependencies and attempts to eliminate race conditions.
            </summary>
        </member>
        <member name="M:Nautilus.Utility.ModMessages.ModMessageSystem.Send(System.String,System.String,System.Object[])">
            <summary>
            Sends a single message to a <see cref="T:Nautilus.Utility.ModMessages.ModInbox"/>. If the message is not read immediately, it will be held until read.
            </summary>
            <param name="recipient">The address of the <see cref="T:Nautilus.Utility.ModMessages.ModInbox"/> that the message will go to. In C# terms, this is analogous to the class name.</param>
            <param name="subject">The subject of the message. Determines the purpose of a message. In C# terms, this is analogous to the method name.</param>
            <param name="contents">Any arbitrary data sent through the message. Optional. In C# terms, this is analogous to the method's parameters.</param>
        </member>
        <member name="M:Nautilus.Utility.ModMessages.ModMessageSystem.SendGlobal(System.String,System.Object[])">
            <summary>
            <para>Sends a global message to every <see cref="T:Nautilus.Utility.ModMessages.ModInbox"/> that exists, and even to ones that will exist in the future.
            If a message is not read immediately by any inbox, it will be held until read.</para>
            <para>IMPORTANT: Global messages can NOT be held after patch time has completed (once you have left the main menu).</para>
            </summary>
            <param name="subject">The subject of the message. Determines the purpose of a message. In C# terms, this is analogous to the method name.</param>
            <param name="contents">Any arbitrary data sent through the message. Optional. In C# terms, this is analogous to the method's parameters.</param>
        </member>
        <member name="M:Nautilus.Utility.ModMessages.ModMessageSystem.Send(Nautilus.Utility.ModMessages.ModMessage)">
            <summary>
            Sends a single message to a <see cref="T:Nautilus.Utility.ModMessages.ModInbox"/>. If the message is not read immediately, it will be held until read. Messages can not be held
            during game-time.
            </summary>
            <param name="messageInstance">The message to send.</param>
        </member>
        <member name="M:Nautilus.Utility.ModMessages.ModMessageSystem.SendDataRequest(Nautilus.Utility.ModMessages.ModMessage,System.Object@)">
            <summary>
            <para>Sends a single message to a <see cref="T:Nautilus.Utility.ModMessages.ModInbox"/> and attempts to receive a value.</para>
            <para>If the message is not read immediately (i.e. the inbox is closed or has not been created yet), it will be DELETED, and not held!</para>
            </summary>
            <param name="messageInstance">The message to send.</param>
            <param name="result">The data that is received, if any.</param>
            <returns>True if any <see cref="T:Nautilus.Utility.ModMessages.ModMessageReader"/> on the receiving end handled the message and returned a value.</returns>
        </member>
        <member name="M:Nautilus.Utility.ModMessages.ModMessageSystem.RegisterInbox(Nautilus.Utility.ModMessages.ModInbox)">
            <summary>
            Registers an inbox so that it can receive mail. Please note that this does NOT automatically read any messages on the <paramref name="inbox"/> that were sent before it was
            registered. For that you must call its <see cref="M:Nautilus.Utility.ModMessages.ModInbox.ReadAnyHeldMessages"/> method.
            </summary>
            <param name="inbox">The inbox to register.</param>
        </member>
        <member name="T:Nautilus.Utility.PlayerPrefsExtra">
            <summary>
            A collection of utility methods that simplify calls into <see cref="T:UnityEngine.PlayerPrefs"/> for quick custom save data.
            </summary>
        </member>
        <member name="M:Nautilus.Utility.PlayerPrefsExtra.GetBool(System.String,System.Boolean)">
            <summary>
            Get a <see cref="T:System.Boolean"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nautilus.Utility.PlayerPrefsExtra.SetBool(System.String,System.Boolean)">
            <summary>
            Set a <see cref="T:System.Boolean"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nautilus.Utility.PlayerPrefsExtra.GetKeyCode(System.String,UnityEngine.KeyCode)">
            <summary>
            Get a <see cref="T:UnityEngine.KeyCode"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nautilus.Utility.PlayerPrefsExtra.SetKeyCode(System.String,UnityEngine.KeyCode)">
            <summary>
            Set a <see cref="T:UnityEngine.KeyCode"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nautilus.Utility.PlayerPrefsExtra.GetColor(System.String)">
            <summary>
            Get a <see cref="T:UnityEngine.Color"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Nautilus.Utility.PlayerPrefsExtra.GetColor(System.String,UnityEngine.Color)">
            <summary>
            Get a <see cref="T:UnityEngine.Color"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:Nautilus.Utility.PlayerPrefsExtra.SetColor(System.String,UnityEngine.Color)">
            <summary>
            Set a <see cref="T:UnityEngine.Color"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nautilus.Utility.PlayerPrefsExtra.GetVector2(System.String)">
            <summary>
            Get a <see cref="T:UnityEngine.Vector2"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Nautilus.Utility.PlayerPrefsExtra.GetVector2(System.String,UnityEngine.Vector2)">
            <summary>
            Get a <see cref="T:UnityEngine.Vector2"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nautilus.Utility.PlayerPrefsExtra.SetVector2(System.String,UnityEngine.Vector2)">
            <summary>
            Set a <see cref="T:UnityEngine.Vector2"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nautilus.Utility.PlayerPrefsExtra.GetVector2int(System.String)">
            <summary>
            Get a <see cref="T:Vector2int"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Nautilus.Utility.PlayerPrefsExtra.GetVector2int(System.String,Vector2int)">
            <summary>
            Get a <see cref="T:Vector2int"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nautilus.Utility.PlayerPrefsExtra.SetVector2int(System.String,Vector2int)">
            <summary>
            Set a <see cref="T:Vector2int"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nautilus.Utility.PlayerPrefsExtra.GetVector3(System.String)">
            <summary>
            Get a <see cref="T:UnityEngine.Vector3"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Nautilus.Utility.PlayerPrefsExtra.GetVector3(System.String,UnityEngine.Vector3)">
            <summary>
            Get a <see cref="T:UnityEngine.Vector3"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nautilus.Utility.PlayerPrefsExtra.SetVector3(System.String,UnityEngine.Vector3)">
            <summary>
            Set a <see cref="T:UnityEngine.Vector3"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nautilus.Utility.PlayerPrefsExtra.GetVector4(System.String)">
            <summary>
            Get a <see cref="T:UnityEngine.Vector4"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Nautilus.Utility.PlayerPrefsExtra.GetVector4(System.String,UnityEngine.Vector4)">
            <summary>
            Get a <see cref="T:UnityEngine.Vector4"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nautilus.Utility.PlayerPrefsExtra.SetVector4(System.String,UnityEngine.Vector4)">
            <summary>
            Set a <see cref="T:UnityEngine.Vector4"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Nautilus.Utility.PlayerPrefsExtra.GetQuaternion(System.String)">
            <summary>
            Get a <see cref="T:UnityEngine.Quaternion"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Nautilus.Utility.PlayerPrefsExtra.GetQuaternion(System.String,UnityEngine.Quaternion)">
            <summary>
            Get a <see cref="T:UnityEngine.Quaternion"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Nautilus.Utility.PlayerPrefsExtra.SetQuaternion(System.String,UnityEngine.Quaternion)">
            <summary>
            Set a <see cref="T:UnityEngine.Quaternion"/> value using <see cref="T:UnityEngine.PlayerPrefs"/>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="T:Nautilus.Utility.ConstructableFlags">
            <summary>
            Defines how a constructable can be placed.
            </summary>
        </member>
        <member name="F:Nautilus.Utility.ConstructableFlags.None">
            <summary>
            Undefined placement.
            </summary>
        </member>
        <member name="F:Nautilus.Utility.ConstructableFlags.Ground">
            <summary>
            Can be placed on floors.
            </summary>
        </member>
        <member name="F:Nautilus.Utility.ConstructableFlags.Wall">
            <summary>
            Can be placed on walls.
            </summary>
        </member>
        <member name="F:Nautilus.Utility.ConstructableFlags.Ceiling">
            <summary>
            Can be placed on ceilings.
            </summary>
        </member>
        <member name="F:Nautilus.Utility.ConstructableFlags.Base">
            <summary>
            Can be placed in bases.
            </summary>
        </member>
        <member name="F:Nautilus.Utility.ConstructableFlags.Submarine">
            <summary>
            Can be placed in Cyclops or any other submarine.
            </summary>
        </member>
        <member name="F:Nautilus.Utility.ConstructableFlags.Inside">
            <summary>
            Can be placed inside. Combines <see cref="F:Nautilus.Utility.ConstructableFlags.Base"/> and <see cref="F:Nautilus.Utility.ConstructableFlags.Submarine"/>.
            </summary>
        </member>
        <member name="F:Nautilus.Utility.ConstructableFlags.Default">
            <summary>
            Default placement flags. Includes <see cref="F:Nautilus.Utility.ConstructableFlags.Ground"/> and <see cref="F:Nautilus.Utility.ConstructableFlags.Inside"/>
            </summary>
        </member>
        <member name="F:Nautilus.Utility.ConstructableFlags.Outside">
            <summary>
            Can be placed outside.
            </summary>
        </member>
        <member name="F:Nautilus.Utility.ConstructableFlags.AllowedOnConstructable">
            <summary>
            Allowed on constructed entities such as tables, desks, shelves, etc...
            </summary>
        </member>
        <member name="F:Nautilus.Utility.ConstructableFlags.Rotatable">
            <summary>
            The constructable can be rotated during placement.
            </summary>
        </member>
        <member name="T:Nautilus.Utility.PrefabUtils">
            <summary>
            A small collection of prefab related utilities.
            </summary>
        </member>
        <member name="M:Nautilus.Utility.PrefabUtils.AddBasicComponents(UnityEngine.GameObject,System.String,TechType,LargeWorldEntity.CellLevel)">
            <summary>
            Adds and configures the following components on the <paramref name="prefab"/>.<para/>
            <br/>- <see cref="T:PrefabIdentifier"/>: Required for an object to be considered a prefab.
            <br/>- <see cref="T:TechTag"/>: Required for inventory items, crafting, scanning, etc.
            <br/>- <see cref="T:LargeWorldEntity"/>: Required for objects to persist after saving and exiting.
            <br/>- <see cref="T:SkyApplier"/>: Added if Renderers exist in the hierarchy. Applies the correct lighting onto an object.
            </summary>
            <param name="prefab">The prefab to operate on.</param>
            <param name="classId">The class ID associated with the specified prefab.</param>
            <param name="techType">Ignored if <see cref="F:TechType.None"/> is inputted.</param>
            <param name="cellLevel">Level of distance this prefab can stay visible before unloading.</param>
        </member>
        <member name="M:Nautilus.Utility.PrefabUtils.AddConstructable(UnityEngine.GameObject,TechType,Nautilus.Utility.ConstructableFlags,UnityEngine.GameObject)">
            <summary>
            Adds and configures the <see cref="T:Constructable"/> component on the specified prefab.
            </summary>
            <param name="prefab">The prefab to operate on.</param>
            <param name="techType">The tech type associated with the specified prefab.</param>
            <param name="constructableFlags">A bitmask comprised of one or more <see cref="T:Nautilus.Utility.ConstructableFlags"/> that specify how the prefab should be treated during placement.</param>
            <param name="model"><para>The child GameObject that holds all the renderers that are used for the ghost model.
            If assigned, this parameter will control the <see cref="F:Constructable.model"/> field. This field MUST BE ASSIGNED A VALUE to avoid errors when building!</para>
            <para>This should be a child of <paramref name="prefab"/>, and NOT the root. If it is the same value as <paramref name="prefab"/>, you have done something wrong!</para></param>
            <returns>A reference to the added <see cref="T:Constructable"/> instance.</returns>
        </member>
        <member name="M:Nautilus.Utility.PrefabUtils.AddVFXFabricating(UnityEngine.GameObject,System.String,System.Single,System.Single,UnityEngine.Vector3,System.Single,UnityEngine.Vector3)">
            <summary>
            Adds the <see cref="T:VFXFabricating"/> component onto the child found by <paramref name="pathToModel"/>. 
            </summary>
            <param name="prefabRoot">The prefab object that this is applied to.</param>
            <param name="pathToModel">Leave as null or empty to point to the prefab root. Otherwise this is the path to the crafting model Transform, relative to the prefab's root Transform. For example, the Repair Tool's would be `welder_scaled/welder`.</param>
            <param name="minY">
            <para>The relative y position of where the ghost effect begins, in global coordinates relative to the model's center, taking the <paramref name="posOffset"/> into account.</para>
            <para>Typically a negative value because the bottom of an object is below its center. You may need to adjust this at runtime with Subnautica Runtime Editor to get desired results.</para></param>
            <param name="maxY">
            <para>The relative y position of where the ghost effect ends, in global coordinates relative to the model's center, taking the <paramref name="posOffset"/> into account.</para>
            <para>Typically a positive value because the top of an object is above its center. You may need to adjust this at runtime with Subnautica Runtime Editor to get desired results.</para></param>
            <param name="posOffset">The offset of the model when being crafted (in METERS). This is generally around zero, but the y value may be adjusted up or down a few millimeters to fix clipping/floating issues.</param>
            <param name="scaleFactor">The relative scale of the model. Generally is 1x for most items.</param>
            <param name="eulerOffset">Rotational offset.</param>
            <returns>A reference to the added <see cref="T:VFXFabricating"/> instance.</returns>
        </member>
        <member name="M:Nautilus.Utility.PrefabUtils.AddStorageContainer(UnityEngine.GameObject,System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            <para>Adds the <see cref="T:StorageContainer"/> component to the given prefab, for basic use cases with lockers and such.</para>
            <para>Due to how this component needs to be initialized, this method will disable the object and re-enable it after the component is added (assuming it was already active). This all happens within the same frame and will not be seen.</para>
            </summary>
            <param name="prefabRoot">The prefab that the component is added onto. This does not necessarily NEED to be the "prefab root". You can set it to a
            child collider if you want a smaller area of interaction or to have multiple storage containers on one prefab.</param>
            <param name="storageRootName">The name of the object that internally holds all of the items.</param>
            <param name="storageRootClassId">A unique string for the <see cref="T:ChildObjectIdentifier"/> component.</param>
            <param name="width">The width of this container's face.</param>
            <param name="height">The height of this container's interface.</param>
            <param name="preventDeconstructionIfNotEmpty">If true, you cannot destroy this prefab unless all of its storage containers are empty.</param>
            <returns>A reference to the added <see cref="T:StorageContainer"/> instance.</returns>
        </member>
        <member name="M:Nautilus.Utility.PrefabUtils.AddEnergyMixin(UnityEngine.GameObject,System.String,TechType,System.Collections.Generic.List{TechType},EnergyMixin.BatteryModels[],System.String)">
            <summary>
            <para>Adds the <see cref="T:EnergyMixin"/> component to an object that is expected to have a slot for one battery or other power source.</para>
            <para>Due to how this component needs to be initialized, this method will disable the object and re-enable it after the component is added (assuming it was already active). This all happens within the same frame and will not be seen.</para>
            </summary>
            <param name="prefabRoot">The root of the prefab object, where the component is added.</param>
            <param name="storageRootClassId">A unique string for the <see cref="T:ChildObjectIdentifier"/> component.</param>
            <param name="defaultBattery">The TechType of the battery that is added by default. If there should be no default, set this value to <see cref="F:TechType.None"/>.</param>
            <param name="compatibleBatteries">The list of all compatible batteries. By default is typically <see cref="F:TechType.Battery"/> and <see cref="F:TechType.PrecursorIonBattery"/>. Must not be null!</param>
            <param name="batteryModels">If assigned a value, allows different models to appear with different battery TechTypes. Also consider <see cref="F:EnergyMixin.controlledObjects"/> for a more basic version of this that is not TechType-dependent.</param>
            <param name="storageRootName">The name of the object that internally holds all of the batteries.</param>
            <returns>A reference to the added <see cref="T:EnergyMixin"/> instance.</returns>
        </member>
        <member name="M:Nautilus.Utility.PrefabUtils.AddResourceTracker(UnityEngine.GameObject,TechType)">
            <summary>
            Adds the <see cref="T:ResourceTracker"/> component to the passed game object to allow scanning via the Scanner Room.
            </summary>
            <param name="gameObject">the game object to add the resource tracker component to.</param>
            <param name="categoryTechType">TechType of the category in which this object will be displayed under in the Scanner Room.</param>
            <returns>A reference to the added <see cref="T:ResourceTracker"/> instance.</returns>
        </member>
        <member name="T:Nautilus.Utility.ReflectionHelper">
            <summary>
            An extension method class for simplifying reflection calls for improved readability.
            </summary>
        </member>
        <member name="M:Nautilus.Utility.ReflectionHelper.GetInstanceField``1(``0,System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets the value of the requested private field, using reflection, from the instance object.
            </summary>
            <typeparam name="T">The instance class type.</typeparam>
            <param name="instance">The instance.</param>
            <param name="fieldName">Name of the private field.</param>
            <param name="bindingFlags">The additional binding flags you wish to set.
            <see cref="F:System.Reflection.BindingFlags.NonPublic" /> and <see cref="F:System.Reflection.BindingFlags.Instance" /> are already included.</param>
            <returns>
            The value of the requested field as an <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:Nautilus.Utility.ReflectionHelper.SetInstanceField``1(``0,System.String,System.Object,System.Reflection.BindingFlags)">
            <summary>
            Sets the value of the requested private field, using reflection, on the instance object.
            </summary>
            <typeparam name="T">The instance class type.</typeparam>
            <param name="instance">The instance.</param>
            <param name="fieldName">Name of the private field.</param>
            <param name="value">The value to set.</param>
            <param name="bindingFlags">The additional binding flags you wish to set.
            <see cref="F:System.Reflection.BindingFlags.NonPublic" /> and <see cref="F:System.Reflection.BindingFlags.Instance" /> are already included.</param>
        </member>
        <member name="M:Nautilus.Utility.ReflectionHelper.GetStaticField``1(System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets the value of the requested private static field, using reflection, from the static object.
            </summary>
            <typeparam name="T">The static class type.</typeparam>
            <param name="fieldName">Name of the field.</param>
            <param name="bindingFlags">The additional binding flags you wish to set.
            <see cref="F:System.Reflection.BindingFlags.NonPublic" /> and <see cref="F:System.Reflection.BindingFlags.Static" /> are already included.</param>
            <returns>
            The value of the requested static field as an <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:Nautilus.Utility.ReflectionHelper.GetStaticField``1(``0,System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets the value of the requested private static field, using reflection, from the instance object.
            </summary>
            <typeparam name="T">The static class type.</typeparam>
            <param name="instance">The instance.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="bindingFlags">The additional binding flags you wish to set.
            <see cref="F:System.Reflection.BindingFlags.NonPublic" /> and <see cref="F:System.Reflection.BindingFlags.Static" /> are already included.</param>
            <returns>
            The value of the requested static field as an <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:Nautilus.Utility.ReflectionHelper.SetStaticField``1(System.String,System.Object,System.Reflection.BindingFlags)">
            <summary>
            Sets the value of the requested private static field, using reflection, on the static object.
            </summary>
            <typeparam name="T">The static class type.</typeparam>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value to set.</param>
            <param name="bindingFlags">The additional binding flags you wish to set.
            <see cref="F:System.Reflection.BindingFlags.NonPublic" /> and <see cref="F:System.Reflection.BindingFlags.Static" /> are already included.</param>
        </member>
        <member name="M:Nautilus.Utility.ReflectionHelper.SetStaticField``1(``0,System.String,System.Object,System.Reflection.BindingFlags)">
            <summary>
            Sets the value of the requested private static field, using reflection, on the instance object.
            </summary>
            <typeparam name="T">The static class type.</typeparam>
            <param name="instance">The instance.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value to set.</param>
            <param name="bindingFlags">The additional binding flags you wish to set.
            <see cref="F:System.Reflection.BindingFlags.NonPublic" /> and <see cref="F:System.Reflection.BindingFlags.Static" /> are already included.</param>
        </member>
        <member name="M:Nautilus.Utility.ReflectionHelper.GetInstanceMethod``1(System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets the <see cref="T:System.Reflection.MethodInfo" /> of a private instance method, using refelction, from the specified class.
            </summary>
            <typeparam name="T">The instance object type.</typeparam>
            <param name="methodName">Name of the method.</param>
            <param name="bindingFlags">The additional binding flags you wish to set.
            <see cref="F:System.Reflection.BindingFlags.NonPublic" /> and <see cref="F:System.Reflection.BindingFlags.Instance" /> are already included.</param>
            <returns>
            The <see cref="T:System.Reflection.MethodInfo" /> of the requested private method.
            </returns>
        </member>
        <member name="M:Nautilus.Utility.ReflectionHelper.GetInstanceMethod``1(``0,System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets the <see cref="T:System.Reflection.MethodInfo" /> of a private instance method, using refelction, from the instance object.
            </summary>
            <typeparam name="T">The instance object type.</typeparam>
            <param name="instance">The instance.</param>
            <param name="methodName">Name of the method.</param>
            <param name="bindingFlags">The additional binding flags you wish to set.
            <see cref="F:System.Reflection.BindingFlags.NonPublic" /> and <see cref="F:System.Reflection.BindingFlags.Instance" /> are already included.</param>
            <returns>
            The <see cref="T:System.Reflection.MethodInfo" /> of the requested private method.
            </returns>
        </member>
        <member name="M:Nautilus.Utility.ReflectionHelper.GetStaticMethod``1(System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets the <see cref="T:System.Reflection.MethodInfo" /> of a private static method, using refelction, from the specified class.
            </summary>
            <typeparam name="T">The object type.</typeparam>
            <param name="methodName">Name of the method.</param>
            <param name="bindingFlags">The additional binding flags you wish to set.
            <see cref="F:System.Reflection.BindingFlags.NonPublic" /> and <see cref="F:System.Reflection.BindingFlags.Static" /> are already included.</param>
            <returns>
            The <see cref="T:System.Reflection.MethodInfo" /> of the requested private method.
            </returns>
        </member>
        <member name="M:Nautilus.Utility.ReflectionHelper.GetStaticMethod``1(``0,System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets the <see cref="T:System.Reflection.MethodInfo" /> of a private static method, using refelction, from the instance object.
            </summary>
            <typeparam name="T">The object type.</typeparam>
            <param name="instance">The instance.</param>
            <param name="methodName">Name of the method.</param>
            <param name="bindingFlags">The additional binding flags you wish to set.
            <see cref="F:System.Reflection.BindingFlags.NonPublic" /> and <see cref="F:System.Reflection.BindingFlags.Static" /> are already included.</param>
            <returns>
            The <see cref="T:System.Reflection.MethodInfo" /> of the requested private method.
            </returns>
        </member>
        <member name="M:Nautilus.Utility.ReflectionHelper.CopyFields``1(``0,``0,System.Reflection.BindingFlags)">
            <summary>
            Does a deep copy of all field values from the original instance onto the copied instance.
            </summary>
            <typeparam name="T">The class type of both objects.</typeparam>
            <param name="original">The original instance.</param>
            <param name="copy">The instance receiving the copied values.</param>
            <param name="bindingFlags">The additional binding flags you wish to set.
            <see cref="F:System.Reflection.BindingFlags.Instance" /> is already included.</param>
        </member>
        <member name="T:Nautilus.Utility.SaveUtils">
            <summary>
            A small collection of save data related utilities.
            </summary>
        </member>
        <member name="M:Nautilus.Utility.SaveUtils.GetCurrentSaveDataDir">
            <summary>
            Returns the path to the current save slot's directory.
            </summary>
        </member>
        <member name="M:Nautilus.Utility.SaveUtils.RegisterOnSaveEvent(System.Action)">
            <summary>
            Registers a simple <see cref="T:System.Action"/> method to invoke whenever the player saves the game via the in game menu.
            </summary>
            <param name="onSaveAction">The method to invoke.</param>
        </member>
        <member name="M:Nautilus.Utility.SaveUtils.RegisterOnFinishLoadingEvent(System.Action)">
            <summary>
            Registers a simple <see cref="T:System.Action"/> method to invoke the <c>first time</c> the player loads a saved game via the in game menu.
            This is only invoked after the game (including most objects around the player) has FULLY loaded. For an earlier alternative, see <see cref="M:Nautilus.Utility.SaveUtils.RegisterOnStartLoadingEvent(System.Action)"/>.
            </summary>
            <param name="onFinishLoadingAction">The method to invoke. This action will not be invoked a second time.</param>
        </member>
        <member name="M:Nautilus.Utility.SaveUtils.RegisterOnStartLoadingEvent(System.Action)">
            <summary>
            Registers a simple <see cref="T:System.Action"/> method to invoke immediately after the <c>first time</c> the player loads a saved game via the in game menu.
            </summary>
            <param name="onStartLoadingAction">The method to invoke. This action will not be invoked a second time.</param>
        </member>
        <member name="M:Nautilus.Utility.SaveUtils.RegisterOnQuitEvent(System.Action)">
            <summary>
            Registers a simple <see cref="T:System.Action"/> method to invoke whenever the player quits the game via the in game menu.
            </summary>
            <param name="onQuitAction">The method to invoke.</param>
        </member>
        <member name="M:Nautilus.Utility.SaveUtils.UnregisterOnSaveEvent(System.Action)">
            <summary>
            Removes a method previously added through <see cref="M:Nautilus.Utility.SaveUtils.RegisterOnSaveEvent(System.Action)"/> so it is no longer invoked when saving the game.<para/>
            If you plan on using this, do not register an anonymous method.
            </summary>
            <param name="onSaveAction">The method invoked.</param>
        </member>
        <member name="M:Nautilus.Utility.SaveUtils.UnregisterOnFinishLoadingEvent(System.Action)">
            <summary>
            Removes a method previously added through <see cref="M:Nautilus.Utility.SaveUtils.RegisterOnFinishLoadingEvent(System.Action)"/> so it is no longer invoked when loading the game.<para/>
            If you plan on using this, do not register an anonymous method.
            </summary>
            <param name="onLoadAction">The method invoked.</param>
        </member>
        <member name="M:Nautilus.Utility.SaveUtils.UnregisterOnStartLoadingEvent(System.Action)">
            <summary>
            Removes a method previously added through <see cref="M:Nautilus.Utility.SaveUtils.RegisterOnStartLoadingEvent(System.Action)"/> so it is no longer invoked when loading the game.<para/>
            If you plan on using this, do not register an anonymous method.
            </summary>
            <param name="onLoadAction">The method invoked.</param>
        </member>
        <member name="M:Nautilus.Utility.SaveUtils.UnregisterOnQuitEvent(System.Action)">
            <summary>
            Removes a method previously added through <see cref="M:Nautilus.Utility.SaveUtils.RegisterOnSaveEvent(System.Action)"/> so it is no longer invoked when quiting the game.<para/>
            If you plan on using this, do not register an anonymous method.
            </summary>
            <param name="onQuitAction">The method invoked.</param>
        </member>
        <member name="M:Nautilus.Utility.SaveUtils.RegisterOneTimeUseOnSaveEvent(System.Action)">
            <summary>
            Registers a simple <see cref="T:System.Action"/> method to invoke the <c>first time</c> the player saves the game via the in game menu.
            </summary>
            <param name="onSaveAction">The method to invoke. This action will not be invoked a second time.</param>
        </member>
        <member name="M:Nautilus.Utility.SaveUtils.RegisterOneTimeUseOnLoadEvent(System.Action)">
            <summary>
            Registers a simple <see cref="T:System.Action"/> method to invoke the <c>first time</c> the player loads a saved game via the in game menu.
            </summary>
            <param name="onLoadAction">The method to invoke. This action will not be invoked a second time.</param>
        </member>
        <member name="M:Nautilus.Utility.SaveUtils.RegisterOneTimeUseOnQuitEvent(System.Action)">
            <summary>
            Registers a simple <see cref="T:System.Action"/> method to invoke the <c>first time</c> the player quits the game via the in game menu.
            </summary>
            <param name="onQuitAction">The method to invoke. This action will not be invoked a second time.</param>
        </member>
        <member name="T:Nautilus.Utility.SelfCheckingDictionary`2">
            <summary>
            This dictionary structure automatically checks for duplicate keys as they are being added to the collection.
            Duplicate entries are logged and removed from the final collection.
            </summary>
            <typeparam name="K">The Key Type</typeparam>
            <typeparam name="V">The Value Type</typeparam>
        </member>
        <member name="F:Nautilus.Utility.SelfCheckingDictionary`2.DuplicatesDiscarded">
            <summary>
            Maintains a collection of the keys that have encountered duplicates and how many of them were discarded.
            </summary>
        </member>
        <member name="F:Nautilus.Utility.SelfCheckingDictionary`2.UniqueEntries">
            <summary>
            Maintains the final collection of only unique keys.
            </summary>
        </member>
        <member name="M:Nautilus.Utility.SelfCheckingDictionary`2.#ctor(System.String,System.Func{`0,System.String})">
            <summary>
            Creates a <see cref="T:Nautilus.Utility.SelfCheckingDictionary`2"/> with an optional ToString function.
            </summary>
            <param name="collectionName"></param>
            <param name="toLog"></param>
        </member>
        <member name="M:Nautilus.Utility.SelfCheckingDictionary`2.#ctor(System.String,System.Collections.Generic.IEqualityComparer{`0},System.Func{`0,System.String})">
            <summary>
            Creates a <see cref="T:Nautilus.Utility.SelfCheckingDictionary`2"/> with an EqualityComparer and an optional ToString function.
            </summary>
            <param name="collectionName"></param>
            <param name="equalityComparer"></param>
            <param name="toLog"></param>
        </member>
        <member name="P:Nautilus.Utility.SelfCheckingDictionary`2.Item(`0)">
            <summary>
            Gets a key value pair from the collection or sets a key value pair into the collection.
            When setting, if a key already exists, the previous entry will be discarded.
            </summary>
            <param name="key">The unique key.</param>
            <returns>The value corresponding to the key.</returns>
        </member>
        <member name="P:Nautilus.Utility.SelfCheckingDictionary`2.Keys">
            <summary>
            Gets a collection containing the keys in the <see cref="T:Nautilus.Utility.SelfCheckingDictionary`2"/>
            </summary>
        </member>
        <member name="P:Nautilus.Utility.SelfCheckingDictionary`2.Values">
            <summary>
            Gets a collection containing the values in the <see cref="T:Nautilus.Utility.SelfCheckingDictionary`2"/>
            </summary>
        </member>
        <member name="P:Nautilus.Utility.SelfCheckingDictionary`2.Count">
            <summary>
            Gets the number of unique entries in the <see cref="T:Nautilus.Utility.SelfCheckingDictionary`2"/>
            </summary>
        </member>
        <member name="P:Nautilus.Utility.SelfCheckingDictionary`2.IsReadOnly">
            <summary>
            Defaults to false.
            </summary>
        </member>
        <member name="M:Nautilus.Utility.SelfCheckingDictionary`2.Add(`0,`1)">
            <summary>
            Add a new entry the collection.
            If a duplicate key is found, the new value will be discarded.
            </summary>
            <param name="key">The unique key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Nautilus.Utility.SelfCheckingDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Add a new entry the collection.
            If a duplicate key is found, the new value will be discarded.
            </summary>
            <param name="item">The key value pair.</param>
        </member>
        <member name="M:Nautilus.Utility.SelfCheckingDictionary`2.DupFoundNewDiscardedLog(`0)">
            <summary>
            Informs the user that the new entry for the specified key has been discarded.
            </summary>
            <param name="key">The no longer unique key.</param>
        </member>
        <member name="M:Nautilus.Utility.SelfCheckingDictionary`2.DupFoundLastDiscardedLog(`0)">
            <summary>
            Informs the user that the previous entry for the specified key has been discarded.
            </summary>
            <param name="key">The no longer unique key.</param>
        </member>
        <member name="T:Nautilus.Utility.StorageHelperExtensions">
            <summary>
            Extension methods to provide static calls for <see cref="T:ItemsContainer"/> into <see cref="T:Nautilus.Utility.ItemStorageHelper"/> methods.
            </summary>
        </member>
        <member name="M:Nautilus.Utility.StorageHelperExtensions.HasRoomCached(ItemsContainer,System.Int32,System.Int32)">
            <summary>
            Using the cached container info, determines whether the specified container has room for an item of the specified size.
            </summary>
            <param name="container">The container to check.</param>
            <param name="width">The item width.</param>
            <param name="height">The item height.</param>
            <returns>
              <c>true</c> if there is room for the item in the container,; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nautilus.Utility.StorageHelperExtensions.HasRoomCached(ItemsContainer,Vector2int)">
            <summary>
            Using the cached container info, determines whether the specified container has room for an item of the specified size.
            </summary>
            <param name="container">The container to check.</param>
            <param name="itemSize">Size of the item.</param>
            <returns>
              <c>true</c> if there is room for the item in the container,; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nautilus.Utility.StorageHelperExtensions.IsEmpty(ItemsContainer)">
            <summary>
            Determines whether the specified container is empty.
            </summary>
            <param name="container">The items container to check.</param>
            <returns>
              <c>true</c> if the specified container is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nautilus.Utility.StorageHelperExtensions.IsFull(ItemsContainer)">
            <summary>
            Determines whether the specified container is full.
            </summary>
            <param name="container">The items container to check.</param>
            <returns>
              <c>true</c> if the specified container is full; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nautilus.Utility.StorageHelperExtensions.GetTotalSlots(ItemsContainer)">
            <summary>
            The totals number of 1x1 slots in the container, as calculated by the container's width and height.
            </summary>
            <param name="container">The container.</param>
            <returns></returns>
        </member>
        <member name="M:Nautilus.Utility.StorageHelperExtensions.GetStorageLabel(ItemsContainer)">
            <summary>
            Get the inernal label for the storage container.
            </summary>
            <param name="container">The container.</param>
            <returns>
            The label used and displayed in-game for the container.
            </returns>
        </member>
        <member name="M:Nautilus.Utility.StorageHelperExtensions.GetAllowedTechTypes(ItemsContainer)">
            <summary>
            Gets the set of techtypes allowed in this container. This set can be altered.
            If the set is null or empty, then all items can be added.
            </summary>
            <param name="container">The container to check.</param>
            <returns>
            The collection of techtypes allowed in the container.
            </returns>
        </member>
        <member name="T:Nautilus.Utility.WorldEntityInfoUtils">
            <summary>
            Utilities related to creating a <see cref="T:UWE.WorldEntityInfo"/> instance.
            </summary>
        </member>
        <member name="M:Nautilus.Utility.WorldEntityInfoUtils.Create(System.String,TechType,LargeWorldEntity.CellLevel,EntitySlot.Type,System.Boolean,UnityEngine.Vector3)">
            <summary>
            Creates a new instance of the <see cref="T:UWE.WorldEntityInfo"/> class based on the given parameters.
            </summary>
            <param name="classId">The Class ID of the prefab.</param>
            <param name="techType">The TechType of the prefab.</param>
            <param name="cellLevel">The cell level of the prefab (should match whatever is used in the <see cref="T:LargeWorldEntity"/> component).</param>
            <param name="slotType">The slot type of the prefab.</param>
            <param name="zUp">If true, the prefab will use its Z axis as the "up" direction. By default is false, and instead uses its Y axis to determine which way is up.</param>
            <param name="localScale">The local scale of the prefab when spawned. If left at <see langword="default"/>, aka (0, 0, 0) or <see cref="P:UnityEngine.Vector3.zero"/>, will automatically resolve to <see cref="P:UnityEngine.Vector3.one"/>.</param>
            <returns>The created <see cref="T:UWE.WorldEntityInfo"/>.</returns>
        </member>
        <member name="M:Nautilus.Utility.WorldEntityInfoUtils.Create(Nautilus.Assets.PrefabInfo,LargeWorldEntity.CellLevel,EntitySlot.Type,System.Boolean,UnityEngine.Vector3)">
            <summary>
            Creates a new instance of the <see cref="T:UWE.WorldEntityInfo"/> class based on the given parameters.
            </summary>
            <param name="prefabInfo">The object that holds the Class ID and TechType.</param>
            <param name="cellLevel">The cell level of the prefab (should match whatever is used in the <see cref="T:LargeWorldEntity"/> component).</param>
            <param name="slotType">The slot type of the prefab.</param>
            <param name="zUp">If true, the prefab will use its Z axis as the "up" direction. By default is false, and instead uses its Y axis to determine which way is up.</param>
            <param name="localScale">The local scale of the prefab when spawned. If left at <see langword="default"/>, aka (0, 0, 0) or <see cref="P:UnityEngine.Vector3.zero"/>, will automatically resolve to <see cref="P:UnityEngine.Vector3.one"/>.</param>
            <returns>The created <see cref="T:UWE.WorldEntityInfo"/>.</returns>
        </member>
    </members>
</doc>
